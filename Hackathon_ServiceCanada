{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S1EOpeYta-dy"
      },
      "outputs": [],
      "source": [
        "# importing libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import re\n",
        "from dateutil.relativedelta import relativedelta\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9TFIodbZANL",
        "outputId": "76024799-5b81-49b3-8e37-c6d15105d202"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py:3326: DtypeWarning: Columns (8) have mixed types.Specify dtype option on import or set low_memory=False.\n",
            "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
          ]
        }
      ],
      "source": [
        "banking = pd.read_csv('https://raw.githubusercontent.com/Ohio1Tea/Hackathon/main/banking-information-data.csv')\n",
        "dependent = pd.read_csv('https://raw.githubusercontent.com/Ohio1Tea/Hackathon/main/dependent-data.csv')\n",
        "net_income = pd.read_csv('https://raw.githubusercontent.com/Ohio1Tea/Hackathon/main/family-net-income-data.csv')\n",
        "applicant = pd.read_csv('https://raw.githubusercontent.com/Ohio1Tea/Hackathon/main/applicant-data.csv')\n",
        "server = pd.read_csv('https://raw.githubusercontent.com/Ohio1Tea/Hackathon/main/server-log-data.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Check Eligibility"
      ],
      "metadata": {
        "id": "C_eUzXeJX9LV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "75sV8DxwIWjb",
        "outputId": "c1021c83-4211-46b4-a8b5-c786b9564845"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   APP_ID  FINANCIAL_INSTITUTION_NUMBER  ACCOUNT_NUMBER  TRANSIT_NUMBER\n",
              "0  100000                           925    6.709730e+11         14620.0\n",
              "1  100001                           284    7.343455e+11         93305.0\n",
              "2  100002                           248    1.454532e+11         64103.0\n",
              "3  100003                           499    7.194849e+11         65314.0\n",
              "4  100004                           248    2.990500e+11         20629.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-846811b8-6197-4421-a21d-d79ace793f2f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>FINANCIAL_INSTITUTION_NUMBER</th>\n",
              "      <th>ACCOUNT_NUMBER</th>\n",
              "      <th>TRANSIT_NUMBER</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100000</td>\n",
              "      <td>925</td>\n",
              "      <td>6.709730e+11</td>\n",
              "      <td>14620.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100001</td>\n",
              "      <td>284</td>\n",
              "      <td>7.343455e+11</td>\n",
              "      <td>93305.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100002</td>\n",
              "      <td>248</td>\n",
              "      <td>1.454532e+11</td>\n",
              "      <td>64103.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100003</td>\n",
              "      <td>499</td>\n",
              "      <td>7.194849e+11</td>\n",
              "      <td>65314.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100004</td>\n",
              "      <td>248</td>\n",
              "      <td>2.990500e+11</td>\n",
              "      <td>20629.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-846811b8-6197-4421-a21d-d79ace793f2f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-846811b8-6197-4421-a21d-d79ace793f2f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-846811b8-6197-4421-a21d-d79ace793f2f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 289
        }
      ],
      "source": [
        "banking = banking.rename(columns={'TRANSIT_NUMBER': 'ACCOUNT_NUMBER', 'ACCOUNT_NUMBER': 'TRANSIT_NUMBER'})\n",
        "banking.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hz6D25gyeEWM",
        "outputId": "d32beab9-769b-4d13-c49c-3760ba27c1ca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   APP_ID       P8N  PARTNER_P8N DATE_BIRTH_1 DATE_BIRTH_2 DATE_BIRTH_3  \\\n",
              "0  100000  39916021   65771788.0   2016-12-06          NaN          NaN   \n",
              "1  100001  28596991   25829667.0   2019-10-17   2022-06-10          NaN   \n",
              "2  100002  65751811   63839036.0   2019-08-05   2013-06-19          NaN   \n",
              "3  100003  43012353   73277757.0   2013-11-29          NaN          NaN   \n",
              "4  100004  34120896   72359770.0   2021-05-11          NaN          NaN   \n",
              "\n",
              "  DATE_BIRTH_4 DATE_BIRTH_5 DATE_BIRTH_6  DATE_BIRTH_7  DATE_BIRTH_8  \\\n",
              "0          NaN          NaN          NaN           NaN           NaN   \n",
              "1          NaN          NaN          NaN           NaN           NaN   \n",
              "2          NaN          NaN          NaN           NaN           NaN   \n",
              "3          NaN          NaN          NaN           NaN           NaN   \n",
              "4          NaN          NaN          NaN           NaN           NaN   \n",
              "\n",
              "   DATE_BIRTH_9  \n",
              "0           NaN  \n",
              "1           NaN  \n",
              "2           NaN  \n",
              "3           NaN  \n",
              "4           NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-afca9f42-98c5-4830-bf91-195321b5a475\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>DATE_BIRTH_1</th>\n",
              "      <th>DATE_BIRTH_2</th>\n",
              "      <th>DATE_BIRTH_3</th>\n",
              "      <th>DATE_BIRTH_4</th>\n",
              "      <th>DATE_BIRTH_5</th>\n",
              "      <th>DATE_BIRTH_6</th>\n",
              "      <th>DATE_BIRTH_7</th>\n",
              "      <th>DATE_BIRTH_8</th>\n",
              "      <th>DATE_BIRTH_9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100000</td>\n",
              "      <td>39916021</td>\n",
              "      <td>65771788.0</td>\n",
              "      <td>2016-12-06</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100001</td>\n",
              "      <td>28596991</td>\n",
              "      <td>25829667.0</td>\n",
              "      <td>2019-10-17</td>\n",
              "      <td>2022-06-10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100002</td>\n",
              "      <td>65751811</td>\n",
              "      <td>63839036.0</td>\n",
              "      <td>2019-08-05</td>\n",
              "      <td>2013-06-19</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100003</td>\n",
              "      <td>43012353</td>\n",
              "      <td>73277757.0</td>\n",
              "      <td>2013-11-29</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100004</td>\n",
              "      <td>34120896</td>\n",
              "      <td>72359770.0</td>\n",
              "      <td>2021-05-11</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-afca9f42-98c5-4830-bf91-195321b5a475')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-afca9f42-98c5-4830-bf91-195321b5a475 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-afca9f42-98c5-4830-bf91-195321b5a475');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 290
        }
      ],
      "source": [
        "dependent.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eoC1JjG6Ed2O"
      },
      "outputs": [],
      "source": [
        "# Creating a list containing applicants' ID that do not meet the critiria.\n",
        "ineligi = []"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SDuVfffaoGpU"
      },
      "outputs": [],
      "source": [
        "from datetime import datetime, date"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pRLLdM2Ea7MK"
      },
      "outputs": [],
      "source": [
        "# checking exsiting dependent under each app_ID, if there is a dependent has a\n",
        "# age greater than 18, add APP_ID into the list\n",
        "for index, row in dependent.iterrows():\n",
        "  for i in range(9):\n",
        "    birthdate_str = row['DATE_BIRTH_{}'.format(i+1)]\n",
        "    if type(birthdate_str) != float:\n",
        "      birthdate = datetime.strptime(birthdate_str, '%Y-%m-%d').date()  # convert to date object\n",
        "      today = date.today()  # get today's date\n",
        "      age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))\n",
        "\n",
        "      if age >= 18 and row['APP_ID'] not in ineligi:\n",
        "          ineligi.append(row['APP_ID'])\n",
        "      "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycIoG1-Z21jV",
        "outputId": "2065d67d-5e94-4181-c244-97bd1293160d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "318"
            ]
          },
          "metadata": {},
          "execution_count": 294
        }
      ],
      "source": [
        "len(ineligi)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "iw65yrwhk9Uo",
        "outputId": "e57031ce-5dac-4c22-e12f-dbb5e8eb9621"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   APP_ID         P8N                   STREET_NAME POSTAL_CODE  \\\n",
              "0  100000  39916021.0      8191 Blankenship Gateway      L1E0J2   \n",
              "1  100001  28596991.0  4163 Werner Meadow Suite 321      V3W9W5   \n",
              "2  100002  65751811.0             849 Timothy Vista      V5Z1Y2   \n",
              "3  100003  43012353.0         8492 Odonnell Squares      L3R8A5   \n",
              "4  100004  34120896.0   625 Arthur Forest Suite 533      V7A3Y7   \n",
              "\n",
              "                            EMAIL  HOME_AREA_CODE  PHONE_NUMBER  CUMUL_PAY  \\\n",
              "0    melinda_harfoush39@gmail.com           416.0     1735604.0        800   \n",
              "1           vanesaxwhitty@live.ca           604.0     5132538.0       1500   \n",
              "2        kristenwmclean@gmail.com             NaN           NaN       1500   \n",
              "3  dang.moerschfelder87@gmail.com           647.0     2730444.0        800   \n",
              "4   prockertjessica83@outlook.com           604.0     3201317.0        800   \n",
              "\n",
              "   FINANCIAL_INSTITUTION_NUMBER  TRANSIT_NUMBER  ACCOUNT_NUMBER  \n",
              "0                           925         14620.0    6.709730e+11  \n",
              "1                           284         93305.0    7.343455e+11  \n",
              "2                           248         64103.0    1.454532e+11  \n",
              "3                           499         65314.0    7.194849e+11  \n",
              "4                           248         20629.0    2.990500e+11  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3229080f-d6dd-4ea8-94e7-a7c85c4fdd0e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>P8N</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "      <th>FINANCIAL_INSTITUTION_NUMBER</th>\n",
              "      <th>TRANSIT_NUMBER</th>\n",
              "      <th>ACCOUNT_NUMBER</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100000</td>\n",
              "      <td>39916021.0</td>\n",
              "      <td>8191 Blankenship Gateway</td>\n",
              "      <td>L1E0J2</td>\n",
              "      <td>melinda_harfoush39@gmail.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>1735604.0</td>\n",
              "      <td>800</td>\n",
              "      <td>925</td>\n",
              "      <td>14620.0</td>\n",
              "      <td>6.709730e+11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100001</td>\n",
              "      <td>28596991.0</td>\n",
              "      <td>4163 Werner Meadow Suite 321</td>\n",
              "      <td>V3W9W5</td>\n",
              "      <td>vanesaxwhitty@live.ca</td>\n",
              "      <td>604.0</td>\n",
              "      <td>5132538.0</td>\n",
              "      <td>1500</td>\n",
              "      <td>284</td>\n",
              "      <td>93305.0</td>\n",
              "      <td>7.343455e+11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100002</td>\n",
              "      <td>65751811.0</td>\n",
              "      <td>849 Timothy Vista</td>\n",
              "      <td>V5Z1Y2</td>\n",
              "      <td>kristenwmclean@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1500</td>\n",
              "      <td>248</td>\n",
              "      <td>64103.0</td>\n",
              "      <td>1.454532e+11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100003</td>\n",
              "      <td>43012353.0</td>\n",
              "      <td>8492 Odonnell Squares</td>\n",
              "      <td>L3R8A5</td>\n",
              "      <td>dang.moerschfelder87@gmail.com</td>\n",
              "      <td>647.0</td>\n",
              "      <td>2730444.0</td>\n",
              "      <td>800</td>\n",
              "      <td>499</td>\n",
              "      <td>65314.0</td>\n",
              "      <td>7.194849e+11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100004</td>\n",
              "      <td>34120896.0</td>\n",
              "      <td>625 Arthur Forest Suite 533</td>\n",
              "      <td>V7A3Y7</td>\n",
              "      <td>prockertjessica83@outlook.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>3201317.0</td>\n",
              "      <td>800</td>\n",
              "      <td>248</td>\n",
              "      <td>20629.0</td>\n",
              "      <td>2.990500e+11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3229080f-d6dd-4ea8-94e7-a7c85c4fdd0e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3229080f-d6dd-4ea8-94e7-a7c85c4fdd0e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3229080f-d6dd-4ea8-94e7-a7c85c4fdd0e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 295
        }
      ],
      "source": [
        "app_bank_merged = pd.merge(applicant[['APP_ID','P8N','STREET_NAME','POSTAL_CODE','EMAIL','HOME_AREA_CODE','PHONE_NUMBER'\n",
        "                      ,'CUMUL_PAY']],banking[['APP_ID','FINANCIAL_INSTITUTION_NUMBER','TRANSIT_NUMBER','ACCOUNT_NUMBER']]\n",
        "                 ,on='APP_ID')\n",
        "app_bank_merged.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xSrSkT8_9g02",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5896babf-a618-417a-fb7a-52ac4349a06a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20526\n",
            "20844\n"
          ]
        }
      ],
      "source": [
        "# check if applicant possess a valid banking informations\n",
        "count = 0\n",
        "\n",
        "for index, row in banking.iterrows():\n",
        "  instu_num = row['FINANCIAL_INSTITUTION_NUMBER'].astype(int).astype(str)\n",
        "  trans_num = row['TRANSIT_NUMBER'].astype(int).astype(str)\n",
        "  #acc_num = row['ACCOUNT_NUMBER'].astype(int).astype(str)\n",
        "  if (re.match(r'^\\d{3}$', instu_num) and # institutional number should 3 digits\n",
        "    re.match(r'^\\d{5}$', trans_num)): # transit number should 3 digits\n",
        "      continue\n",
        "  elif row['APP_ID'] not in ineligi:\n",
        "      count += 1\n",
        "      ineligi.append(row['APP_ID'])\n",
        "print(count) \n",
        "print(len(ineligi))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kwJUPqkLE6ek",
        "outputId": "941c26ee-1252-4591-cfd7-b2b8a4054c9a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "21107\n"
          ]
        }
      ],
      "source": [
        "# checking net income\n",
        "net_income['total_income'] = net_income['employment_income_1'] + net_income['employment_income_2']\n",
        "under = net_income.loc[net_income['total_income'] > 70001, 'APP_ID']\n",
        "app_id_income = under.tolist()\n",
        "for app_id in app_id_income:\n",
        "    if app_id not in ineligi:\n",
        "        ineligi.append(app_id)\n",
        "print(len(ineligi))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "values = [20526,581]\n",
        "labels = ['Bank info error', 'Ineligible with no bank info error']\n",
        "colors = ['#1f77b4', '#ff7f0e']\n",
        "\n",
        "# Plot the pie chart\n",
        "plt.pie(values, colors=colors, startangle=90, autopct='%1.1f%%')\n",
        "plt.legend()\n",
        "plt.axis('equal')\n",
        "plt.title('Proportion of Applicant with Bank Information Error')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "YG7I58IMQWqu",
        "outputId": "da67acc6-2185-4479-9664-85c5c3cc57d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Proportion of Applicant with Bank Information Error')"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V5jKLoQSZqPE"
      },
      "outputs": [],
      "source": [
        "# Filter dataframe where APP_ID is in ineligi list\n",
        "invalid_ = applicant[applicant['APP_ID'].isin(ineligi)]\n",
        "\n",
        "# Filter dataframe where APP_ID is NOT in ineligi list\n",
        "valid_ = applicant[~applicant['APP_ID'].isin(ineligi)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 730
        },
        "id": "pzU8mrgtZr-C",
        "outputId": "7a785078-f486-4138-f1d1-4fa805d055cb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "5       100005  2023-01-01:03:09:47  2023-01-01:03:29:12  33408533.0   \n",
              "14      100014  2023-01-01:05:57:05  2023-01-01:06:12:17  50780523.0   \n",
              "16      100016  2023-01-01:06:05:46  2023-01-01:06:24:13  44826013.0   \n",
              "19      100019  2023-01-01:06:34:43  2023-01-01:06:52:42  74109384.0   \n",
              "30      100030  2023-01-01:07:32:32  2023-01-01:07:54:33  44062077.0   \n",
              "...        ...                  ...                  ...         ...   \n",
              "186914  286914  2023-03-31:00:38:49  2023-03-31:00:58:24  20738296.0   \n",
              "186921  286921  2023-03-31:00:59:59  2023-03-31:01:24:18  43674181.0   \n",
              "186926  286926  2023-03-31:01:35:04  2023-03-31:01:53:21  75358646.0   \n",
              "186951  286951  2023-03-31:03:00:48  2023-03-31:03:18:35  33628498.0   \n",
              "186957  286957  2023-03-31:08:13:26  2023-03-31:08:34:52  69999783.0   \n",
              "\n",
              "        PARTNER_P8N  BIRTH_DATE  FIRST_NAME LAST_NAME  \\\n",
              "5        31288799.0  1991-09-23     Patrick     Blair   \n",
              "14       20639236.0  1990-07-14      Lauren     Smith   \n",
              "16       26356999.0         NaN         NaN       NaN   \n",
              "19       80938566.0  1994-03-28        Koby      Kaur   \n",
              "30       19093166.0  1990-10-27  Kelly Jane     hough   \n",
              "...             ...         ...         ...       ...   \n",
              "186914   22123373.0  1993-11-20     Jordain    Hyland   \n",
              "186921   67273854.0  1989-08-18      Selena  Chandler   \n",
              "186926          NaN  1992-06-15     michael    AYCENK   \n",
              "186951          NaN  1985-08-26       Bryna     Berge   \n",
              "186957   40912726.0  1992-07-01      Amanda     Unwin   \n",
              "\n",
              "                          STREET_NAME MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "5                 4644 Andrew Islands          RICHMOND      V6X1A8   \n",
              "14                 88 Henderson Ville            LONDON      N6C4P3   \n",
              "16         6970 Hicks Radial Apt. 543          MONTREAL      H3N2V8   \n",
              "19                3327 Gilmore Shores        NORTH YORK      M2J2X9   \n",
              "30                62656 Chandler Oval      SAINT-HUBERT      J3Y5N1   \n",
              "...                               ...               ...         ...   \n",
              "186914                9360 Clark Isle         STRATFORD      N5A0B3   \n",
              "186921               720 Ryan Islands           LANGLEY      V3A1V6   \n",
              "186926               5434 Hunt Estate            WHITBY      L1R2C6   \n",
              "186951                983 Kevin Ports              YORK      M6E4H6   \n",
              "186957  896 Karen Camp Suite h2EGGkBr        LETHBRIDGE      T1J2R7   \n",
              "\n",
              "        PROVINCE__ID                         EMAIL  HOME_AREA_CODE  \\\n",
              "5               10.0           p.blair61@gmail.com           604.0   \n",
              "14               6.0     smithlauren92@outlook.com           519.0   \n",
              "16               5.0                           NaN           438.0   \n",
              "19               6.0          kaur44koby@gmail.com           416.0   \n",
              "30               5.0          kj.hough90@gmail.com             NaN   \n",
              "...              ...                           ...             ...   \n",
              "186914           6.0     hyland38jordain@gmail.com           519.0   \n",
              "186921          10.0  selenachandler55@outlook.com           604.0   \n",
              "186926           6.0      michaelaycenk8@gmail.com           905.0   \n",
              "186951           6.0         brynaqberge@gmail.com           416.0   \n",
              "186957           9.0      amanda_unwin91@gmail.com             NaN   \n",
              "\n",
              "        PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "5          2708470.0                 E        250  \n",
              "14         2080528.0                SE        250  \n",
              "16         7604893.0                UE        800  \n",
              "19         2201087.0                UE        800  \n",
              "30               NaN                 E        250  \n",
              "...              ...               ...        ...  \n",
              "186914     6256761.0                 E          0  \n",
              "186921     2528518.0                UE          0  \n",
              "186926     2261851.0                 E          0  \n",
              "186951     3159469.0               ESE          0  \n",
              "186957           NaN                 E          0  \n",
              "\n",
              "[21107 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e99e2399-2017-4a5a-8829-89496fb4415e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>100005</td>\n",
              "      <td>2023-01-01:03:09:47</td>\n",
              "      <td>2023-01-01:03:29:12</td>\n",
              "      <td>33408533.0</td>\n",
              "      <td>31288799.0</td>\n",
              "      <td>1991-09-23</td>\n",
              "      <td>Patrick</td>\n",
              "      <td>Blair</td>\n",
              "      <td>4644 Andrew Islands</td>\n",
              "      <td>RICHMOND</td>\n",
              "      <td>V6X1A8</td>\n",
              "      <td>10.0</td>\n",
              "      <td>p.blair61@gmail.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>2708470.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>100014</td>\n",
              "      <td>2023-01-01:05:57:05</td>\n",
              "      <td>2023-01-01:06:12:17</td>\n",
              "      <td>50780523.0</td>\n",
              "      <td>20639236.0</td>\n",
              "      <td>1990-07-14</td>\n",
              "      <td>Lauren</td>\n",
              "      <td>Smith</td>\n",
              "      <td>88 Henderson Ville</td>\n",
              "      <td>LONDON</td>\n",
              "      <td>N6C4P3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>smithlauren92@outlook.com</td>\n",
              "      <td>519.0</td>\n",
              "      <td>2080528.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>100016</td>\n",
              "      <td>2023-01-01:06:05:46</td>\n",
              "      <td>2023-01-01:06:24:13</td>\n",
              "      <td>44826013.0</td>\n",
              "      <td>26356999.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6970 Hicks Radial Apt. 543</td>\n",
              "      <td>MONTREAL</td>\n",
              "      <td>H3N2V8</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>438.0</td>\n",
              "      <td>7604893.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>100019</td>\n",
              "      <td>2023-01-01:06:34:43</td>\n",
              "      <td>2023-01-01:06:52:42</td>\n",
              "      <td>74109384.0</td>\n",
              "      <td>80938566.0</td>\n",
              "      <td>1994-03-28</td>\n",
              "      <td>Koby</td>\n",
              "      <td>Kaur</td>\n",
              "      <td>3327 Gilmore Shores</td>\n",
              "      <td>NORTH YORK</td>\n",
              "      <td>M2J2X9</td>\n",
              "      <td>6.0</td>\n",
              "      <td>kaur44koby@gmail.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>2201087.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>100030</td>\n",
              "      <td>2023-01-01:07:32:32</td>\n",
              "      <td>2023-01-01:07:54:33</td>\n",
              "      <td>44062077.0</td>\n",
              "      <td>19093166.0</td>\n",
              "      <td>1990-10-27</td>\n",
              "      <td>Kelly Jane</td>\n",
              "      <td>hough</td>\n",
              "      <td>62656 Chandler Oval</td>\n",
              "      <td>SAINT-HUBERT</td>\n",
              "      <td>J3Y5N1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>kj.hough90@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186914</th>\n",
              "      <td>286914</td>\n",
              "      <td>2023-03-31:00:38:49</td>\n",
              "      <td>2023-03-31:00:58:24</td>\n",
              "      <td>20738296.0</td>\n",
              "      <td>22123373.0</td>\n",
              "      <td>1993-11-20</td>\n",
              "      <td>Jordain</td>\n",
              "      <td>Hyland</td>\n",
              "      <td>9360 Clark Isle</td>\n",
              "      <td>STRATFORD</td>\n",
              "      <td>N5A0B3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>hyland38jordain@gmail.com</td>\n",
              "      <td>519.0</td>\n",
              "      <td>6256761.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186921</th>\n",
              "      <td>286921</td>\n",
              "      <td>2023-03-31:00:59:59</td>\n",
              "      <td>2023-03-31:01:24:18</td>\n",
              "      <td>43674181.0</td>\n",
              "      <td>67273854.0</td>\n",
              "      <td>1989-08-18</td>\n",
              "      <td>Selena</td>\n",
              "      <td>Chandler</td>\n",
              "      <td>720 Ryan Islands</td>\n",
              "      <td>LANGLEY</td>\n",
              "      <td>V3A1V6</td>\n",
              "      <td>10.0</td>\n",
              "      <td>selenachandler55@outlook.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>2528518.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186926</th>\n",
              "      <td>286926</td>\n",
              "      <td>2023-03-31:01:35:04</td>\n",
              "      <td>2023-03-31:01:53:21</td>\n",
              "      <td>75358646.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1992-06-15</td>\n",
              "      <td>michael</td>\n",
              "      <td>AYCENK</td>\n",
              "      <td>5434 Hunt Estate</td>\n",
              "      <td>WHITBY</td>\n",
              "      <td>L1R2C6</td>\n",
              "      <td>6.0</td>\n",
              "      <td>michaelaycenk8@gmail.com</td>\n",
              "      <td>905.0</td>\n",
              "      <td>2261851.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186951</th>\n",
              "      <td>286951</td>\n",
              "      <td>2023-03-31:03:00:48</td>\n",
              "      <td>2023-03-31:03:18:35</td>\n",
              "      <td>33628498.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1985-08-26</td>\n",
              "      <td>Bryna</td>\n",
              "      <td>Berge</td>\n",
              "      <td>983 Kevin Ports</td>\n",
              "      <td>YORK</td>\n",
              "      <td>M6E4H6</td>\n",
              "      <td>6.0</td>\n",
              "      <td>brynaqberge@gmail.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>3159469.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186957</th>\n",
              "      <td>286957</td>\n",
              "      <td>2023-03-31:08:13:26</td>\n",
              "      <td>2023-03-31:08:34:52</td>\n",
              "      <td>69999783.0</td>\n",
              "      <td>40912726.0</td>\n",
              "      <td>1992-07-01</td>\n",
              "      <td>Amanda</td>\n",
              "      <td>Unwin</td>\n",
              "      <td>896 Karen Camp Suite h2EGGkBr</td>\n",
              "      <td>LETHBRIDGE</td>\n",
              "      <td>T1J2R7</td>\n",
              "      <td>9.0</td>\n",
              "      <td>amanda_unwin91@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21107 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e99e2399-2017-4a5a-8829-89496fb4415e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e99e2399-2017-4a5a-8829-89496fb4415e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e99e2399-2017-4a5a-8829-89496fb4415e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 264
        }
      ],
      "source": [
        "invalid_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 834
        },
        "id": "bSmCBfdCZsEF",
        "outputId": "98bc3d08-d230-4052-acf3-74736f8e4174"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "0       100000  2023-01-01:00:31:44  2023-01-01:00:51:58  39916021.0   \n",
              "1       100001  2023-01-01:00:54:22  2023-01-01:01:19:03  28596991.0   \n",
              "2       100002  2023-01-01:01:13:03  2023-01-01:01:32:07  65751811.0   \n",
              "3       100003  2023-01-01:02:07:01  2023-01-01:02:24:04  43012353.0   \n",
              "4       100004  2023-01-01:02:21:19  2023-01-01:02:42:20  34120896.0   \n",
              "...        ...                  ...                  ...         ...   \n",
              "186952  286952  2023-03-31:03:02:26  2023-03-31:03:20:08  62146656.0   \n",
              "186953  286953  2023-03-31:03:06:26  2023-03-31:03:29:47  39587551.0   \n",
              "186954  286954  2023-03-31:03:07:41  2023-03-31:03:26:19  46553423.0   \n",
              "186955  286955  2023-03-31:04:23:22  2023-03-31:04:46:22  29927474.0   \n",
              "186956  286956  2023-03-31:04:32:03  2023-03-31:04:51:05  64268904.0   \n",
              "\n",
              "        PARTNER_P8N  BIRTH_DATE FIRST_NAME      LAST_NAME  \\\n",
              "0        65771788.0  1984-01-14    Melinda       Harfoush   \n",
              "1        25829667.0  1985-10-01     Vanesa         Whitty   \n",
              "2        63839036.0  1985-02-25    Kristen         Mclean   \n",
              "3        73277757.0  1987-03-27       Dang  Moerschfelder   \n",
              "4        72359770.0  1986-09-21    Jessica       Prockert   \n",
              "...             ...         ...        ...            ...   \n",
              "186952   55132261.0  1991-04-16       Lily           Ross   \n",
              "186953   78857785.0  1995-09-18      stacy         Hotsko   \n",
              "186954   68775805.0  1986-01-11     Ya Xin      chartrand   \n",
              "186955          NaN  1987-11-28   Julianna         chahal   \n",
              "186956   28350988.0  1992-10-02      Mazen         Warren   \n",
              "\n",
              "                              STREET_NAME MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "0                8191 Blankenship Gateway          COURTICE      L1E0J2   \n",
              "1            4163 Werner Meadow Suite 321            SURREY      V3W9W5   \n",
              "2                       849 Timothy Vista         VANCOUVER      V5Z1Y2   \n",
              "3                   8492 Odonnell Squares           MARKHAM      L3R8A5   \n",
              "4             625 Arthur Forest Suite 533          RICHMOND      V7A3Y7   \n",
              "...                                   ...               ...         ...   \n",
              "186952                648 Collins Streets            OLIVER      V0H1T3   \n",
              "186953                 9287 Matthew Field          MONTREAL      H1V1A6   \n",
              "186954  76834 Kathleen Extension Apt. 144           FARNHAM      J2N2N1   \n",
              "186955        135 Robinson Tunnel Apt. 92            QUEBEC      G2B2E4   \n",
              "186956        52 Martin Turnpike Apt. 780       SCARBOROUGH      M1J3P5   \n",
              "\n",
              "        PROVINCE__ID                           EMAIL  HOME_AREA_CODE  \\\n",
              "0                6.0    melinda_harfoush39@gmail.com           416.0   \n",
              "1               10.0           vanesaxwhitty@live.ca           604.0   \n",
              "2               10.0        kristenwmclean@gmail.com             NaN   \n",
              "3                6.0  dang.moerschfelder87@gmail.com           647.0   \n",
              "4               10.0   prockertjessica83@outlook.com           604.0   \n",
              "...              ...                             ...             ...   \n",
              "186952          10.0             lilytross@gmail.com           250.0   \n",
              "186953           5.0         stacyhotsko94@gmail.com           514.0   \n",
              "186954           5.0       yxchartrand86@outlook.com           514.0   \n",
              "186955           5.0      chahaljulianna49@gmail.com           418.0   \n",
              "186956           6.0        mazen_warren37@gmail.com           416.0   \n",
              "\n",
              "        PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "0          1735604.0                UE        800  \n",
              "1          5132538.0                UE       1500  \n",
              "2                NaN                UE       1500  \n",
              "3          2730444.0                 E        800  \n",
              "4          3201317.0                SE        800  \n",
              "...              ...               ...        ...  \n",
              "186952     5789435.0                SE          0  \n",
              "186953     7676972.0                UE          0  \n",
              "186954     4451410.0                 E          0  \n",
              "186955     8263504.0                SE          0  \n",
              "186956     2864275.0                UE          0  \n",
              "\n",
              "[165851 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3c8e194-d00a-4759-8740-1921bac3952d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100000</td>\n",
              "      <td>2023-01-01:00:31:44</td>\n",
              "      <td>2023-01-01:00:51:58</td>\n",
              "      <td>39916021.0</td>\n",
              "      <td>65771788.0</td>\n",
              "      <td>1984-01-14</td>\n",
              "      <td>Melinda</td>\n",
              "      <td>Harfoush</td>\n",
              "      <td>8191 Blankenship Gateway</td>\n",
              "      <td>COURTICE</td>\n",
              "      <td>L1E0J2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>melinda_harfoush39@gmail.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>1735604.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100001</td>\n",
              "      <td>2023-01-01:00:54:22</td>\n",
              "      <td>2023-01-01:01:19:03</td>\n",
              "      <td>28596991.0</td>\n",
              "      <td>25829667.0</td>\n",
              "      <td>1985-10-01</td>\n",
              "      <td>Vanesa</td>\n",
              "      <td>Whitty</td>\n",
              "      <td>4163 Werner Meadow Suite 321</td>\n",
              "      <td>SURREY</td>\n",
              "      <td>V3W9W5</td>\n",
              "      <td>10.0</td>\n",
              "      <td>vanesaxwhitty@live.ca</td>\n",
              "      <td>604.0</td>\n",
              "      <td>5132538.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>1500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100002</td>\n",
              "      <td>2023-01-01:01:13:03</td>\n",
              "      <td>2023-01-01:01:32:07</td>\n",
              "      <td>65751811.0</td>\n",
              "      <td>63839036.0</td>\n",
              "      <td>1985-02-25</td>\n",
              "      <td>Kristen</td>\n",
              "      <td>Mclean</td>\n",
              "      <td>849 Timothy Vista</td>\n",
              "      <td>VANCOUVER</td>\n",
              "      <td>V5Z1Y2</td>\n",
              "      <td>10.0</td>\n",
              "      <td>kristenwmclean@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>UE</td>\n",
              "      <td>1500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100003</td>\n",
              "      <td>2023-01-01:02:07:01</td>\n",
              "      <td>2023-01-01:02:24:04</td>\n",
              "      <td>43012353.0</td>\n",
              "      <td>73277757.0</td>\n",
              "      <td>1987-03-27</td>\n",
              "      <td>Dang</td>\n",
              "      <td>Moerschfelder</td>\n",
              "      <td>8492 Odonnell Squares</td>\n",
              "      <td>MARKHAM</td>\n",
              "      <td>L3R8A5</td>\n",
              "      <td>6.0</td>\n",
              "      <td>dang.moerschfelder87@gmail.com</td>\n",
              "      <td>647.0</td>\n",
              "      <td>2730444.0</td>\n",
              "      <td>E</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100004</td>\n",
              "      <td>2023-01-01:02:21:19</td>\n",
              "      <td>2023-01-01:02:42:20</td>\n",
              "      <td>34120896.0</td>\n",
              "      <td>72359770.0</td>\n",
              "      <td>1986-09-21</td>\n",
              "      <td>Jessica</td>\n",
              "      <td>Prockert</td>\n",
              "      <td>625 Arthur Forest Suite 533</td>\n",
              "      <td>RICHMOND</td>\n",
              "      <td>V7A3Y7</td>\n",
              "      <td>10.0</td>\n",
              "      <td>prockertjessica83@outlook.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>3201317.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186952</th>\n",
              "      <td>286952</td>\n",
              "      <td>2023-03-31:03:02:26</td>\n",
              "      <td>2023-03-31:03:20:08</td>\n",
              "      <td>62146656.0</td>\n",
              "      <td>55132261.0</td>\n",
              "      <td>1991-04-16</td>\n",
              "      <td>Lily</td>\n",
              "      <td>Ross</td>\n",
              "      <td>648 Collins Streets</td>\n",
              "      <td>OLIVER</td>\n",
              "      <td>V0H1T3</td>\n",
              "      <td>10.0</td>\n",
              "      <td>lilytross@gmail.com</td>\n",
              "      <td>250.0</td>\n",
              "      <td>5789435.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186953</th>\n",
              "      <td>286953</td>\n",
              "      <td>2023-03-31:03:06:26</td>\n",
              "      <td>2023-03-31:03:29:47</td>\n",
              "      <td>39587551.0</td>\n",
              "      <td>78857785.0</td>\n",
              "      <td>1995-09-18</td>\n",
              "      <td>stacy</td>\n",
              "      <td>Hotsko</td>\n",
              "      <td>9287 Matthew Field</td>\n",
              "      <td>MONTREAL</td>\n",
              "      <td>H1V1A6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>stacyhotsko94@gmail.com</td>\n",
              "      <td>514.0</td>\n",
              "      <td>7676972.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186954</th>\n",
              "      <td>286954</td>\n",
              "      <td>2023-03-31:03:07:41</td>\n",
              "      <td>2023-03-31:03:26:19</td>\n",
              "      <td>46553423.0</td>\n",
              "      <td>68775805.0</td>\n",
              "      <td>1986-01-11</td>\n",
              "      <td>Ya Xin</td>\n",
              "      <td>chartrand</td>\n",
              "      <td>76834 Kathleen Extension Apt. 144</td>\n",
              "      <td>FARNHAM</td>\n",
              "      <td>J2N2N1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>yxchartrand86@outlook.com</td>\n",
              "      <td>514.0</td>\n",
              "      <td>4451410.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186955</th>\n",
              "      <td>286955</td>\n",
              "      <td>2023-03-31:04:23:22</td>\n",
              "      <td>2023-03-31:04:46:22</td>\n",
              "      <td>29927474.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1987-11-28</td>\n",
              "      <td>Julianna</td>\n",
              "      <td>chahal</td>\n",
              "      <td>135 Robinson Tunnel Apt. 92</td>\n",
              "      <td>QUEBEC</td>\n",
              "      <td>G2B2E4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>chahaljulianna49@gmail.com</td>\n",
              "      <td>418.0</td>\n",
              "      <td>8263504.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186956</th>\n",
              "      <td>286956</td>\n",
              "      <td>2023-03-31:04:32:03</td>\n",
              "      <td>2023-03-31:04:51:05</td>\n",
              "      <td>64268904.0</td>\n",
              "      <td>28350988.0</td>\n",
              "      <td>1992-10-02</td>\n",
              "      <td>Mazen</td>\n",
              "      <td>Warren</td>\n",
              "      <td>52 Martin Turnpike Apt. 780</td>\n",
              "      <td>SCARBOROUGH</td>\n",
              "      <td>M1J3P5</td>\n",
              "      <td>6.0</td>\n",
              "      <td>mazen_warren37@gmail.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>2864275.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>165851 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3c8e194-d00a-4759-8740-1921bac3952d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c3c8e194-d00a-4759-8740-1921bac3952d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c3c8e194-d00a-4759-8740-1921bac3952d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 265
        }
      ],
      "source": [
        "valid_"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Investigation on Invalid Paid"
      ],
      "metadata": {
        "id": "Gqrl9kjzYDlA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "invalid_paid = invalid_[invalid_['CUMUL_PAY'] > 0]\n",
        "invalid_paid"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 730
        },
        "id": "GwAjL_KVYJrY",
        "outputId": "151472fd-7293-4380-e512-fcd234894f14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "5       100005  2023-01-01:03:09:47  2023-01-01:03:29:12  33408533.0   \n",
              "14      100014  2023-01-01:05:57:05  2023-01-01:06:12:17  50780523.0   \n",
              "16      100016  2023-01-01:06:05:46  2023-01-01:06:24:13  44826013.0   \n",
              "19      100019  2023-01-01:06:34:43  2023-01-01:06:52:42  74109384.0   \n",
              "30      100030  2023-01-01:07:32:32  2023-01-01:07:54:33  44062077.0   \n",
              "...        ...                  ...                  ...         ...   \n",
              "124138  224138  2023-03-01:17:57:54  2023-03-01:18:14:48  87573442.0   \n",
              "124148  224148  2023-03-01:18:00:51  2023-03-01:18:23:47  17040490.0   \n",
              "124149  224149  2023-03-01:18:00:56  2023-03-01:18:19:04  79405099.0   \n",
              "124150  224150  2023-03-01:18:01:04  2023-03-01:18:21:25  14314369.0   \n",
              "124155  224155  2023-03-01:18:01:56  2023-03-01:18:19:31  61788128.0   \n",
              "\n",
              "        PARTNER_P8N  BIRTH_DATE  FIRST_NAME         LAST_NAME  \\\n",
              "5        31288799.0  1991-09-23     Patrick             Blair   \n",
              "14       20639236.0  1990-07-14      Lauren             Smith   \n",
              "16       26356999.0         NaN         NaN               NaN   \n",
              "19       80938566.0  1994-03-28        Koby              Kaur   \n",
              "30       19093166.0  1990-10-27  Kelly Jane             hough   \n",
              "...             ...         ...         ...               ...   \n",
              "124138   85912554.0  1992-10-20        Hibo  Trudeau-Zacharie   \n",
              "124148   25402899.0  1983-05-05      angela          Popovich   \n",
              "124149          NaN  1994-08-12      Sophia              Mohr   \n",
              "124150   16297051.0  1984-01-30     Camille             Grant   \n",
              "124155   16296910.0  1994-07-16     Jessica        Zare Farid   \n",
              "\n",
              "                           STREET_NAME         MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "5                  4644 Andrew Islands                  RICHMOND      V6X1A8   \n",
              "14                  88 Henderson Ville                    LONDON      N6C4P3   \n",
              "16          6970 Hicks Radial Apt. 543                  MONTREAL      H3N2V8   \n",
              "19                 3327 Gilmore Shores                NORTH YORK      M2J2X9   \n",
              "30                 62656 Chandler Oval              SAINT-HUBERT      J3Y5N1   \n",
              "...                                ...                       ...         ...   \n",
              "124138       956 Johnson Rest Apt. 195               YELLOWKNIFE      X1A2C4   \n",
              "124148  44236 Miller Springs Suite 279                     MINTO      E4B3L7   \n",
              "124149                 6495 Megan Ways                LA MALBAIE      G5A1P9   \n",
              "124150                 376 Kelly Ridge  SAINT-JEAN-SUR-RICHELIEU      J3B4H6   \n",
              "124155                19 Tasha Circles                    DIEPPE      E1A9H7   \n",
              "\n",
              "        PROVINCE__ID                            EMAIL  HOME_AREA_CODE  \\\n",
              "5               10.0              p.blair61@gmail.com           604.0   \n",
              "14               6.0        smithlauren92@outlook.com           519.0   \n",
              "16               5.0                              NaN           438.0   \n",
              "19               6.0             kaur44koby@gmail.com           416.0   \n",
              "30               5.0             kj.hough90@gmail.com             NaN   \n",
              "...              ...                              ...             ...   \n",
              "124138          11.0  trudeauzacharie16hibo@gmail.com           867.0   \n",
              "124148           3.0           a_popovich84@gmail.com           506.0   \n",
              "124149           5.0            sophiawmohr@gmail.com           418.0   \n",
              "124150           5.0              c.grant83@gmail.com           514.0   \n",
              "124155           3.0           jzarefarid19@gmail.com           506.0   \n",
              "\n",
              "        PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "5          2708470.0                 E        250  \n",
              "14         2080528.0                SE        250  \n",
              "16         7604893.0                UE        800  \n",
              "19         2201087.0                UE        800  \n",
              "30               NaN                 E        250  \n",
              "...              ...               ...        ...  \n",
              "124138     7440377.0                UE        400  \n",
              "124148     3020499.0               ESE        400  \n",
              "124149     1092909.0                SE        125  \n",
              "124150     8278396.0                 E        400  \n",
              "124155     1725838.0                UE        400  \n",
              "\n",
              "[13612 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b8bf43c-7d5c-467d-ba34-ffba3d24b327\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>100005</td>\n",
              "      <td>2023-01-01:03:09:47</td>\n",
              "      <td>2023-01-01:03:29:12</td>\n",
              "      <td>33408533.0</td>\n",
              "      <td>31288799.0</td>\n",
              "      <td>1991-09-23</td>\n",
              "      <td>Patrick</td>\n",
              "      <td>Blair</td>\n",
              "      <td>4644 Andrew Islands</td>\n",
              "      <td>RICHMOND</td>\n",
              "      <td>V6X1A8</td>\n",
              "      <td>10.0</td>\n",
              "      <td>p.blair61@gmail.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>2708470.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>100014</td>\n",
              "      <td>2023-01-01:05:57:05</td>\n",
              "      <td>2023-01-01:06:12:17</td>\n",
              "      <td>50780523.0</td>\n",
              "      <td>20639236.0</td>\n",
              "      <td>1990-07-14</td>\n",
              "      <td>Lauren</td>\n",
              "      <td>Smith</td>\n",
              "      <td>88 Henderson Ville</td>\n",
              "      <td>LONDON</td>\n",
              "      <td>N6C4P3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>smithlauren92@outlook.com</td>\n",
              "      <td>519.0</td>\n",
              "      <td>2080528.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>100016</td>\n",
              "      <td>2023-01-01:06:05:46</td>\n",
              "      <td>2023-01-01:06:24:13</td>\n",
              "      <td>44826013.0</td>\n",
              "      <td>26356999.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6970 Hicks Radial Apt. 543</td>\n",
              "      <td>MONTREAL</td>\n",
              "      <td>H3N2V8</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>438.0</td>\n",
              "      <td>7604893.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>100019</td>\n",
              "      <td>2023-01-01:06:34:43</td>\n",
              "      <td>2023-01-01:06:52:42</td>\n",
              "      <td>74109384.0</td>\n",
              "      <td>80938566.0</td>\n",
              "      <td>1994-03-28</td>\n",
              "      <td>Koby</td>\n",
              "      <td>Kaur</td>\n",
              "      <td>3327 Gilmore Shores</td>\n",
              "      <td>NORTH YORK</td>\n",
              "      <td>M2J2X9</td>\n",
              "      <td>6.0</td>\n",
              "      <td>kaur44koby@gmail.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>2201087.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>100030</td>\n",
              "      <td>2023-01-01:07:32:32</td>\n",
              "      <td>2023-01-01:07:54:33</td>\n",
              "      <td>44062077.0</td>\n",
              "      <td>19093166.0</td>\n",
              "      <td>1990-10-27</td>\n",
              "      <td>Kelly Jane</td>\n",
              "      <td>hough</td>\n",
              "      <td>62656 Chandler Oval</td>\n",
              "      <td>SAINT-HUBERT</td>\n",
              "      <td>J3Y5N1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>kj.hough90@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124138</th>\n",
              "      <td>224138</td>\n",
              "      <td>2023-03-01:17:57:54</td>\n",
              "      <td>2023-03-01:18:14:48</td>\n",
              "      <td>87573442.0</td>\n",
              "      <td>85912554.0</td>\n",
              "      <td>1992-10-20</td>\n",
              "      <td>Hibo</td>\n",
              "      <td>Trudeau-Zacharie</td>\n",
              "      <td>956 Johnson Rest Apt. 195</td>\n",
              "      <td>YELLOWKNIFE</td>\n",
              "      <td>X1A2C4</td>\n",
              "      <td>11.0</td>\n",
              "      <td>trudeauzacharie16hibo@gmail.com</td>\n",
              "      <td>867.0</td>\n",
              "      <td>7440377.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124148</th>\n",
              "      <td>224148</td>\n",
              "      <td>2023-03-01:18:00:51</td>\n",
              "      <td>2023-03-01:18:23:47</td>\n",
              "      <td>17040490.0</td>\n",
              "      <td>25402899.0</td>\n",
              "      <td>1983-05-05</td>\n",
              "      <td>angela</td>\n",
              "      <td>Popovich</td>\n",
              "      <td>44236 Miller Springs Suite 279</td>\n",
              "      <td>MINTO</td>\n",
              "      <td>E4B3L7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>a_popovich84@gmail.com</td>\n",
              "      <td>506.0</td>\n",
              "      <td>3020499.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124149</th>\n",
              "      <td>224149</td>\n",
              "      <td>2023-03-01:18:00:56</td>\n",
              "      <td>2023-03-01:18:19:04</td>\n",
              "      <td>79405099.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1994-08-12</td>\n",
              "      <td>Sophia</td>\n",
              "      <td>Mohr</td>\n",
              "      <td>6495 Megan Ways</td>\n",
              "      <td>LA MALBAIE</td>\n",
              "      <td>G5A1P9</td>\n",
              "      <td>5.0</td>\n",
              "      <td>sophiawmohr@gmail.com</td>\n",
              "      <td>418.0</td>\n",
              "      <td>1092909.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124150</th>\n",
              "      <td>224150</td>\n",
              "      <td>2023-03-01:18:01:04</td>\n",
              "      <td>2023-03-01:18:21:25</td>\n",
              "      <td>14314369.0</td>\n",
              "      <td>16297051.0</td>\n",
              "      <td>1984-01-30</td>\n",
              "      <td>Camille</td>\n",
              "      <td>Grant</td>\n",
              "      <td>376 Kelly Ridge</td>\n",
              "      <td>SAINT-JEAN-SUR-RICHELIEU</td>\n",
              "      <td>J3B4H6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>c.grant83@gmail.com</td>\n",
              "      <td>514.0</td>\n",
              "      <td>8278396.0</td>\n",
              "      <td>E</td>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124155</th>\n",
              "      <td>224155</td>\n",
              "      <td>2023-03-01:18:01:56</td>\n",
              "      <td>2023-03-01:18:19:31</td>\n",
              "      <td>61788128.0</td>\n",
              "      <td>16296910.0</td>\n",
              "      <td>1994-07-16</td>\n",
              "      <td>Jessica</td>\n",
              "      <td>Zare Farid</td>\n",
              "      <td>19 Tasha Circles</td>\n",
              "      <td>DIEPPE</td>\n",
              "      <td>E1A9H7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>jzarefarid19@gmail.com</td>\n",
              "      <td>506.0</td>\n",
              "      <td>1725838.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13612 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b8bf43c-7d5c-467d-ba34-ffba3d24b327')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8b8bf43c-7d5c-467d-ba34-ffba3d24b327 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8b8bf43c-7d5c-467d-ba34-ffba3d24b327');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 266
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Investigation on Valid Fraud\n"
      ],
      "metadata": {
        "id": "NcuAMmh4XyBT"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_OHZLmged4g4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "50c43536-f637-4529-a383-e1ebb64c8c06"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   APP_ID       P8N_x           START_TIME             END_TIME  CUMUL_PAY  \\\n",
              "0  100000  39916021.0  2023-01-01:00:31:44  2023-01-01:00:51:58        800   \n",
              "1  100001  28596991.0  2023-01-01:00:54:22  2023-01-01:01:19:03       1500   \n",
              "2  100002  65751811.0  2023-01-01:01:13:03  2023-01-01:01:32:07       1500   \n",
              "3  100003  43012353.0  2023-01-01:02:07:01  2023-01-01:02:24:04        800   \n",
              "4  100004  34120896.0  2023-01-01:02:21:19  2023-01-01:02:42:20        800   \n",
              "\n",
              "            Net     P8N_y  PARTNER_P8N DATE_BIRTH_1 DATE_BIRTH_2 DATE_BIRTH_3  \\\n",
              "0   1592.294383  39916021   65771788.0   2016-12-06          NaN          NaN   \n",
              "1  34349.000000  28596991   25829667.0   2019-10-17   2022-06-10          NaN   \n",
              "2   8410.699316  65751811   63839036.0   2019-08-05   2013-06-19          NaN   \n",
              "3  31129.608140  43012353   73277757.0   2013-11-29          NaN          NaN   \n",
              "4  13545.683695  34120896   72359770.0   2021-05-11          NaN          NaN   \n",
              "\n",
              "  DATE_BIRTH_4 DATE_BIRTH_5 DATE_BIRTH_6  DATE_BIRTH_7  DATE_BIRTH_8  \\\n",
              "0          NaN          NaN          NaN           NaN           NaN   \n",
              "1          NaN          NaN          NaN           NaN           NaN   \n",
              "2          NaN          NaN          NaN           NaN           NaN   \n",
              "3          NaN          NaN          NaN           NaN           NaN   \n",
              "4          NaN          NaN          NaN           NaN           NaN   \n",
              "\n",
              "   DATE_BIRTH_9  \n",
              "0           NaN  \n",
              "1           NaN  \n",
              "2           NaN  \n",
              "3           NaN  \n",
              "4           NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-11b36337-e2f0-42a8-8767-058fb5131f8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>P8N_x</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "      <th>Net</th>\n",
              "      <th>P8N_y</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>DATE_BIRTH_1</th>\n",
              "      <th>DATE_BIRTH_2</th>\n",
              "      <th>DATE_BIRTH_3</th>\n",
              "      <th>DATE_BIRTH_4</th>\n",
              "      <th>DATE_BIRTH_5</th>\n",
              "      <th>DATE_BIRTH_6</th>\n",
              "      <th>DATE_BIRTH_7</th>\n",
              "      <th>DATE_BIRTH_8</th>\n",
              "      <th>DATE_BIRTH_9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100000</td>\n",
              "      <td>39916021.0</td>\n",
              "      <td>2023-01-01:00:31:44</td>\n",
              "      <td>2023-01-01:00:51:58</td>\n",
              "      <td>800</td>\n",
              "      <td>1592.294383</td>\n",
              "      <td>39916021</td>\n",
              "      <td>65771788.0</td>\n",
              "      <td>2016-12-06</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100001</td>\n",
              "      <td>28596991.0</td>\n",
              "      <td>2023-01-01:00:54:22</td>\n",
              "      <td>2023-01-01:01:19:03</td>\n",
              "      <td>1500</td>\n",
              "      <td>34349.000000</td>\n",
              "      <td>28596991</td>\n",
              "      <td>25829667.0</td>\n",
              "      <td>2019-10-17</td>\n",
              "      <td>2022-06-10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100002</td>\n",
              "      <td>65751811.0</td>\n",
              "      <td>2023-01-01:01:13:03</td>\n",
              "      <td>2023-01-01:01:32:07</td>\n",
              "      <td>1500</td>\n",
              "      <td>8410.699316</td>\n",
              "      <td>65751811</td>\n",
              "      <td>63839036.0</td>\n",
              "      <td>2019-08-05</td>\n",
              "      <td>2013-06-19</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100003</td>\n",
              "      <td>43012353.0</td>\n",
              "      <td>2023-01-01:02:07:01</td>\n",
              "      <td>2023-01-01:02:24:04</td>\n",
              "      <td>800</td>\n",
              "      <td>31129.608140</td>\n",
              "      <td>43012353</td>\n",
              "      <td>73277757.0</td>\n",
              "      <td>2013-11-29</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100004</td>\n",
              "      <td>34120896.0</td>\n",
              "      <td>2023-01-01:02:21:19</td>\n",
              "      <td>2023-01-01:02:42:20</td>\n",
              "      <td>800</td>\n",
              "      <td>13545.683695</td>\n",
              "      <td>34120896</td>\n",
              "      <td>72359770.0</td>\n",
              "      <td>2021-05-11</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11b36337-e2f0-42a8-8767-058fb5131f8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-11b36337-e2f0-42a8-8767-058fb5131f8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-11b36337-e2f0-42a8-8767-058fb5131f8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 267
        }
      ],
      "source": [
        "net_income['Net'] = net_income['employment_income_1'] + net_income['employment_income_2']\n",
        "pay_merged = pd.merge(pd.merge(applicant[['APP_ID','P8N','START_TIME','END_TIME','CUMUL_PAY']],\n",
        "                      net_income[['APP_ID','Net']],\n",
        "                      on='APP_ID'),\n",
        "             dependent\n",
        "            ,on='APP_ID')\n",
        "pay_merged.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0S_ih9nOkOWH"
      },
      "outputs": [],
      "source": [
        "# function check numebr of payment made to the applicant\n",
        "def check_mon(dl,slic,time):\n",
        "    comparison_date = datetime.strptime(time, '%Y-%m-%d:%H:%M:%S')\n",
        "    slic_date = datetime.strptime(slic, '%Y-%m-%d:%H:%M:%S')\n",
        "    dl_date = datetime.strptime(dl, '%Y-%m-%d:%H:%M:%S')\n",
        "    if comparison_date > dl_date:\n",
        "        return 0\n",
        "    elif comparison_date > slic_date: \n",
        "        return 1\n",
        "    else: return 2\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pD9V5SR_k1R9"
      },
      "outputs": [],
      "source": [
        "# function check if the target is single by checking partner P8N\n",
        "def check_single (row):    \n",
        "    if pd.isnull(row['PARTNER_P8N']):\n",
        "        return True\n",
        "    else: return False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Or9YB4q0k3xs"
      },
      "outputs": [],
      "source": [
        "# funciton counts the numebr of dependent for given applicant\n",
        "def count_child (row):\n",
        "    count = 0\n",
        "    for num in range(9):\n",
        "        child = row['DATE_BIRTH_{}'.format(num+1)]\n",
        "        if type(child) == float:\n",
        "            break\n",
        "        else:  \n",
        "            count += 1\n",
        "    return count"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-IvfQ3gIk5dy"
      },
      "outputs": [],
      "source": [
        "# function return the theortical payment amount according to applicant's status\n",
        "def pay_cate(row):\n",
        "    dl = '2023-03-01:18:23:44'\n",
        "    slic = '2023-02-01:17:14:51'\n",
        "    mons = check_mon(dl,slic, row['END_TIME']) # checking number of paying terms\n",
        "    #print(mons)\n",
        "    child_num = count_child (row)\n",
        "    if mons == 0:\n",
        "        return 0\n",
        "    elif row['Net'] <= 35000: # if the applicant is single\n",
        "        if check_single(row):\n",
        "            \n",
        "            if child_num == 0:\n",
        "                return 0\n",
        "            elif child_num == 1:\n",
        "                return 250*mons\n",
        "            elif child_num == 2:\n",
        "                return 400*mons\n",
        "            else: return (400 + 100)*mons\n",
        "        else: # if the applicant is not single \n",
        "            if child_num == 0:\n",
        "                return 0\n",
        "            elif child_num == 1:\n",
        "                return 400*mons\n",
        "            elif child_num == 2:\n",
        "                return 750*mons\n",
        "            else: return (750 + 200)*mons\n",
        "    else:      \n",
        "        if child_num == 0:\n",
        "                return 0\n",
        "        elif child_num == 1:\n",
        "            return 125*mons\n",
        "        elif child_num == 2:\n",
        "            return 200*mons\n",
        "        else: return (200 + 50)*mons"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Jcwdil5k7U_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d24d7ea-18fb-412b-9837-df0dcb693365"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2565\n"
          ]
        }
      ],
      "source": [
        "# counting number of ineligble from payment standard\n",
        "count_pay = 0\n",
        "for index, row in pay_merged.iterrows():\n",
        "    if not re.match(r'^\\d{4}-\\d{2}-\\d{2}:\\d{2}:\\d{2}:\\d{2}$', row['END_TIME']):\n",
        "        continue      \n",
        "    elif (pay_cate(row) != row['CUMUL_PAY'] and row['APP_ID'] not in ineligi):\n",
        "        ineligi.append(row['APP_ID'])\n",
        "        count_pay += 1\n",
        "\n",
        "print(count_pay)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mMX8Lmoy6GDV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1cf05c5b-dc0e-4bbb-eeeb-83616c15689b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aaron.Tony.Clayton.Quarmarius     90\n",
            "Mingyue.Dillon.Angelica.Miguel    78\n",
            "Sarah.Kaylie.Hoang.Lindsey        76\n",
            "Jacob.Ilyaas.Aura.Stevyrae        59\n",
            "Kyle.Irvin.Amniyya.Torina         53\n",
            "                                  ..\n",
            "Bakar.Brandi.Farhat.Erik           2\n",
            "Kristen.April.Suhaad.Ernesto       2\n",
            "Cristian.Angel.Huda.Shamari        2\n",
            "Christian.Ebony.Gianna.Naaila      2\n",
            "Simone.Jack.Miqdaam.Najlaa         2\n",
            "Name: uip_address, Length: 176, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "valid_server = server[~server['APP_ID'].isin(ineligi)]\n",
        "valid_server['bot_score'].value_counts()\n",
        "ip_count = valid_server['uip_address'].value_counts()\n",
        "filtered_counts = ip_count[ip_count != 1]\n",
        "print(filtered_counts)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6kiM3slQ6hWB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3382f32f-fa51-4fa6-ccdf-b775fd59dcdd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   APP_ID           START_TIME             END_TIME         P8N  PARTNER_P8N  \\\n",
            "0  100000  2023-01-01 00:31:44  2023-01-01 00:51:58  39916021.0   65771788.0   \n",
            "1  100001  2023-01-01 00:54:22  2023-01-01 01:19:03  28596991.0   25829667.0   \n",
            "2  100002  2023-01-01 01:13:03  2023-01-01 01:32:07  65751811.0   63839036.0   \n",
            "3  100003  2023-01-01 02:07:01  2023-01-01 02:24:04  43012353.0   73277757.0   \n",
            "4  100004  2023-01-01 02:21:19  2023-01-01 02:42:20  34120896.0   72359770.0   \n",
            "\n",
            "   BIRTH_DATE FIRST_NAME      LAST_NAME                   STREET_NAME  \\\n",
            "0  1984-01-14    Melinda       Harfoush      8191 Blankenship Gateway   \n",
            "1  1985-10-01     Vanesa         Whitty  4163 Werner Meadow Suite 321   \n",
            "2  1985-02-25    Kristen         Mclean             849 Timothy Vista   \n",
            "3  1987-03-27       Dang  Moerschfelder         8492 Odonnell Squares   \n",
            "4  1986-09-21    Jessica       Prockert   625 Arthur Forest Suite 533   \n",
            "\n",
            "  MUNICIPALITY_NAME POSTAL_CODE  PROVINCE__ID                           EMAIL  \\\n",
            "0          COURTICE      L1E0J2           6.0    melinda_harfoush39@gmail.com   \n",
            "1            SURREY      V3W9W5          10.0           vanesaxwhitty@live.ca   \n",
            "2         VANCOUVER      V5Z1Y2          10.0        kristenwmclean@gmail.com   \n",
            "3           MARKHAM      L3R8A5           6.0  dang.moerschfelder87@gmail.com   \n",
            "4          RICHMOND      V7A3Y7          10.0   prockertjessica83@outlook.com   \n",
            "\n",
            "   HOME_AREA_CODE  PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
            "0           416.0     1735604.0                UE        800  \n",
            "1           604.0     5132538.0                UE       1500  \n",
            "2             NaN           NaN                UE       1500  \n",
            "3           647.0     2730444.0                 E        800  \n",
            "4           604.0     3201317.0                SE        800  \n",
            "762\n",
            "786\n",
            "[105923, 105929, 106317, 106365, 106641, 106692, 106777, 106835, 106859, 106920, 107100, 107130, 107203, 107222, 107559, 107573, 107629, 107672, 107772, 107901, 108386, 108401, 108642, 109171, 109250, 109618, 109807, 109831, 109878, 109981, 110021, 110238, 110393, 110894, 111112, 111222, 111261, 111310, 111739, 111754, 111862, 112081, 112688, 112772, 112776, 112782, 112815, 112856, 113103, 113104, 113377, 113460, 113485, 113526, 113554, 113977, 114261, 114329, 114497, 120474, 120693, 120720, 120867, 120889, 121027, 121062, 121141, 121233, 121275, 121513, 121534, 121682, 121709, 121725, 121729, 122068, 122505, 122645, 122665, 122674, 122732, 122771, 122890, 122980, 123056, 123288, 123777, 123779, 123796, 123821, 123968, 124132, 124223, 124232, 124256, 124339, 124405, 124459, 124522, 124612, 124644, 124684, 124733, 124915, 124941, 125073, 125089, 125195, 125355, 125537, 125560, 125601, 125671, 126027, 126086, 126193, 126438, 126703, 126706, 126740, 126784, 126861, 127025, 127108, 127264, 127490, 127500, 127624, 127677, 127732, 127853, 127878, 127879, 128360, 128455, 128473, 128578, 128690, 128700, 128873, 128875, 134900, 135043, 135091, 135194, 135328, 135347, 135399, 135439, 135582, 135708, 135963, 135973, 136033, 136114, 136275, 136354, 136509, 136517, 136563, 136750, 137026, 137398, 137479, 137605, 137638, 137742, 137772, 138047, 138357, 138374, 138418, 138472, 138488, 138940, 138941, 139017, 139278, 139299, 139395, 139541, 139636, 140023, 140183, 140193, 140364, 140543, 140627, 140896, 140992, 141317, 141616, 141720, 141780, 141868, 141976, 141981, 142183, 142298, 142409, 142598, 142638, 143055, 143084, 143112, 143130, 143189, 143313, 143398, 146831, 147191, 147487, 147844, 147859, 149277, 149710, 150435, 150797, 151495, 152433, 153009, 153763, 154549, 154595, 154607, 156885, 157345, 157909, 157983, 158557, 158857, 159243, 159505, 159640, 159761, 161793, 161806, 162547, 162602, 162769, 162800, 162846, 162864, 162958, 162977, 163002, 163167, 163189, 163198, 163226, 163602, 163642, 163669, 163958, 164077, 164175, 164198, 164336, 164348, 164460, 164467, 164479, 164671, 164688, 164856, 164878, 164892, 165024, 165079, 165190, 165197, 165203, 165270, 165272, 165415, 165565, 165614, 165949, 166040, 166295, 168322, 168336, 169836, 170232, 170422, 170660, 172604, 173895, 174083, 174346, 174532, 174685, 174771, 174775, 175106, 175395, 176148, 177702, 178011, 178023, 178810, 178850, 179093, 180145, 180723, 181365, 181410, 181428, 181763, 182251, 183908, 183916, 183983, 184254, 184587, 184749, 185460, 185725, 186373, 186613, 186722, 187177, 187320, 187551, 187656, 187799, 187816, 187992, 188002, 188058, 188092, 188208, 188419, 188448, 188518, 188539, 188620, 188657, 188660, 188662, 188680, 188736, 188787, 188991, 189058, 189074, 189102, 189140, 189390, 191462, 191661, 191830, 193430, 193615, 193864, 194391, 194751, 194880, 195611, 195702, 196576, 196614, 196720, 197195, 197330, 197672, 197807, 197819, 198067, 198162, 199185, 199634, 199880, 201264, 201305, 201488, 201575, 202214, 202226, 202308, 202757, 202936, 202979, 203144, 203352, 203500, 203897, 204053, 204225, 204485, 204994, 205261, 205388, 205585, 205888, 205910, 206759, 206926, 206935, 207111, 207119, 207225, 207625, 207846, 207919, 208603, 209190, 209310, 209342, 210097, 210368, 210410, 210554, 210612, 211057, 211255, 211286, 211503, 211515, 211850, 211910, 211986, 212056, 212077, 212098, 212133, 212256, 212268, 212441, 212471, 212594, 212637, 212746, 213056, 213171, 213267, 213359, 213432, 213439, 213460, 213483, 213818, 213922, 214069, 214322, 214745, 214887, 214899, 215186, 215214, 215436, 215551, 215634, 215691, 215823, 215921, 216051, 216781, 217035, 217097, 217170, 217691, 217717, 217772, 217900, 218053, 218406, 218540, 218635, 218709, 218766, 218903, 218981, 219072, 219085, 219130, 219463, 219574, 219593, 219833, 219929, 219981, 220079, 220216, 220227, 220280, 220297, 220433, 220558, 220721, 221045, 221137, 221220, 221535, 222191, 222232, 222309, 222507, 222890, 223199, 223246, 223307, 223627, 223636, 223702, 223726, 223795, 223927, 224141, 224243, 224252, 224419, 224527, 225302, 225581, 225674, 225805, 225816, 225940, 226534, 226801, 227513, 227572, 227609, 227614, 227645, 227836, 227998, 228071, 228082, 228519, 228641, 228774, 228839, 229129, 229760, 230087, 231490, 231496, 231971, 232169, 232188, 232279, 232322, 232587, 232716, 232786, 233665, 233846, 234645, 235001, 235006, 235490, 235553, 235607, 235965, 236085, 236240, 236452, 236705, 236971, 237310, 237556, 238291, 238303, 238314, 238626, 238658, 239322, 239408, 239594, 240078, 240372, 240451, 241319, 241343, 241570, 241593, 242201, 242212, 242475, 243106, 243227, 243389, 243810, 243983, 244002, 244071, 244466, 244526, 244630, 244801, 244820, 244914, 245046, 245427, 246432, 246434, 246443, 246498, 246598, 246608, 246618, 246628, 246639, 246651, 246707, 246716, 246726, 246780, 246800, 246821, 246835, 246883, 246898, 246916, 246942, 246985, 246986, 247034, 247050, 247102, 247169, 247240, 247242, 247249, 247295, 247312, 247361, 247491, 247542, 247554, 247591, 247645, 247651, 247712, 247742, 248301, 248753, 248989, 250523, 250615, 251169, 251357, 251363, 251817, 251911, 252121, 252405, 252494, 253010, 253020, 253377, 253391, 253423, 256142, 256168, 256989, 257529, 257543, 257566, 258090, 259431, 260132, 260352, 260940, 261072, 261398, 261545, 261818, 263100, 263457, 264350, 264823, 264951, 265759, 265779, 266309, 266753, 267447, 267845, 268051, 268509, 268555, 268726, 268765, 268870, 269016, 269023, 269349, 269687, 269754, 269794, 270548, 270635, 270940, 271095, 271161, 271207, 271511, 271532, 271672, 271872, 271930, 271958, 272274, 272655, 272845, 273592, 274053, 274211, 274899, 275071, 275128, 275357, 275395, 275418, 275467, 275496, 275500, 275502, 275541, 275616, 275623, 275682, 275694, 275732, 275745, 275779, 275780, 275834, 275855, 275867, 275872, 275884, 275902, 275905, 275931, 275974, 276027, 276057, 276072, 276126, 276172, 276175, 276203, 276208, 276261, 276289, 276309, 276340, 276344, 276378, 276403, 276434, 276489, 276499, 276501, 276509, 276511, 276575, 276591, 276666, 276687, 276754, 277080, 277993, 278607, 278777, 280173, 280331, 280342, 281320, 281621, 281910, 282393, 283248, 283632, 283725, 283947, 284003, 284127, 284558, 284971, 285134, 286013]\n"
          ]
        }
      ],
      "source": [
        "valid_1=valid_.copy()\n",
        "valid_1.head()\n",
        "\n",
        "valid_1['START_TIME'] = valid_1['START_TIME'].apply(lambda x: x if x[10] == ' ' else x[:10] + x[10:].replace(':', ' ', 1))\n",
        "valid_1['END_TIME'] = valid_1['END_TIME'].apply(lambda x: x if x[10] == ' ' else x[:10] + x[10:].replace(':', ' ', 1))\n",
        "print(valid_1.head())\n",
        "\n",
        "valid_1['START_TIME'] = valid_1['START_TIME'].str.replace('-', '/')\n",
        "valid_1['END_TIME'] = valid_1['END_TIME'].str.replace('-', '/')\n",
        "\n",
        "valid_1['START_TIME'] = pd.to_datetime(valid_1['START_TIME'])\n",
        "valid_1['END_TIME'] = pd.to_datetime(valid_1['END_TIME'])\n",
        "\n",
        "valid_1['DURATION'] = valid_1['END_TIME'] - valid_1['START_TIME']\n",
        "valid_1['minutes'] = valid_1['DURATION'].apply(lambda x: x.total_seconds() / 60.0)\n",
        "\n",
        "count = 0\n",
        "for i in valid_1['minutes']:\n",
        "    if i<1:\n",
        "        count += 1\n",
        "print(count)\n",
        "\n",
        "wrong_duration = []\n",
        "\n",
        "count = 0\n",
        "for index, row in valid_1.iterrows():\n",
        "    min = row['minutes']\n",
        "    if min <= 1:\n",
        "        count += 1\n",
        "        wrong_duration.append(row['APP_ID'])\n",
        "    else: \n",
        "        continue\n",
        "print(count) \n",
        "print(wrong_duration)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SaIMWVcm71uO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 975
        },
        "outputId": "58ed536e-b0ce-465e-9bad-f6bdc462108f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 842.4x595.44 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 842.4x595.44 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsoAAAHfCAYAAABJZf71AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAAsTAAALEwEAmpwYAAAqH0lEQVR4nO3de3TU9Z34/xckXCz8uEWh8bq6e8T0ggYCiIAg2KIUpQu1sIiX2lo5xa1t1Urbb0XBdpdtq1a3C20VelhrraKCgK3usWpdtRa8tkq1oChCDHKTi0BC8vn94WGWmHcgCGQCeTzO6WlmJvOZ18xk8Jl3PvOZFlmWZQEAANTSMt8DAABAUySUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIcwiZNmhQ33XRTXm47y7L4zne+E717944vfOEL+7y9a6+9Nn72s5/th8loqi644IK45557IiLigQceiEsuuWS/38bixYtj2LBh+327++v233777ejevXvs2LGjEaf6P927d48333wzIrzmIEIoQ6MaMmRI9OvXL95///3ceffcc09ccMEFeZzqwHj22WfjySefjMcffzzmzJmzz9ubMmVKTJw4cT9MVjsGDnb5+GVoxYoVcdJJJ8XkyZMP2G2ce+65MXPmzH3ezoef67KysnjooYf2ebsf1Ydvf8iQIfHUU0/lZZZdfzFJ2Z+vOThYCWVoZDU1NTF79ux8j7HXqqur9+r7V65cGUcddVR87GMfO0ATkS/z5s2Ljh07xu9+97uorKzM9zg0MflaDYcDQShDI/vyl78cM2fOjI0bN9a5LPVn111Xfe67774YO3Zs/PCHP4yysrIYOnRoPPfcc3HffffFoEGDol+/fnH//ffX2ub69evjS1/6UpSWlsb48eNj5cqVucuWLVsWX/rSl6JPnz4xbNiwePDBB3OXTZo0KSZPnhyXXnppnHLKKfHMM8/UmbeioiImTJgQffr0ic985jNx9913R8QHq+T/7//9v3jhhReitLQ0brnlljrX3dv7suvK6X333Rf/8i//Umt7u64cTpo0Ka6//vr46le/GqWlpXHeeefFW2+9FRER559/fkREjBw5MkpLS3P3+dFHH42RI0dGWVlZjB07Nv72t7/ltv2LX/wiBg4cGKWlpTFs2LB4+umn69yfiIjHH388hg8fHqWlpTFw4MC4/fbbIyLimWeeidNPPz1mzJgRffv2jSFDhsQDDzyQu15lZWVMmzYtBg8eHKeddlpce+21sW3btlrXnTlzZvTr1y8GDBgQ9957b0RE/Pa3v4358+fH7bffHqWlpTFhwoTkXM8991yMHj06evXqFaNHj47nnnsud9kFF1wQN998c4wdOzZKS0vjkksuiXXr1iW3E/HBLjVz586NK664IgoLC+MPf/hDnedh9uzZMXTo0Ojbt29MmzYtampqcs/b2LFjY8qUKdGrV68466yz6n0sP/wc//3vf8/9rJ522mkxY8aMiIh46aWXYsyYMVFWVhYDBgyIKVOm5OI99VzvfDx3WrZsWVxwwQVRVlYWn/vc5+KRRx7JXba7n6MPu+aaa3Ir4BUVFdG9e/f49a9/HRERb731VvTp0ydqampq3f7VV18dq1atigkTJkRpaWn88pe/zG1v/vz5MXjw4Ojbt29Mnz693udj06ZN8e1vfztOPfXUOOOMM+K//uu/co/3rbfeGldddVXue3f99+Wmm26KxYsXx5QpU6K0tDSmTJlSZ9sf/mvF7l4jQ4YMiV/84hdxzjnnxCmnnBI7duxo8OsGmrQMaDRnnHFG9uSTT2YTJ07MbrzxxizLsuzuu+/Oxo8fn2VZlq1YsSI78cQTs6qqqtx1xo8fn919991ZlmXZvffem5WUlGRz5szJduzYkd14443ZoEGDsuuuuy7bvn179sQTT2SnnHJKtnnz5izLsuyaa67JTjnllOzPf/5ztn379mzq1KnZ2LFjsyzLsi1btmSnn356NmfOnKyqqip7+eWXsz59+mR///vfc9ft2bNntnjx4qy6ujrbtm1bnfszbty4bPLkydm2bduyV155Jevbt2/21FNP5WbdeVspH+W+7HzMUts+8cQTs+XLl+e+t0+fPtmLL76YVVVVZd/61reyb3zjG8nvzbIse/nll7NTTz01e+GFF7IdO3Zk9913X3bGGWdk27dvz5YtW5adfvrp2TvvvJN7jt58883kferfv3+2aNGiLMuybMOGDdlf//rXLMuy7E9/+lNWUlKS/fCHP8y2b9+ePfPMM9nJJ5+cLVu2LMuyLPvBD36QXXbZZdn69euzTZs2ZZdddln24x//uNZ1b7755qyysjJ77LHHsh49emQbNmyo87ikrF+/PisrK8vuv//+rKqqKps/f35WVlaWrVu3LsuyD36+hg4dmr3++uvZ1q1bs/Hjx2c/+tGP6t3eokWLsk9+8pPZhg0bsilTpmSXXXZZnedh/Pjx2fr167OVK1dmn/3sZ+v8/M6aNSurrKzMFi5cmPXs2TNbv359bpZdv3fnc7xp06asf//+2e23355t27Yt27RpU/bCCy9kWZZlf/nLX7Lnn38+q6qqylasWJGdddZZ2axZs+p9rv/0pz9lAwcOzLIsyyorK7Mzzzwzmz59erZ9+/bsqaeeyk455ZTc87Knn6Nd3XPPPbnH4oEHHsiGDh2aXXHFFbnLJkyYUOf2s+z//k3Yaee/Ad/73veyrVu3ZkuWLMk++clPZkuXLk3e7tVXX51NmDAh27RpU7ZixYpaj/ctt9ySXXnllXW2vfPfl10f79TjtevP1u5eIzvvx7nnnputWrUq27p16169bqAps6IMefD1r3897rjjjt2u3NXn6KOPjtGjR0dBQUEMHz48ysvLY+LEidG6desYMGBAtG7dutaq1+DBg6N3797RunXr+OY3vxkvvPBClJeXx2OPPRZHHXVUjB49OgoLC+MTn/hEDBs2LH7/+9/nrjt06NDo1atXtGzZMtq0aVNrjvLy8njuuefiqquuijZt2kRJSUmcd955MW/evAN2X/bGmWeeGT169IjCwsI499xzY8mSJfV+729/+9sYM2ZMnHzyyVFQUBD//M//HK1atYoXXnghCgoKorKyMpYtWxZVVVVx9NFHx7HHHpvcTmFhYSxdujQ2b94cHTt2jE9+8pO1Lr/iiiuidevW0adPnxg0aFD87ne/iyzL4u67747vfve70alTp2jfvn1cdtllsXDhwlrbnThxYrRq1SoGDRoUH/vYx+KNN95o0OPw2GOPxXHHHRef//zno7CwMEaMGBEnnHBCPProo7nvGTVqVBx//PHRtm3bOOuss3b7WN1///1x+umnR8eOHWPEiBHxxBNPxNq1a2t9z6WXXhqdOnWKI488Mi688MJYsGBB7rIuXbrERRddFK1atYrhw4fH8ccfH4899tge78Phhx8el1xySbRp0ybat28fJ598ckREfOpTn4pTTjklCgsL4+ijj44xY8bEokWLGvTYvPjii/H+++/HV7/61WjdunX069cvzjjjjFqPfUN/jvr06RPPPvts1NTUxKJFi+IrX/lKbuV+0aJF0adPnwbNtNPll18ebdu2jZNOOilOOumkWqu3O1VXV8eDDz4YV155ZbRv3z6OPvro+NKXvlTrrxX7y+5eIztdcMEFUVxcHG3btt2r1w00ZYX5HgCaoxNPPDEGDx4cv/jFL+If//Ef9+q6RUVFua/btm0bERGHH3547rw2bdrEli1bcqc//vGP575u165ddOzYMVavXh0rV66Ml156KcrKynKXV1dXx7nnnps7XVxcXO8cq1evjo4dO0b79u1z5x155JHx17/+9YDdl72x63batm1b6w2UH7Zq1aqYO3du3HHHHbnzqqqqYvXq1dGnT5/47ne/G7feemssXbo0BgwYEJMmTYpu3brV2c4tt9wS06dPj5/85CfRvXv3uPLKK6O0tDQiIjp06FBrf+0jjzwyVq9eHevWrYutW7fGqFGjcpdlWZb783lERKdOnaKw8P/+uT7ssMN2e392tXr16jjyyCNrnXfkkUdGRUVF7vQRRxzRoG1v27Ytfv/738cNN9wQERGlpaVRXFwc8+fPj4svvjj3fbv+3Bx11FGxevXq3Olu3bpFixYtas2y6+Up5eXl9UbWG2+8Ef/+7/8ef/3rX2Pr1q1RXV1d5xeU+qxevTo+/vGPR8uW/7dm9OHHpqE/R8cee2wcdthhsWTJknj22Wdj4sSJMWfOnHj99ddj0aJFe/2G3V1vt77nZP369VFVVVXr+f3w/PvL7l4jO+36vB933HENft1AU2ZFGfLk61//etx99921/qO2M6R27p8aEfHuu+/u0+288847ua+3bNkS7733XnTt2jWKi4ujd+/esXjx4tz/nn/++bj++usbtN2uXbvGe++9F5s3b86dV15e3ij/ITzssMP262NUXFwcEyZMqPVYvPjiizFixIiIiDjnnHPiN7/5TTz66KPRokWL+PGPf5zcTo8ePWL69Onx1FNPxZlnnhnf+MY3cpdt3LixVuyUl5dH165do3PnztG2bdtYuHBh7rafffbZeP755xs0+67RmdK1a9dYtWpVrfM+6vP0P//zP7F58+a4/vrro3///tG/f/+oqKiIuXPn1tn+TqtWrYquXbvmTldUVESWZbW+d9fLU4qLi2PFihXJy6677ro44YQT4qGHHornnnsuvvnNb9ba/u507do13nnnnVq/lOzLz3Dv3r3joYceiqqqqujWrVv07t075s6dG++9916UlJR8pG3uTufOnaNVq1a1nt9d5//w62TNmjUf+bb29BqJqPuz2NDXDTRlQhny5Ljjjovhw4fHf//3f+fO69KlS3Tr1i3mzZsX1dXVMWfOnHoDoaEef/zxWLx4cVRWVsZPf/rTOPnkk6O4uDgGDx4cy5cvj7lz50ZVVVVUVVXFSy+9FMuWLWvQdouLi6O0tDRuvPHG2L59e/ztb3+LOXPm1FqRPlBOOumk+Pvf/x5LliyJ7du3x6233rpX1z/88MNrPa7nnXde3HXXXfHiiy9GlmXx/vvvx2OPPRabN2+O119/PZ5++umorKyM1q1bR5s2bWqtQO5UWVkZDzzwQGzatClatWoV7dq1q/N9t956a1RWVsbixYvjsccei7POOitatmwZ5513Xvzwhz/M7cJQUVERTzzxRIPuS1FRUbz99tv1Xj5o0KBYvnx5zJ8/P3bs2BEPPvhgLF26NAYPHtyg7e9q7ty5MXr06Jg/f37MnTs35s6dG7/5zW/ib3/7W7z66qu577v99tvjvffei/Ly8pg9e3YMHz48d9m6deti9uzZUVVVFb/73e9i2bJlMWjQoN3e7uDBg+Pdd9+NX/3qV1FZWRmbN2+OF198MSI++OWvXbt20a5du1i2bFn85je/qXXdDz/Xu+rRo0e0bds2brvttqiqqopnnnkm/vCHP9Sad2/06dMn7rjjjtxfafr27Rt33HFH9OrVKwoKCpLX2d18e1JQUBBnnXVW3HTTTbF58+ZYuXJlzJo1K/caLCkpiUWLFsWqVati06ZN8fOf//wj3/buXiMpDX3dQFPnpxbyaOLEiXX+pDp16tS4/fbbo2/fvrF06dLcn+4/qhEjRsTPfvaz6Nu3b7z88svxox/9KCIi2rdvH7fffns8+OCDMXDgwBgwYED8+Mc/3qvDfd14442xcuXKGDhwYFx++eXxr//6r3Haaaft07wNcfzxx8fEiRPj4osvjs9+9rPRq1evvbr+5ZdfHpMmTYqysrJ48MEH49Of/nRMnTo1pkyZEr17947Pfvazcd9990XEBwH8k5/8JPr27RsDBgyIdevWxbe+9a3kdufNmxdDhgyJnj17xl133ZV7rCM+iJIOHTrEwIED46qrrorrrrsut9vN1VdfHccdd1x88YtfjJ49e8bFF1/c4H2Qv/CFL8TSpUujrKwsvva1r9W5vHPnzjFjxoyYNWtW9O3bN2677baYMWNGdOnSZa8es4qKinj66afjoosuiiOOOCL3v0996lMxcODAWqvKQ4cOjVGjRsXnP//5GDx4cK0PnOnRo0e8+eabceqpp8bNN98ct9xyS3Tu3Hm3t92+ffuYOXNmPProo9G/f/8YNmxY7igs11xzTSxYsCB69uwZ3//+9+tE7oef6121bt06ZsyYEX/84x/j1FNPjeuvvz7+4z/+Y693h9qpd+/esWXLlujdu3dERPTq1Su2bdtWa/emD/vqV78a06dPj7KystxRUvbG97///TjssMPizDPPjHHjxsWIESNi9OjRERHRv3//GD58eJx77rkxatSoOOOMM2pd98ILL4yHHnooevfundudpj67e42k7M3rBpqyFllD/0YFwEfyzDPPxNVXXx1//OMf8z3KAde9e/d4+OGH47jjjqtz2X333Rf33HNPnVVfgKbKijIAACQIZQAASLDrBQAAJFhRBgCABKEMAAAJh/Qn861fvyVqauxZAgBAXS1btojOndvVe/khHco1NZlQBgDgI7HrBQAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgITCfA8AQOP4ylcuiJqa6igoKIxf/nJ2vscBaPKsKAM0EzU11RERUV29I8+TABwchDJAM/CVr1xQ6/Sll16Yp0kADh5CGaAZ2LmavJNVZYA9E8oAAJAglAEAIEEoAzQDLVsW1DpdUOCgRwB7IpQBmoHbbvvvWqcdHg5gz4QyQDOxc1XZajJAw7TIsizL9xAHytq1m6Om5pC9ewAA7IOWLVtEUVH7+i9vxFkAAOCgIZQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJDgc0wBmolLLhmX+3rmzDvzOAnAwcGKMgAAJAhlgGZg19Xk1GkA6hLKAACQIJQBACBBKAMAQIJQBgCABKEM0Ax8+HBwDg8HsGdCGQAAElpkWZble4gDZe3azVFTc8jePQAA9kHLli2iqKh9/Zc34iwAAHDQEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJhfkeAIDGcckl43Jfz5x5Zx4nATg4WFEGAIAEoQzQDOy6mpw6DUBdQhkAABKEMgAAJAhlAABIEMoAAJAglAGagQ8fDs7h4QD2TCgDAEBCiyzLsnwPcaCsXbs5amoO2bsHAMA+aNmyRRQVta//8kacBQAADhpCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgIQmHcovvfRSjB07NsaOHRs33XRTvscBAKAZKcz3ALtTUlISd911V0REXHTRRbF58+Zo377+T08BAID9pUmvKLdq1SoiIqqrq6Nr167Rtm3bPE8EAEBz0WihPG3atBgyZEh07949Xnvttdz5b7zxRowZMyaGDRsWY8aMieXLl9e63vz582P48OHRoUOHKCxs0gvgAAAcQlpkWZY1xg0tXrw4jjrqqDj//PNjxowZceKJJ0ZExIUXXhijR4+OkSNHxrx58+Lee++N2bNn17puTU1NXHHFFXH55ZdH9+7dG2NcAACauUZboi0rK6tz3tq1a+OVV16JWbNmRUTEiBEjYurUqbFu3bro0qVLVFZWRuvWraNly5bRrl27aNOmzV7d5tq1m6OmplF+DwAA4CDTsmWLKCqq//1ved2Xoby8PLp16xYFBQUREVFQUBBdu3aN8vLy6NKlSzzyyCNx5513Rk1NTZSVlcU//MM/5HNcAACakSa90+/ZZ58dZ599dr7HAACgGcrrUS+Ki4ujoqIiqqurI+KDo1usXr06iouL8zkWAADkN5SLioqipKQkFixYEBERCxYsiJKSkujSpUs+xwIAgMY76sUNN9wQDz/8cKxZsyY6d+4cnTp1ioULF8ayZcti0qRJsXHjxujQoUNMmzYtTjjhhP1ym97MBwBAffb0Zr5GC+V8EMoAANRnT6HcpD+ZDwAA8kUoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIKFJh/LixYvji1/8YowdOzZmzpyZ73EAAGhGmnQoH3PMMXHHHXfEXXfdFY8++mhs3bo13yMBANBMFOZ7gN3p1q1b7uuCgoJo2bJJdz0AAIeQRivPadOmxZAhQ6J79+7x2muv5c5/4403YsyYMTFs2LAYM2ZMLF++vM51n3zyyTj22GOjTZs2jTUuAADNXIssy7LGuKHFixfHUUcdFeeff37MmDEjTjzxxIiIuPDCC2P06NExcuTImDdvXtx7770xe/bs3PXeeeed+Pa3vx3Tp0+Pdu3aNcaoAADQeLtelJWV1Tlv7dq18corr8SsWbMiImLEiBExderUWLduXXTp0iUqKytj0qRJcd11132kSF67dnPU1DTK7wEAABxkWrZsEUVF7eu/vBFnqaO8vDy6desWBQUFEfHBfshdu3aN8vLyiIiYP39+LF26NCZPnhwXXHBBVFRU5HNcAACakSb9Zr7Ro0fH6NGj8z0GAADNUF5XlIuLi6OioiKqq6sjIqK6ujpWr14dxcXF+RwLAAA+eiivWLEi3n777X268aKioigpKYkFCxZERMSCBQuipKQkunTpsk/bBQCAfdXgo15861vfivHjx0fPnj3j3nvvjeuvvz5atmwZ3/ve9+K8887b4/VvuOGGePjhh2PNmjXRuXPn6NSpUyxcuDCWLVsWkyZNio0bN0aHDh1i2rRpccIJJ+zzHYvwZj4AAOq3pzfzNTiU+/XrF48//ni0bt06zjnnnLjuuuuiQ4cOMXHixHj44Yf328D7k1AGAKA+ewrlBr+Zr6qqKlq3bh0VFRWxYcOG6NWrV0RErFmzZt+nBACAJqbBoVxSUhI///nPY+XKlTF48OCIiKioqIj27euvcAAAOFg1+M18P/jBD+K1116L7du3xze+8Y2IiHj++efjnHPOOVCzAQBA3jTaR1jng32UAQCoz377ZL4sy+Luu++Oiy66KLeKvGjRonjwwQf3fUoAAGhiGhzKP/3pT2POnDnxxS9+MfcR0x//+MfjtttuO2DDAQBAvjQ4lO+///6YMWNGfO5zn4sWLVpERMTRRx8dK1asOGDDAQBAvjQ4lKurq6Ndu3YREblQ3rJlS3zsYx87MJMBAEAeNTiUBw0aFP/2b/8WlZWVEfHBPss//elP44wzzjhgwwEAQL40OJS/853vxLvvvhu9evWKTZs2RWlpaaxatSquuuqqAzkfAADkxV4fHm7t2rWxcuXKKC4ujiOOOOJAzbVfODwcAAD12W+Hh/v85z8fERFFRUXRo0ePXCSPGjVq3yYEAIAmqMGh/Oabb9Y5L8uyePvtt/frQAAA0BQU7ukbvv3tb0dERFVVVe7rnVauXBn/9E//dGAmAwCAPNpjKB977LHJryMievbsGWedddb+nwoAAPKswW/me+KJJ2LgwIEHep79ypv5AACoz57ezLfHFeXcNxYWxtNPP528rF+/fns/GQAANGENXlEeMmRIrdPr16+Pqqqq6NatWzzyyCMHZLh9ZUUZAID67LcV5T/84Q+1TldXV8f06dNzH2sNAACHkr3+wJFd7dixIwYNGhRPPvnk/pxpv7GiDABAffbbB46kPPnkk9GiRYt92QQAADRJDd71YtCgQbWieOvWrVFZWRmTJ08+IIMBAEA+NXjXiz//+c+1Th922GFx/PHHR/v29S9X55tdLwAAqM+edr3Yp32UmzqhDABAffbbUS82bNgQM2fOjCVLlsT7779f67Jf//rXH31CAABoghocyldeeWVUVlbG2WefHYcddtiBnAkAAPKuwaH8/PPPx5/+9Kdo3br1gZwHAACahAYfHq579+7xzjvvHMhZAACgyWjwivKpp54aX/nKV2LUqFFx+OGH17rsC1/4wn4fDAAA8qnBobx48eLo1q1bnU/ha9GihVAGAOCQ4/BwAAA0S/t0eLgsy3KfxldTU7ObG9mnT8IGAIAmZ7eh3KtXr3juueciIuITn/hELpp3BvTO/1+yZMmBnxQAABrRbne9KC8vj+Li4oiIWLlyZb0bOeqoo/b/ZPuBXS8AAKjPPu16sTOSIyI6dOgQs2fPTn4y38yZM/dxTAAAaFoafNSLK664Iqqrq+Mzn/lMtGnT5kDOBAAAedfgUH7hhRd8Mh8AAM1Ggw9X0atXr3j99dcP5CwAANBkNPg4ymvXro1LL700Tj755CgqKqp12eWXX35AhttX3swHAEB99unNfLu66aab4p133omjjz46Nm/enDt/5yHjAADgUNLgUF64cGE89NBD0bVr1wM5DwAANAkN3kf5mGOOicLCBnc1AAAc1BpcviNHjoyvfe1rMX78+Dr7KPfr12+/DwYAAPnU4DfzDRkyJL2BFi3ikUce2a9D7S/ezAcAQH329Ga+BofywUgoAwBQnz2FcoP3UQYAgOZEKAM0E2+9tTwmTvxyrFjxZr5HATgoCGWAZuI///Pm2Lp1a9x66035HgXgoCCUAZqBt95aHmvWrI6IiDVrVltVBmgAoQzQDPznf95c67RVZYA9E8oAzcDO1eT6TgNQl1AGAIAEoQwAAAlCGQAAEoQyAAAk+AhrOMQ9+eQf43//9/F8j0Gevfrqkjrnde9ekodJaAoGDBgU/fufnu8xIO98hDUAAHwEVpQBmoFLLhlX57yZM+/MwyQATYcVZQAA+AiEMkAz8OHVY6vJAHsmlAEAIKEw3wMA0Dh2HuXimmu+n+dJAA4OVpQBACDBUS8OUXfeOTtWrHgz32MATchbb33wb8Kxxx6X50mApuKYY46LceMuzPcYebOno17Y9eIQtWLFm/Hq35dGQdtO+R4FaCJqqgsiImLpijV5ngRoCqq3bcj3CE2eUD6EFbTtFB87bmi+xwAAmqD333wk3yM0efZRBgCABCvKh6j33tsQ1ds2+G0RAEiq3rYh3ntPCu6OFWUAAEjwa8QhqmPHTvHuxh32UQYAkt5/85Ho2LFTvsdo0oTyIcyuF8CuanZsi4iIloVt8zwJ0BR8cNSLw/M9RpMmlA9RxxzjOKlAbbnjKB/jP4xARMThemEPfOAIQDMxbdrUiPAR1gA77ekDR7yZDwAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAZoJl59dUm8+uqSuOSScfkeBeCgIJQBACDBB47AIe7JJ/8Y//u/j+d7DPLs1VeX1Dmve/eSPExCUzBgwKDo3//0fI8BeecDRwAA4COwogzQDKT2S5458848TALQdFhRBgCAj0AoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDNANFRUUfOn14niYBOHgIZYBmYPPmLR86vTlPkwAcPIQyQDNw2mkDdnsagLqadChv2LAhRo0aFaWlpfkeBeCgds45/xyFhYUREVFY2CrOPXdUnicCaPqadCi3a9cuZs6cGSeffHK+RwE4qHXq1DkGDhwcLVq0iIEDB0XHjp3yPRJAk1eY7wF2p1WrVtGpU6d8jwFwSDjnnH+OlSvftpoM0ECNtqI8bdq0GDJkSHTv3j1ee+213PlvvPFGjBkzJoYNGxZjxoyJ5cuXN9ZIAM1Kp06dY9Kka60mAzRQo60oDx06NC688MI4//zza50/efLkGDduXIwcOTLmzZsX1157bcyePXu/3GZRUfv9sh0AAJqfRgvlsrKyOuetXbs2XnnllZg1a1ZERIwYMSKmTp0a69atiy5duuzzba5duzlqarJ93g4AAIeeli1b7HZhNa9v5isvL49u3bpFQUFBREQUFBRE165do7y8PPc9F198cSxZsiQuvvjiWrtsAADAgdSk38wXEfGrX/0q3yMAANAM5XVFubi4OCoqKqK6ujoiIqqrq2P16tVRXFycz7EAACC/oVxUVBQlJSWxYMGCiIhYsGBBlJSU7Jf9kwEAYF+0yLKsUd7tdsMNN8TDDz8ca9asic6dO0enTp1i4cKFsWzZspg0aVJs3LgxOnToENOmTYsTTjhhv9ymN/MBAFCfPb2Zr9FCOR+EMgAA9WnSR70AAICmSigDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBgCABKEMAAAJQhkAABKEMgAAJAhlAABIEMoAAJAglAEAIEEoAwBAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgoTDfA+zJ1KlTY8mSJXH66afHhAkT8j0OwEHra1/7cmzbtjUOO6xd/Oxnv8z3OABNXpNeUf7LX/4SBQUFceedd8Yrr7wSa9asyfdIAAetbdu2RkTE1q1b8jwJwMGhSYfySy+9FKeeempERPTu3TtefvnlPE8EcHD62te+XOv0xImX5mkSgINHo4XytGnTYsiQIdG9e/d47bXXcue/8cYbMWbMmBg2bFiMGTMmli9fnrts48aN0b59+4iIaNeuXWzcuLGxxgU4pOxcTd7JqjLAnjXaPspDhw6NCy+8MM4///xa50+ePDnGjRsXI0eOjHnz5sW1114bs2fPjoiIDh06xObNmyMiYsuWLXHsscfu1W0WFbXfP8MDHIKOOOL/y/cIAE1ao4VyWVlZnfPWrl0br7zySsyaNSsiIkaMGBFTp06NdevWRZcuXeLTn/50LFy4MIYMGRKLFi2Ks88+e69uc+3azVFTk+2X+QEONe++uynfIwDkVcuWLXa7sJrXfZTLy8ujW7duUVBQEBERBQUF0bVr1ygvL4+IiB49ekRlZWWMGzcuTjrppDj88MPzOS4AAM1Ikz883OTJk/M9AgAAzVBeV5SLi4ujoqIiqqurIyKiuro6Vq9eHcXFxfkcCwAA8hvKRUVFUVJSEgsWLIiIiAULFkRJSUl06dIln2MBAEC0yLKsUd7tdsMNN8TDDz8ca9asic6dO0enTp1i4cKFsWzZspg0aVJs3LgxOnToENOmTYsTTjhhv9ymN/MBfOCSS8bVOW/mzDvzMAlA07GnN/M1Wijng1AG+IBQBqirSR/1AgAAmiqhDAAACUIZAAAShDIAACQIZQAASBDKAACQIJQBACBBKAMAQIJQBmgGPvzhIj5sBGDPhDIAACT4CGsAAJolH2ENAAAfgVAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEgQygAAkCCUAQAgQSgDAECCUAYAgAShDAAACUIZAAAShDIAACQIZQAASCjM9wAHUsuWLfI9AgAATdSeWrFFlmVZI80CAAAHDbteAABAglAGAIAEoQwAAAlCGQAAEoQyAAAkCGUAAEj4/wH61iQap7RXkgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.set(rc={'figure.figsize':(11.7,8.27)})\n",
        "ax = sns.boxplot(data=valid_1, y=\"minutes\", showfliers=False)   \n",
        "ax.set_title('Number of miuntes spent on Application without outliers')\n",
        "plt.show()\n",
        "\n",
        "sns.set(rc={'figure.figsize':(11.7,8.27)})\n",
        "ax = sns.boxplot(data=valid_1, y=\"minutes\", showfliers=True)   \n",
        "ax.set_title('Number of miuntes spent on Application with outliers')\n",
        "plt.yscale('log')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of NaN and inf values in PHONE_NUMBER column\n",
        "num_nan = valid_['PHONE_NUMBER'].isna().sum()\n",
        "num_inf = valid_['PHONE_NUMBER'].isin([np.inf, -np.inf]).sum()\n",
        "\n",
        "# Print the number of NaN and inf values\n",
        "print(\"Number of NaN values:\", num_nan)\n",
        "print(\"Number of inf values:\", num_inf)\n",
        "\n",
        "valid_['PHONE_NUMBER'].fillna(0, inplace=True)\n",
        "\n",
        "# Get a series of phone numbers and their counts\n",
        "phone_counts = valid_['PHONE_NUMBER'].astype(int).value_counts()\n",
        "\n",
        "# Filter the series to include only phone numbers that appear more than once\n",
        "duplicate_phone_numbers = phone_counts[phone_counts > 1]\n",
        "\n",
        "# Print the phone numbers and their counts\n",
        "dup_phone = []\n",
        "dupcount2 = 0\n",
        "for phone_number, count in duplicate_phone_numbers.items():\n",
        "    if phone_number > 3:\n",
        "      dup_phone.append(phone_number)\n",
        "    if count == 2:\n",
        "        dupcount2 += 1\n",
        "    print(\"Phone number:\", phone_number, \"| Number of duplications:\", count)\n",
        "print(dup_phone)\n",
        "print(dupcount2)"
      ],
      "metadata": {
        "id": "lba39QBLD0CU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1998552a-3d13-4491-85c8-4b4e98d3cbb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of NaN values: 41287\n",
            "Number of inf values: 0\n",
            "Phone number: 0 | Number of duplications: 41287\n",
            "Phone number: 5878766 | Number of duplications: 66\n",
            "Phone number: 1644266 | Number of duplications: 66\n",
            "Phone number: 9037623 | Number of duplications: 53\n",
            "Phone number: 3568617 | Number of duplications: 47\n",
            "Phone number: 4062627 | Number of duplications: 3\n",
            "Phone number: 9417989 | Number of duplications: 3\n",
            "Phone number: 4456136 | Number of duplications: 3\n",
            "Phone number: 5814436 | Number of duplications: 3\n",
            "Phone number: 2322726 | Number of duplications: 3\n",
            "Phone number: 9811781 | Number of duplications: 3\n",
            "Phone number: 6403818 | Number of duplications: 3\n",
            "Phone number: 9461357 | Number of duplications: 3\n",
            "Phone number: 3729289 | Number of duplications: 2\n",
            "Phone number: 2920034 | Number of duplications: 2\n",
            "Phone number: 2452315 | Number of duplications: 2\n",
            "Phone number: 1237628 | Number of duplications: 2\n",
            "Phone number: 7650252 | Number of duplications: 2\n",
            "Phone number: 9544497 | Number of duplications: 2\n",
            "Phone number: 1136866 | Number of duplications: 2\n",
            "Phone number: 8117156 | Number of duplications: 2\n",
            "Phone number: 1645235 | Number of duplications: 2\n",
            "Phone number: 5627415 | Number of duplications: 2\n",
            "Phone number: 5675894 | Number of duplications: 2\n",
            "Phone number: 7131854 | Number of duplications: 2\n",
            "Phone number: 7188884 | Number of duplications: 2\n",
            "Phone number: 9325099 | Number of duplications: 2\n",
            "Phone number: 1691021 | Number of duplications: 2\n",
            "Phone number: 9765922 | Number of duplications: 2\n",
            "Phone number: 9638256 | Number of duplications: 2\n",
            "Phone number: 8904249 | Number of duplications: 2\n",
            "Phone number: 4098292 | Number of duplications: 2\n",
            "Phone number: 1235849 | Number of duplications: 2\n",
            "Phone number: 3802839 | Number of duplications: 2\n",
            "Phone number: 9801861 | Number of duplications: 2\n",
            "Phone number: 7205932 | Number of duplications: 2\n",
            "Phone number: 1798922 | Number of duplications: 2\n",
            "Phone number: 1443360 | Number of duplications: 2\n",
            "Phone number: 6470760 | Number of duplications: 2\n",
            "Phone number: 9483944 | Number of duplications: 2\n",
            "Phone number: 9357110 | Number of duplications: 2\n",
            "Phone number: 9759417 | Number of duplications: 2\n",
            "Phone number: 3955357 | Number of duplications: 2\n",
            "Phone number: 4610299 | Number of duplications: 2\n",
            "Phone number: 9124310 | Number of duplications: 2\n",
            "Phone number: 5193262 | Number of duplications: 2\n",
            "Phone number: 9592331 | Number of duplications: 2\n",
            "Phone number: 1852447 | Number of duplications: 2\n",
            "Phone number: 4514453 | Number of duplications: 2\n",
            "Phone number: 2103822 | Number of duplications: 2\n",
            "Phone number: 9913434 | Number of duplications: 2\n",
            "Phone number: 9452384 | Number of duplications: 2\n",
            "Phone number: 6622764 | Number of duplications: 2\n",
            "Phone number: 2391826 | Number of duplications: 2\n",
            "Phone number: 9345063 | Number of duplications: 2\n",
            "Phone number: 2204751 | Number of duplications: 2\n",
            "Phone number: 5923796 | Number of duplications: 2\n",
            "Phone number: 3800739 | Number of duplications: 2\n",
            "Phone number: 9237997 | Number of duplications: 2\n",
            "Phone number: 8221641 | Number of duplications: 2\n",
            "Phone number: 5422466 | Number of duplications: 2\n",
            "Phone number: 5878097 | Number of duplications: 2\n",
            "Phone number: 8992419 | Number of duplications: 2\n",
            "Phone number: 3088143 | Number of duplications: 2\n",
            "Phone number: 7096599 | Number of duplications: 2\n",
            "Phone number: 4719438 | Number of duplications: 2\n",
            "Phone number: 3571845 | Number of duplications: 2\n",
            "Phone number: 2578838 | Number of duplications: 2\n",
            "Phone number: 9999356 | Number of duplications: 2\n",
            "Phone number: 9066886 | Number of duplications: 2\n",
            "Phone number: 9753275 | Number of duplications: 2\n",
            "Phone number: 7034306 | Number of duplications: 2\n",
            "Phone number: 9497128 | Number of duplications: 2\n",
            "Phone number: 4859742 | Number of duplications: 2\n",
            "Phone number: 2945358 | Number of duplications: 2\n",
            "Phone number: 9121954 | Number of duplications: 2\n",
            "Phone number: 9150870 | Number of duplications: 2\n",
            "Phone number: 7885940 | Number of duplications: 2\n",
            "Phone number: 2377984 | Number of duplications: 2\n",
            "Phone number: 6217890 | Number of duplications: 2\n",
            "Phone number: 9744001 | Number of duplications: 2\n",
            "Phone number: 6650835 | Number of duplications: 2\n",
            "Phone number: 9927125 | Number of duplications: 2\n",
            "Phone number: 7826692 | Number of duplications: 2\n",
            "Phone number: 2631575 | Number of duplications: 2\n",
            "Phone number: 8231339 | Number of duplications: 2\n",
            "Phone number: 9324130 | Number of duplications: 2\n",
            "Phone number: 3525320 | Number of duplications: 2\n",
            "Phone number: 9111296 | Number of duplications: 2\n",
            "Phone number: 9298307 | Number of duplications: 2\n",
            "Phone number: 7226924 | Number of duplications: 2\n",
            "Phone number: 3767718 | Number of duplications: 2\n",
            "Phone number: 6445325 | Number of duplications: 2\n",
            "Phone number: 9305739 | Number of duplications: 2\n",
            "Phone number: 2386482 | Number of duplications: 2\n",
            "Phone number: 9695400 | Number of duplications: 2\n",
            "Phone number: 1979121 | Number of duplications: 2\n",
            "Phone number: 4541507 | Number of duplications: 2\n",
            "Phone number: 1310409 | Number of duplications: 2\n",
            "Phone number: 9579426 | Number of duplications: 2\n",
            "Phone number: 5291218 | Number of duplications: 2\n",
            "Phone number: 4395579 | Number of duplications: 2\n",
            "Phone number: 5053278 | Number of duplications: 2\n",
            "Phone number: 9924227 | Number of duplications: 2\n",
            "Phone number: 8008898 | Number of duplications: 2\n",
            "Phone number: 9047348 | Number of duplications: 2\n",
            "Phone number: 3940620 | Number of duplications: 2\n",
            "Phone number: 9971715 | Number of duplications: 2\n",
            "Phone number: 6574422 | Number of duplications: 2\n",
            "Phone number: 9382027 | Number of duplications: 2\n",
            "Phone number: 7905030 | Number of duplications: 2\n",
            "Phone number: 5076611 | Number of duplications: 2\n",
            "Phone number: 9576444 | Number of duplications: 2\n",
            "Phone number: 5775820 | Number of duplications: 2\n",
            "Phone number: 5824798 | Number of duplications: 2\n",
            "Phone number: 8226098 | Number of duplications: 2\n",
            "Phone number: 3921210 | Number of duplications: 2\n",
            "Phone number: 5200177 | Number of duplications: 2\n",
            "Phone number: 3339994 | Number of duplications: 2\n",
            "Phone number: 5747795 | Number of duplications: 2\n",
            "Phone number: 8553510 | Number of duplications: 2\n",
            "Phone number: 6657317 | Number of duplications: 2\n",
            "Phone number: 5515660 | Number of duplications: 2\n",
            "Phone number: 9797636 | Number of duplications: 2\n",
            "Phone number: 9212708 | Number of duplications: 2\n",
            "Phone number: 2598909 | Number of duplications: 2\n",
            "Phone number: 6320144 | Number of duplications: 2\n",
            "Phone number: 9417773 | Number of duplications: 2\n",
            "Phone number: 9048555 | Number of duplications: 2\n",
            "Phone number: 9952665 | Number of duplications: 2\n",
            "Phone number: 9895899 | Number of duplications: 2\n",
            "Phone number: 9943353 | Number of duplications: 2\n",
            "Phone number: 9059781 | Number of duplications: 2\n",
            "Phone number: 7855682 | Number of duplications: 2\n",
            "Phone number: 3981507 | Number of duplications: 2\n",
            "Phone number: 4143807 | Number of duplications: 2\n",
            "Phone number: 3809807 | Number of duplications: 2\n",
            "Phone number: 3261540 | Number of duplications: 2\n",
            "Phone number: 8203676 | Number of duplications: 2\n",
            "Phone number: 6392473 | Number of duplications: 2\n",
            "Phone number: 7356957 | Number of duplications: 2\n",
            "Phone number: 4693673 | Number of duplications: 2\n",
            "Phone number: 9506756 | Number of duplications: 2\n",
            "Phone number: 1789196 | Number of duplications: 2\n",
            "Phone number: 6382894 | Number of duplications: 2\n",
            "Phone number: 2493135 | Number of duplications: 2\n",
            "Phone number: 8422655 | Number of duplications: 2\n",
            "Phone number: 5252085 | Number of duplications: 2\n",
            "Phone number: 2320773 | Number of duplications: 2\n",
            "Phone number: 2996969 | Number of duplications: 2\n",
            "Phone number: 9086103 | Number of duplications: 2\n",
            "Phone number: 1086223 | Number of duplications: 2\n",
            "Phone number: 7772980 | Number of duplications: 2\n",
            "Phone number: 8742769 | Number of duplications: 2\n",
            "Phone number: 7453023 | Number of duplications: 2\n",
            "Phone number: 3392090 | Number of duplications: 2\n",
            "Phone number: 9899462 | Number of duplications: 2\n",
            "Phone number: 4877604 | Number of duplications: 2\n",
            "Phone number: 6210745 | Number of duplications: 2\n",
            "Phone number: 8159228 | Number of duplications: 2\n",
            "Phone number: 6369839 | Number of duplications: 2\n",
            "Phone number: 2628904 | Number of duplications: 2\n",
            "Phone number: 9166185 | Number of duplications: 2\n",
            "Phone number: 1882304 | Number of duplications: 2\n",
            "Phone number: 9379772 "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py:6392: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  return self._update_inplace(result)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "| Number of duplications: 2\n",
            "Phone number: 9168767 | Number of duplications: 2\n",
            "Phone number: 2553199 | Number of duplications: 2\n",
            "Phone number: 1109026 | Number of duplications: 2\n",
            "Phone number: 1209472 | Number of duplications: 2\n",
            "Phone number: 9461841 | Number of duplications: 2\n",
            "Phone number: 9257914 | Number of duplications: 2\n",
            "Phone number: 2748842 | Number of duplications: 2\n",
            "Phone number: 7942209 | Number of duplications: 2\n",
            "Phone number: 9543514 | Number of duplications: 2\n",
            "Phone number: 4718754 | Number of duplications: 2\n",
            "Phone number: 6959182 | Number of duplications: 2\n",
            "Phone number: 5117543 | Number of duplications: 2\n",
            "Phone number: 1046762 | Number of duplications: 2\n",
            "Phone number: 5577482 | Number of duplications: 2\n",
            "Phone number: 3870173 | Number of duplications: 2\n",
            "Phone number: 5795626 | Number of duplications: 2\n",
            "Phone number: 3145977 | Number of duplications: 2\n",
            "Phone number: 9974773 | Number of duplications: 2\n",
            "Phone number: 9200041 | Number of duplications: 2\n",
            "Phone number: 9274342 | Number of duplications: 2\n",
            "Phone number: 2035310 | Number of duplications: 2\n",
            "Phone number: 1804549 | Number of duplications: 2\n",
            "Phone number: 8865727 | Number of duplications: 2\n",
            "Phone number: 8511462 | Number of duplications: 2\n",
            "Phone number: 2987734 | Number of duplications: 2\n",
            "Phone number: 9177670 | Number of duplications: 2\n",
            "Phone number: 9566070 | Number of duplications: 2\n",
            "Phone number: 5506564 | Number of duplications: 2\n",
            "Phone number: 9200124 | Number of duplications: 2\n",
            "Phone number: 3848625 | Number of duplications: 2\n",
            "Phone number: 7733968 | Number of duplications: 2\n",
            "Phone number: 5872079 | Number of duplications: 2\n",
            "Phone number: 1973257 | Number of duplications: 2\n",
            "Phone number: 9633387 | Number of duplications: 2\n",
            "Phone number: 2511962 | Number of duplications: 2\n",
            "Phone number: 1619040 | Number of duplications: 2\n",
            "Phone number: 4697567 | Number of duplications: 2\n",
            "Phone number: 4732301 | Number of duplications: 2\n",
            "Phone number: 8512856 | Number of duplications: 2\n",
            "Phone number: 5037889 | Number of duplications: 2\n",
            "Phone number: 9339419 | Number of duplications: 2\n",
            "Phone number: 5206486 | Number of duplications: 2\n",
            "Phone number: 4081943 | Number of duplications: 2\n",
            "Phone number: 4103140 | Number of duplications: 2\n",
            "Phone number: 8031140 | Number of duplications: 2\n",
            "Phone number: 1504810 | Number of duplications: 2\n",
            "Phone number: 4209934 | Number of duplications: 2\n",
            "Phone number: 9797974 | Number of duplications: 2\n",
            "Phone number: 1337863 | Number of duplications: 2\n",
            "Phone number: 4698182 | Number of duplications: 2\n",
            "Phone number: 8194261 | Number of duplications: 2\n",
            "Phone number: 9235252 | Number of duplications: 2\n",
            "Phone number: 9514809 | Number of duplications: 2\n",
            "Phone number: 4277323 | Number of duplications: 2\n",
            "Phone number: 9290698 | Number of duplications: 2\n",
            "Phone number: 5795318 | Number of duplications: 2\n",
            "Phone number: 4896339 | Number of duplications: 2\n",
            "Phone number: 7399570 | Number of duplications: 2\n",
            "Phone number: 2413229 | Number of duplications: 2\n",
            "Phone number: 6980757 | Number of duplications: 2\n",
            "Phone number: 9339582 | Number of duplications: 2\n",
            "Phone number: 9710068 | Number of duplications: 2\n",
            "Phone number: 9693437 | Number of duplications: 2\n",
            "Phone number: 3451774 | Number of duplications: 2\n",
            "Phone number: 5624914 | Number of duplications: 2\n",
            "Phone number: 9968771 | Number of duplications: 2\n",
            "Phone number: 3387236 | Number of duplications: 2\n",
            "Phone number: 6352561 | Number of duplications: 2\n",
            "Phone number: 9984689 | Number of duplications: 2\n",
            "Phone number: 1968515 | Number of duplications: 2\n",
            "Phone number: 7889855 | Number of duplications: 2\n",
            "Phone number: 2409794 | Number of duplications: 2\n",
            "Phone number: 6005403 | Number of duplications: 2\n",
            "Phone number: 9395027 | Number of duplications: 2\n",
            "Phone number: 3815480 | Number of duplications: 2\n",
            "Phone number: 6351461 | Number of duplications: 2\n",
            "Phone number: 5986563 | Number of duplications: 2\n",
            "Phone number: 1550967 | Number of duplications: 2\n",
            "Phone number: 8862269 | Number of duplications: 2\n",
            "Phone number: 9320782 | Number of duplications: 2\n",
            "Phone number: 4872029 | Number of duplications: 2\n",
            "Phone number: 7018217 | Number of duplications: 2\n",
            "Phone number: 3401869 | Number of duplications: 2\n",
            "Phone number: 9122991 | Number of duplications: 2\n",
            "Phone number: 4057151 | Number of duplications: 2\n",
            "Phone number: 3175789 | Number of duplications: 2\n",
            "Phone number: 6663406 | Number of duplications: 2\n",
            "Phone number: 9400329 | Number of duplications: 2\n",
            "Phone number: 1865488 | Number of duplications: 2\n",
            "Phone number: 9708902 | Number of duplications: 2\n",
            "Phone number: 5982256 | Number of duplications: 2\n",
            "Phone number: 6818397 | Number of duplications: 2\n",
            "Phone number: 2429527 | Number of duplications: 2\n",
            "Phone number: 1853820 | Number of duplications: 2\n",
            "Phone number: 9701844 | Number of duplications: 2\n",
            "Phone number: 7010378 | Number of duplications: 2\n",
            "Phone number: 9882794 | Number of duplications: 2\n",
            "Phone number: 7844743 | Number of duplications: 2\n",
            "Phone number: 4262777 | Number of duplications: 2\n",
            "Phone number: 9048219 | Number of duplications: 2\n",
            "Phone number: 9021154 | Number of duplications: 2\n",
            "Phone number: 9907715 | Number of duplications: 2\n",
            "Phone number: 9562191 | Number of duplications: 2\n",
            "Phone number: 7845476 | Number of duplications: 2\n",
            "Phone number: 7885626 | Number of duplications: 2\n",
            "Phone number: 7471357 | Number of duplications: 2\n",
            "Phone number: 7555906 | Number of duplications: 2\n",
            "Phone number: 6493594 | Number of duplications: 2\n",
            "Phone number: 2609431 | Number of duplications: 2\n",
            "Phone number: 4438703 | Number of duplications: 2\n",
            "Phone number: 4114700 | Number of duplications: 2\n",
            "Phone number: 6443565 | Number of duplications: 2\n",
            "Phone number: 4804222 | Number of duplications: 2\n",
            "Phone number: 1804717 | Number of duplications: 2\n",
            "Phone number: 9491193 | Number of duplications: 2\n",
            "Phone number: 3871651 | Number of duplications: 2\n",
            "Phone number: 2749160 | Number of duplications: 2\n",
            "Phone number: 6730746 | Number of duplications: 2\n",
            "Phone number: 3263770 | Number of duplications: 2\n",
            "Phone number: 8522767 | Number of duplications: 2\n",
            "Phone number: 2549425 | Number of duplications: 2\n",
            "Phone number: 9971642 | Number of duplications: 2\n",
            "Phone number: 3198774 | Number of duplications: 2\n",
            "Phone number: 9711012 | Number of duplications: 2\n",
            "Phone number: 9994557 | Number of duplications: 2\n",
            "Phone number: 7768638 | Number of duplications: 2\n",
            "Phone number: 6939759 | Number of duplications: 2\n",
            "Phone number: 4434915 | Number of duplications: 2\n",
            "Phone number: 6503601 | Number of duplications: 2\n",
            "Phone number: 7285449 | Number of duplications: 2\n",
            "Phone number: 7454671 | Number of duplications: 2\n",
            "Phone number: 8718060 | Number of duplications: 2\n",
            "Phone number: 9427409 | Number of duplications: 2\n",
            "Phone number: 3954819 | Number of duplications: 2\n",
            "Phone number: 2227643 | Number of duplications: 2\n",
            "Phone number: 1275744 | Number of duplications: 2\n",
            "Phone number: 1679202 | Number of duplications: 2\n",
            "Phone number: 7122898 | Number of duplications: 2\n",
            "Phone number: 3774260 | Number of duplications: 2\n",
            "Phone number: 2078343 | Number of duplications: 2\n",
            "Phone number: 6995997 | Number of duplications: 2\n",
            "Phone number: 8484707 | Number of duplications: 2\n",
            "Phone number: 2931837 | Number of duplications: 2\n",
            "Phone number: 8903550 | Number of duplications: 2\n",
            "Phone number: 1701149 | Number of duplications: 2\n",
            "Phone number: 1598086 | Number of duplications: 2\n",
            "Phone number: 9750219 | Number of duplications: 2\n",
            "Phone number: 3531749 | Number of duplications: 2\n",
            "Phone number: 9248807 | Number of duplications: 2\n",
            "Phone number: 1636325 | Number of duplications: 2\n",
            "Phone number: 5602555 | Number of duplications: 2\n",
            "Phone number: 5862198 | Number of duplications: 2\n",
            "Phone number: 9271249 | Number of duplications: 2\n",
            "Phone number: 4691786 | Number of duplications: 2\n",
            "Phone number: 9576234 | Number of duplications: 2\n",
            "Phone number: 9393936 | Number of duplications: 2\n",
            "Phone number: 9754990 | Number of duplications: 2\n",
            "Phone number: 4818345 | Number of duplications: 2\n",
            "Phone number: 9873190 | Number of duplications: 2\n",
            "Phone number: 8950855 | Number of duplications: 2\n",
            "Phone number: 1889235 | Number of duplications: 2\n",
            "Phone number: 9105254 | Number of duplications: 2\n",
            "Phone number: 4665324 | Number of duplications: 2\n",
            "Phone number: 8096773 | Number of duplications: 2\n",
            "Phone number: 6676802 | Number of duplications: 2\n",
            "Phone number: 9194765 | Number of duplications: 2\n",
            "Phone number: 1163025 | Number of duplications: 2\n",
            "Phone number: 4908865 | Number of duplications: 2\n",
            "Phone number: 9857004 | Number of duplications: 2\n",
            "Phone number: 5983040 | Number of duplications: 2\n",
            "Phone number: 6957192 | Number of duplications: 2\n",
            "Phone number: 7430806 | Number of duplications: 2\n",
            "Phone number: 9571606 | Number of duplications: 2\n",
            "Phone number: 9646540 | Number of duplications: 2\n",
            "Phone number: 8999377 | Number of duplications: 2\n",
            "Phone number: 2834708 | Number of duplications: 2\n",
            "Phone number: 4106546 | Number of duplications: 2\n",
            "Phone number: 9365944 | Number of duplications: 2\n",
            "Phone number: 2621879 | Number of duplications: 2\n",
            "Phone number: 8339005 | Number of duplications: 2\n",
            "Phone number: 9571582 | Number of duplications: 2\n",
            "Phone number: 9034961 | Number of duplications: 2\n",
            "Phone number: 9796926 | Number of duplications: 2\n",
            "Phone number: 6677008 | Number of duplications: 2\n",
            "Phone number: 9401992 | Number of duplications: 2\n",
            "Phone number: 1362853 | Number of duplications: 2\n",
            "Phone number: 9257420 | Number of duplications: 2\n",
            "Phone number: 7438904 | Number of duplications: 2\n",
            "Phone number: 5570845 | Number of duplications: 2\n",
            "Phone number: 9838239 | Number of duplications: 2\n",
            "Phone number: 6826281 | Number of duplications: 2\n",
            "Phone number: 9495670 | Number of duplications: 2\n",
            "Phone number: 9124091 | Number of duplications: 2\n",
            "Phone number: 5083926 | Number of duplications: 2\n",
            "Phone number: 9323648 | Number of duplications: 2\n",
            "Phone number: 9492801 | Number of duplications: 2\n",
            "Phone number: 5144527 | Number of duplications: 2\n",
            "Phone number: 5227000 | Number of duplications: 2\n",
            "Phone number: 9658474 | Number of duplications: 2\n",
            "Phone number: 7918253 | Number of duplications: 2\n",
            "Phone number: 9249728 | Number of duplications: 2\n",
            "Phone number: 9193297 | Number of duplications: 2\n",
            "Phone number: 1250780 | Number of duplications: 2\n",
            "Phone number: 9141860 | Number of duplications: 2\n",
            "Phone number: 1111269 | Number of duplications: 2\n",
            "Phone number: 9057860 | Number of duplications: 2\n",
            "Phone number: 8459276 | Number of duplications: 2\n",
            "Phone number: 7202288 | Number of duplications: 2\n",
            "Phone number: 9074917 | Number of duplications: 2\n",
            "Phone number: 5854058 | Number of duplications: 2\n",
            "Phone number: 6767705 | Number of duplications: 2\n",
            "Phone number: 9024214 | Number of duplications: 2\n",
            "Phone number: 9883471 | Number of duplications: 2\n",
            "Phone number: 8445697 | Number of duplications: 2\n",
            "Phone number: 5931061 | Number of duplications: 2\n",
            "Phone number: 3297818 | Number of duplications: 2\n",
            "Phone number: 6346206 | Number of duplications: 2\n",
            "Phone number: 9997623 | Number of duplications: 2\n",
            "Phone number: 2897597 | Number of duplications: 2\n",
            "Phone number: 6852870 | Number of duplications: 2\n",
            "Phone number: 9926956 | Number of duplications: 2\n",
            "Phone number: 9623369 | Number of duplications: 2\n",
            "Phone number: 9640778 | Number of duplications: 2\n",
            "Phone number: 1870339 | Number of duplications: 2\n",
            "Phone number: 1952221 | Number of duplications: 2\n",
            "Phone number: 7161748 | Number of duplications: 2\n",
            "Phone number: 1477133 | Number of duplications: 2\n",
            "Phone number: 1052239 | Number of duplications: 2\n",
            "Phone number: 6153583 | Number of duplications: 2\n",
            "Phone number: 2927833 | Number of duplications: 2\n",
            "Phone number: 5461910 | Number of duplications: 2\n",
            "Phone number: 9898176 | Number of duplications: 2\n",
            "Phone number: 5794437 | Number of duplications: 2\n",
            "Phone number: 8923882 | Number of duplications: 2\n",
            "Phone number: 4455703 | Number of duplications: 2\n",
            "Phone number: 2335840 | Number of duplications: 2\n",
            "Phone number: 9292786 | Number of duplications: 2\n",
            "Phone number: 3325274 | Number of duplications: 2\n",
            "Phone number: 2601785 | Number of duplications: 2\n",
            "Phone number: 5970829 | Number of duplications: 2\n",
            "Phone number: 8891929 | Number of duplications: 2\n",
            "Phone number: 9990104 | Number of duplications: 2\n",
            "Phone number: 1819863 | Number of duplications: 2\n",
            "Phone number: 9862126 | Number of duplications: 2\n",
            "Phone number: 9588738 | Number of duplications: 2\n",
            "Phone number: 9054448 | Number of duplications: 2\n",
            "Phone number: 9753494 | Number of duplications: 2\n",
            "Phone number: 4353024 | Number of duplications: 2\n",
            "Phone number: 9397539 | Number of duplications: 2\n",
            "Phone number: 6605144 | Number of duplications: 2\n",
            "Phone number: 9441293 | Number of duplications: 2\n",
            "Phone number: 1757627 | Number of duplications: 2\n",
            "Phone number: 9400992 | Number of duplications: 2\n",
            "Phone number: 9173403 | Number of duplications: 2\n",
            "Phone number: 9862313 | Number of duplications: 2\n",
            "Phone number: 1336260 | Number of duplications: 2\n",
            "Phone number: 1987053 | Number of duplications: 2\n",
            "Phone number: 8904593 | Number of duplications: 2\n",
            "Phone number: 3849098 | Number of duplications: 2\n",
            "Phone number: 4949010 | Number of duplications: 2\n",
            "Phone number: 9874530 | Number of duplications: 2\n",
            "Phone number: 6668488 | Number of duplications: 2\n",
            "Phone number: 7310451 | Number of duplications: 2\n",
            "Phone number: 3265698 | Number of duplications: 2\n",
            "Phone number: 2544556 | Number of duplications: 2\n",
            "Phone number: 1503069 | Number of duplications: 2\n",
            "Phone number: 9342755 | Number of duplications: 2\n",
            "Phone number: 8801242 | Number of duplications: 2\n",
            "Phone number: 7948360 | Number of duplications: 2\n",
            "Phone number: 9129415 | Number of duplications: 2\n",
            "Phone number: 9655407 | Number of duplications: 2\n",
            "Phone number: 1285398 | Number of duplications: 2\n",
            "Phone number: 4267198 | Number of duplications: 2\n",
            "Phone number: 1117747 | Number of duplications: 2\n",
            "Phone number: 1710325 | Number of duplications: 2\n",
            "Phone number: 8947948 | Number of duplications: 2\n",
            "Phone number: 6345995 | Number of duplications: 2\n",
            "Phone number: 3926154 | Number of duplications: 2\n",
            "Phone number: 3042453 | Number of duplications: 2\n",
            "Phone number: 7487931 | Number of duplications: 2\n",
            "Phone number: 5124486 | Number of duplications: 2\n",
            "Phone number: 1861489 | Number of duplications: 2\n",
            "Phone number: 9686518 | Number of duplications: 2\n",
            "Phone number: 5692522 | Number of duplications: 2\n",
            "Phone number: 7926258 | Number of duplications: 2\n",
            "Phone number: 9605433 | Number of duplications: 2\n",
            "Phone number: 9955259 | Number of duplications: 2\n",
            "Phone number: 3209528 | Number of duplications: 2\n",
            "Phone number: 9932420 | Number of duplications: 2\n",
            "Phone number: 3529605 | Number of duplications: 2\n",
            "Phone number: 9998063 | Number of duplications: 2\n",
            "Phone number: 9191858 | Number of duplications: 2\n",
            "Phone number: 7046599 | Number of duplications: 2\n",
            "Phone number: 2044545 | Number of duplications: 2\n",
            "Phone number: 9904087 | Number of duplications: 2\n",
            "Phone number: 7124887 | Number of duplications: 2\n",
            "Phone number: 7085911 | Number of duplications: 2\n",
            "Phone number: 9831902 | Number of duplications: 2\n",
            "Phone number: 8804394 | Number of duplications: 2\n",
            "Phone number: 9433415 | Number of duplications: 2\n",
            "Phone number: 1641105 | Number of duplications: 2\n",
            "Phone number: 4591122 | Number of duplications: 2\n",
            "Phone number: 7797966 | Number of duplications: 2\n",
            "Phone number: 4830818 | Number of duplications: 2\n",
            "Phone number: 9776243 | Number of duplications: 2\n",
            "Phone number: 7303932 | Number of duplications: 2\n",
            "Phone number: 9459822 | Number of duplications: 2\n",
            "Phone number: 2120280 | Number of duplications: 2\n",
            "Phone number: 2027043 | Number of duplications: 2\n",
            "Phone number: 9664635 | Number of duplications: 2\n",
            "Phone number: 7155006 | Number of duplications: 2\n",
            "Phone number: 9315136 | Number of duplications: 2\n",
            "Phone number: 5428631 | Number of duplications: 2\n",
            "Phone number: 9803866 | Number of duplications: 2\n",
            "Phone number: 9874771 | Number of duplications: 2\n",
            "Phone number: 4838792 | Number of duplications: 2\n",
            "Phone number: 5495799 | Number of duplications: 2\n",
            "Phone number: 9815362 | Number of duplications: 2\n",
            "Phone number: 6229534 | Number of duplications: 2\n",
            "Phone number: 3023511 | Number of duplications: 2\n",
            "Phone number: 2926007 | Number of duplications: 2\n",
            "Phone number: 9608467 | Number of duplications: 2\n",
            "Phone number: 9034079 | Number of duplications: 2\n",
            "Phone number: 9950704 | Number of duplications: 2\n",
            "Phone number: 1751594 | Number of duplications: 2\n",
            "Phone number: 1937925 | Number of duplications: 2\n",
            "Phone number: 8677694 | Number of duplications: 2\n",
            "Phone number: 7712785 | Number of duplications: 2\n",
            "Phone number: 9176602 | Number of duplications: 2\n",
            "Phone number: 9937563 | Number of duplications: 2\n",
            "Phone number: 3914487 | Number of duplications: 2\n",
            "Phone number: 5783060 | Number of duplications: 2\n",
            "Phone number: 9992845 | Number of duplications: 2\n",
            "Phone number: 1391228 | Number of duplications: 2\n",
            "Phone number: 2799387 | Number of duplications: 2\n",
            "Phone number: 9604403 | Number of duplications: 2\n",
            "Phone number: 1734496 | Number of duplications: 2\n",
            "Phone number: 9277457 | Number of duplications: 2\n",
            "Phone number: 9836821 | Number of duplications: 2\n",
            "Phone number: 7247709 | Number of duplications: 2\n",
            "Phone number: 6436491 | Number of duplications: 2\n",
            "Phone number: 9711421 | Number of duplications: 2\n",
            "Phone number: 1008771 | Number of duplications: 2\n",
            "Phone number: 7608425 | Number of duplications: 2\n",
            "Phone number: 5083527 | Number of duplications: 2\n",
            "Phone number: 7060774 | Number of duplications: 2\n",
            "Phone number: 9749341 | Number of duplications: 2\n",
            "Phone number: 8592047 | Number of duplications: 2\n",
            "Phone number: 6304440 | Number of duplications: 2\n",
            "Phone number: 3227671 | Number of duplications: 2\n",
            "Phone number: 7165713 | Number of duplications: 2\n",
            "Phone number: 1809396 | Number of duplications: 2\n",
            "Phone number: 7880786 | Number of duplications: 2\n",
            "Phone number: 6390603 | Number of duplications: 2\n",
            "Phone number: 2744097 | Number of duplications: 2\n",
            "Phone number: 5373206 | Number of duplications: 2\n",
            "Phone number: 6275756 | Number of duplications: 2\n",
            "Phone number: 9642889 | Number of duplications: 2\n",
            "Phone number: 7676192 | Number of duplications: 2\n",
            "Phone number: 4644791 | Number of duplications: 2\n",
            "Phone number: 9062323 | Number of duplications: 2\n",
            "Phone number: 2942251 | Number of duplications: 2\n",
            "Phone number: 8491091 | Number of duplications: 2\n",
            "Phone number: 9581537 | Number of duplications: 2\n",
            "Phone number: 7898271 | Number of duplications: 2\n",
            "Phone number: 6160232 | Number of duplications: 2\n",
            "Phone number: 5236548 | Number of duplications: 2\n",
            "Phone number: 8539498 | Number of duplications: 2\n",
            "Phone number: 9412599 | Number of duplications: 2\n",
            "Phone number: 9455417 | Number of duplications: 2\n",
            "Phone number: 8770153 | Number of duplications: 2\n",
            "Phone number: 9348479 | Number of duplications: 2\n",
            "Phone number: 1761104 | Number of duplications: 2\n",
            "Phone number: 1889007 | Number of duplications: 2\n",
            "Phone number: 3003103 | Number of duplications: 2\n",
            "Phone number: 6627398 | Number of duplications: 2\n",
            "Phone number: 6865032 | Number of duplications: 2\n",
            "Phone number: 6213733 | Number of duplications: 2\n",
            "Phone number: 9040158 | Number of duplications: 2\n",
            "Phone number: 4244485 | Number of duplications: 2\n",
            "Phone number: 3747984 | Number of duplications: 2\n",
            "Phone number: 9369457 | Number of duplications: 2\n",
            "Phone number: 5542358 | Number of duplications: 2\n",
            "Phone number: 9518698 | Number of duplications: 2\n",
            "Phone number: 9674595 | Number of duplications: 2\n",
            "Phone number: 9128464 | Number of duplications: 2\n",
            "Phone number: 7613412 | Number of duplications: 2\n",
            "Phone number: 5712357 | Number of duplications: 2\n",
            "Phone number: 9975225 | Number of duplications: 2\n",
            "Phone number: 9353891 | Number of duplications: 2\n",
            "Phone number: 4022539 | Number of duplications: 2\n",
            "Phone number: 4402196 | Number of duplications: 2\n",
            "Phone number: 9406891 | Number of duplications: 2\n",
            "Phone number: 9977050 | Number of duplications: 2\n",
            "Phone number: 3810461 | Number of duplications: 2\n",
            "Phone number: 1665326 | Number of duplications: 2\n",
            "Phone number: 8311907 | Number of duplications: 2\n",
            "Phone number: 8944194 | Number of duplications: 2\n",
            "Phone number: 9849913 | Number of duplications: 2\n",
            "Phone number: 9850263 | Number of duplications: 2\n",
            "Phone number: 7846070 | Number of duplications: 2\n",
            "Phone number: 9548100 | Number of duplications: 2\n",
            "Phone number: 3864988 | Number of duplications: 2\n",
            "Phone number: 4485462 | Number of duplications: 2\n",
            "Phone number: 5829261 | Number of duplications: 2\n",
            "Phone number: 9027467 | Number of duplications: 2\n",
            "Phone number: 3615506 | Number of duplications: 2\n",
            "Phone number: 9752600 | Number of duplications: 2\n",
            "Phone number: 2913194 | Number of duplications: 2\n",
            "Phone number: 9159472 | Number of duplications: 2\n",
            "Phone number: 8488084 | Number of duplications: 2\n",
            "Phone number: 4136986 | Number of duplications: 2\n",
            "Phone number: 1042721 | Number of duplications: 2\n",
            "Phone number: 4081668 | Number of duplications: 2\n",
            "Phone number: 5820261 | Number of duplications: 2\n",
            "Phone number: 9978409 | Number of duplications: 2\n",
            "Phone number: 9106297 | Number of duplications: 2\n",
            "Phone number: 5227124 | Number of duplications: 2\n",
            "Phone number: 5741609 | Number of duplications: 2\n",
            "Phone number: 9066756 | Number of duplications: 2\n",
            "Phone number: 4931438 | Number of duplications: 2\n",
            "Phone number: 1351748 | Number of duplications: 2\n",
            "Phone number: 9785600 | Number of duplications: 2\n",
            "Phone number: 5504822 | Number of duplications: 2\n",
            "Phone number: 9674679 | Number of duplications: 2\n",
            "Phone number: 5781576 | Number of duplications: 2\n",
            "Phone number: 8608732 | Number of duplications: 2\n",
            "Phone number: 9553681 | Number of duplications: 2\n",
            "Phone number: 9627361 | Number of duplications: 2\n",
            "Phone number: 9869883 | Number of duplications: 2\n",
            "Phone number: 9516202 | Number of duplications: 2\n",
            "Phone number: 9969963 | Number of duplications: 2\n",
            "Phone number: 1513240 | Number of duplications: 2\n",
            "Phone number: 9005465 | Number of duplications: 2\n",
            "Phone number: 3318219 | Number of duplications: 2\n",
            "Phone number: 9710917 | Number of duplications: 2\n",
            "Phone number: 4646269 | Number of duplications: 2\n",
            "Phone number: 9231716 | Number of duplications: 2\n",
            "Phone number: 9230605 | Number of duplications: 2\n",
            "Phone number: 9373828 | Number of duplications: 2\n",
            "Phone number: 9658000 | Number of duplications: 2\n",
            "Phone number: 9101354 | Number of duplications: 2\n",
            "Phone number: 9239829 | Number of duplications: 2\n",
            "Phone number: 1327588 | Number of duplications: 2\n",
            "Phone number: 2982359 | Number of duplications: 2\n",
            "Phone number: 4444449 | Number of duplications: 2\n",
            "Phone number: 9803875 | Number of duplications: 2\n",
            "Phone number: 8433322 | Number of duplications: 2\n",
            "Phone number: 6970944 | Number of duplications: 2\n",
            "Phone number: 7466412 | Number of duplications: 2\n",
            "Phone number: 4868403 | Number of duplications: 2\n",
            "Phone number: 3051109 | Number of duplications: 2\n",
            "Phone number: 9514467 | Number of duplications: 2\n",
            "Phone number: 7465445 | Number of duplications: 2\n",
            "Phone number: 4219352 | Number of duplications: 2\n",
            "Phone number: 5159477 | Number of duplications: 2\n",
            "Phone number: 1434577 | Number of duplications: 2\n",
            "Phone number: 5846576 | Number of duplications: 2\n",
            "Phone number: 9535873 | Number of duplications: 2\n",
            "Phone number: 9735308 | Number of duplications: 2\n",
            "Phone number: 3618196 | Number of duplications: 2\n",
            "Phone number: 4193055 | Number of duplications: 2\n",
            "Phone number: 9212092 | Number of duplications: 2\n",
            "Phone number: 3121694 | Number of duplications: 2\n",
            "Phone number: 4955000 | Number of duplications: 2\n",
            "Phone number: 9445412 | Number of duplications: 2\n",
            "Phone number: 7601121 | Number of duplications: 2\n",
            "Phone number: 9771489 | Number of duplications: 2\n",
            "Phone number: 8024287 | Number of duplications: 2\n",
            "Phone number: 5865446 | Number of duplications: 2\n",
            "Phone number: 7241995 | Number of duplications: 2\n",
            "Phone number: 5524042 | Number of duplications: 2\n",
            "Phone number: 4758229 | Number of duplications: 2\n",
            "Phone number: 9260787 | Number of duplications: 2\n",
            "Phone number: 6497059 | Number of duplications: 2\n",
            "Phone number: 5913429 | Number of duplications: 2\n",
            "Phone number: 4999499 | Number of duplications: 2\n",
            "Phone number: 8224947 | Number of duplications: 2\n",
            "Phone number: 9555508 | Number of duplications: 2\n",
            "Phone number: 5627887 | Number of duplications: 2\n",
            "Phone number: 9925291 | Number of duplications: 2\n",
            "Phone number: 9579537 | Number of duplications: 2\n",
            "Phone number: 5321273 | Number of duplications: 2\n",
            "Phone number: 4300061 | Number of duplications: 2\n",
            "Phone number: 9532190 | Number of duplications: 2\n",
            "Phone number: 6873688 | Number of duplications: 2\n",
            "Phone number: 6218266 | Number of duplications: 2\n",
            "Phone number: 9592907 | Number of duplications: 2\n",
            "Phone number: 9043895 | Number of duplications: 2\n",
            "Phone number: 8899968 | Number of duplications: 2\n",
            "Phone number: 2461224 | Number of duplications: 2\n",
            "Phone number: 9793478 | Number of duplications: 2\n",
            "Phone number: 9704435 | Number of duplications: 2\n",
            "Phone number: 4878697 | Number of duplications: 2\n",
            "Phone number: 3398460 | Number of duplications: 2\n",
            "Phone number: 8428884 | Number of duplications: 2\n",
            "Phone number: 5286871 | Number of duplications: 2\n",
            "Phone number: 6913135 | Number of duplications: 2\n",
            "Phone number: 9107607 | Number of duplications: 2\n",
            "Phone number: 7322978 | Number of duplications: 2\n",
            "Phone number: 6638057 | Number of duplications: 2\n",
            "Phone number: 4976640 | Number of duplications: 2\n",
            "Phone number: 1089841 | Number of duplications: 2\n",
            "Phone number: 9067590 | Number of duplications: 2\n",
            "Phone number: 3857422 | Number of duplications: 2\n",
            "Phone number: 9205084 | Number of duplications: 2\n",
            "Phone number: 9945392 | Number of duplications: 2\n",
            "Phone number: 9948895 | Number of duplications: 2\n",
            "Phone number: 6650270 | Number of duplications: 2\n",
            "Phone number: 9668951 | Number of duplications: 2\n",
            "Phone number: 5132963 | Number of duplications: 2\n",
            "Phone number: 9783288 | Number of duplications: 2\n",
            "Phone number: 9283691 | Number of duplications: 2\n",
            "Phone number: 2041113 | Number of duplications: 2\n",
            "Phone number: 9992257 | Number of duplications: 2\n",
            "Phone number: 8055155 | Number of duplications: 2\n",
            "Phone number: 3879499 | Number of duplications: 2\n",
            "Phone number: 9332370 | Number of duplications: 2\n",
            "Phone number: 8768980 | Number of duplications: 2\n",
            "Phone number: 9333629 | Number of duplications: 2\n",
            "Phone number: 4591774 | Number of duplications: 2\n",
            "Phone number: 9239244 | Number of duplications: 2\n",
            "Phone number: 9763217 | Number of duplications: 2\n",
            "Phone number: 7844903 | Number of duplications: 2\n",
            "Phone number: 1079748 | Number of duplications: 2\n",
            "Phone number: 9101409 | Number of duplications: 2\n",
            "Phone number: 8054357 | Number of duplications: 2\n",
            "Phone number: 1976859 | Number of duplications: 2\n",
            "Phone number: 7229533 | Number of duplications: 2\n",
            "Phone number: 5605782 | Number of duplications: 2\n",
            "Phone number: 9253478 | Number of duplications: 2\n",
            "Phone number: 1829335 | Number of duplications: 2\n",
            "Phone number: 9590334 | Number of duplications: 2\n",
            "Phone number: 8231917 | Number of duplications: 2\n",
            "Phone number: 8785660 | Number of duplications: 2\n",
            "Phone number: 5768087 | Number of duplications: 2\n",
            "Phone number: 9398037 | Number of duplications: 2\n",
            "Phone number: 7868560 | Number of duplications: 2\n",
            "Phone number: 2614442 | Number of duplications: 2\n",
            "Phone number: 3702747 | Number of duplications: 2\n",
            "Phone number: 2822981 | Number of duplications: 2\n",
            "Phone number: 4806480 | Number of duplications: 2\n",
            "Phone number: 4398317 | Number of duplications: 2\n",
            "Phone number: 9029078 | Number of duplications: 2\n",
            "Phone number: 9518492 | Number of duplications: 2\n",
            "Phone number: 1225858 | Number of duplications: 2\n",
            "Phone number: 9803185 | Number of duplications: 2\n",
            "Phone number: 9078312 | Number of duplications: 2\n",
            "Phone number: 3318159 | Number of duplications: 2\n",
            "Phone number: 4352888 | Number of duplications: 2\n",
            "Phone number: 9206314 | Number of duplications: 2\n",
            "Phone number: 6724915 | Number of duplications: 2\n",
            "Phone number: 6369448 | Number of duplications: 2\n",
            "Phone number: 8442162 | Number of duplications: 2\n",
            "Phone number: 6978060 | Number of duplications: 2\n",
            "Phone number: 1660756 | Number of duplications: 2\n",
            "Phone number: 9974917 | Number of duplications: 2\n",
            "Phone number: 2658178 | Number of duplications: 2\n",
            "Phone number: 3773482 | Number of duplications: 2\n",
            "Phone number: 6773364 | Number of duplications: 2\n",
            "Phone number: 9307666 | Number of duplications: 2\n",
            "Phone number: 9274096 | Number of duplications: 2\n",
            "Phone number: 8181015 | Number of duplications: 2\n",
            "Phone number: 1044564 | Number of duplications: 2\n",
            "Phone number: 8187197 | Number of duplications: 2\n",
            "Phone number: 1617478 | Number of duplications: 2\n",
            "Phone number: 2981496 | Number of duplications: 2\n",
            "Phone number: 4924014 | Number of duplications: 2\n",
            "Phone number: 9234623 | Number of duplications: 2\n",
            "Phone number: 2551464 | Number of duplications: 2\n",
            "Phone number: 9181969 | Number of duplications: 2\n",
            "Phone number: 2546762 | Number of duplications: 2\n",
            "Phone number: 1911751 | Number of duplications: 2\n",
            "Phone number: 4902082 | Number of duplications: 2\n",
            "Phone number: 9419312 | Number of duplications: 2\n",
            "Phone number: 9026907 | Number of duplications: 2\n",
            "Phone number: 5750089 | Number of duplications: 2\n",
            "Phone number: 9791953 | Number of duplications: 2\n",
            "Phone number: 3228136 | Number of duplications: 2\n",
            "Phone number: 5569903 | Number of duplications: 2\n",
            "Phone number: 1181301 | Number of duplications: 2\n",
            "Phone number: 9687274 | Number of duplications: 2\n",
            "Phone number: 4444835 | Number of duplications: 2\n",
            "Phone number: 9234248 | Number of duplications: 2\n",
            "Phone number: 9983701 | Number of duplications: 2\n",
            "Phone number: 4945684 | Number of duplications: 2\n",
            "Phone number: 2870512 | Number of duplications: 2\n",
            "Phone number: 9259690 | Number of duplications: 2\n",
            "Phone number: 9862224 | Number of duplications: 2\n",
            "Phone number: 6180971 | Number of duplications: 2\n",
            "Phone number: 4867621 | Number of duplications: 2\n",
            "Phone number: 5302802 | Number of duplications: 2\n",
            "Phone number: 8397633 | Number of duplications: 2\n",
            "Phone number: 6547653 | Number of duplications: 2\n",
            "Phone number: 5701078 | Number of duplications: 2\n",
            "Phone number: 9028117 | Number of duplications: 2\n",
            "Phone number: 4751541 | Number of duplications: 2\n",
            "Phone number: 3937629 | Number of duplications: 2\n",
            "Phone number: 5728093 | Number of duplications: 2\n",
            "Phone number: 9706598 | Number of duplications: 2\n",
            "Phone number: 8063936 | Number of duplications: 2\n",
            "Phone number: 5382312 | Number of duplications: 2\n",
            "Phone number: 1143291 | Number of duplications: 2\n",
            "Phone number: 2625783 | Number of duplications: 2\n",
            "Phone number: 7729696 | Number of duplications: 2\n",
            "Phone number: 9165968 | Number of duplications: 2\n",
            "Phone number: 8892522 | Number of duplications: 2\n",
            "Phone number: 4883609 | Number of duplications: 2\n",
            "Phone number: 8752193 | Number of duplications: 2\n",
            "Phone number: 3467919 | Number of duplications: 2\n",
            "Phone number: 9418532 | Number of duplications: 2\n",
            "Phone number: 1582388 | Number of duplications: 2\n",
            "Phone number: 5057998 | Number of duplications: 2\n",
            "Phone number: 9720884 | Number of duplications: 2\n",
            "Phone number: 7252199 | Number of duplications: 2\n",
            "Phone number: 8768261 | Number of duplications: 2\n",
            "Phone number: 1966359 | Number of duplications: 2\n",
            "Phone number: 9822156 | Number of duplications: 2\n",
            "Phone number: 2127289 | Number of duplications: 2\n",
            "Phone number: 7070686 | Number of duplications: 2\n",
            "Phone number: 9610738 | Number of duplications: 2\n",
            "Phone number: 6710198 | Number of duplications: 2\n",
            "Phone number: 8126493 | Number of duplications: 2\n",
            "Phone number: 6385858 | Number of duplications: 2\n",
            "Phone number: 9830298 | Number of duplications: 2\n",
            "Phone number: 9490236 | Number of duplications: 2\n",
            "Phone number: 6378051 | Number of duplications: 2\n",
            "Phone number: 3928430 | Number of duplications: 2\n",
            "Phone number: 3198225 | Number of duplications: 2\n",
            "Phone number: 7193027 | Number of duplications: 2\n",
            "Phone number: 7354770 | Number of duplications: 2\n",
            "Phone number: 4663159 | Number of duplications: 2\n",
            "Phone number: 1350015 | Number of duplications: 2\n",
            "Phone number: 9429626 | Number of duplications: 2\n",
            "Phone number: 1866646 | Number of duplications: 2\n",
            "Phone number: 5735047 | Number of duplications: 2\n",
            "Phone number: 6945249 | Number of duplications: 2\n",
            "Phone number: 3413816 | Number of duplications: 2\n",
            "Phone number: 9640407 | Number of duplications: 2\n",
            "Phone number: 9691658 | Number of duplications: 2\n",
            "Phone number: 9749597 | Number of duplications: 2\n",
            "Phone number: 6813088 | Number of duplications: 2\n",
            "Phone number: 9750234 | Number of duplications: 2\n",
            "Phone number: 8123738 | Number of duplications: 2\n",
            "Phone number: 9928222 | Number of duplications: 2\n",
            "Phone number: 6357506 | Number of duplications: 2\n",
            "Phone number: 3669002 | Number of duplications: 2\n",
            "Phone number: 7397281 | Number of duplications: 2\n",
            "Phone number: 9064095 | Number of duplications: 2\n",
            "Phone number: 1249611 | Number of duplications: 2\n",
            "Phone number: 5078375 | Number of duplications: 2\n",
            "Phone number: 9582921 | Number of duplications: 2\n",
            "Phone number: 9747992 | Number of duplications: 2\n",
            "Phone number: 6161151 | Number of duplications: 2\n",
            "Phone number: 6435521 | Number of duplications: 2\n",
            "Phone number: 9766646 | Number of duplications: 2\n",
            "Phone number: 4674030 | Number of duplications: 2\n",
            "Phone number: 4921048 | Number of duplications: 2\n",
            "Phone number: 9678508 | Number of duplications: 2\n",
            "Phone number: 7823658 | Number of duplications: 2\n",
            "Phone number: 9547552 | Number of duplications: 2\n",
            "Phone number: 9300460 | Number of duplications: 2\n",
            "Phone number: 2224854 | Number of duplications: 2\n",
            "Phone number: 4449079 | Number of duplications: 2\n",
            "Phone number: 6332349 | Number of duplications: 2\n",
            "Phone number: 7864242 | Number of duplications: 2\n",
            "Phone number: 8616000 | Number of duplications: 2\n",
            "Phone number: 7075718 | Number of duplications: 2\n",
            "Phone number: 8576609 | Number of duplications: 2\n",
            "Phone number: 1878474 | Number of duplications: 2\n",
            "Phone number: 4832389 | Number of duplications: 2\n",
            "Phone number: 8320658 | Number of duplications: 2\n",
            "Phone number: 5064054 | Number of duplications: 2\n",
            "Phone number: 7021458 | Number of duplications: 2\n",
            "Phone number: 4943149 | Number of duplications: 2\n",
            "Phone number: 6141524 | Number of duplications: 2\n",
            "Phone number: 9985199 | Number of duplications: 2\n",
            "Phone number: 5602872 | Number of duplications: 2\n",
            "Phone number: 5030094 | Number of duplications: 2\n",
            "Phone number: 4583423 | Number of duplications: 2\n",
            "Phone number: 9441873 | Number of duplications: 2\n",
            "Phone number: 9952206 | Number of duplications: 2\n",
            "Phone number: 9847204 | Number of duplications: 2\n",
            "Phone number: 2081035 | Number of duplications: 2\n",
            "Phone number: 5872495 | Number of duplications: 2\n",
            "Phone number: 9808141 | Number of duplications: 2\n",
            "Phone number: 9936364 | Number of duplications: 2\n",
            "Phone number: 7183687 | Number of duplications: 2\n",
            "Phone number: 1593709 | Number of duplications: 2\n",
            "Phone number: 8240454 | Number of duplications: 2\n",
            "Phone number: 2864931 | Number of duplications: 2\n",
            "Phone number: 3262505 | Number of duplications: 2\n",
            "Phone number: 8256194 | Number of duplications: 2\n",
            "Phone number: 9099222 | Number of duplications: 2\n",
            "Phone number: 7748410 | Number of duplications: 2\n",
            "Phone number: 3410398 | Number of duplications: 2\n",
            "Phone number: 5713495 | Number of duplications: 2\n",
            "Phone number: 5582370 | Number of duplications: 2\n",
            "Phone number: 6486034 | Number of duplications: 2\n",
            "Phone number: 5597411 | Number of duplications: 2\n",
            "Phone number: 5501211 | Number of duplications: 2\n",
            "Phone number: 9558620 | Number of duplications: 2\n",
            "Phone number: 1324234 | Number of duplications: 2\n",
            "Phone number: 9047874 | Number of duplications: 2\n",
            "Phone number: 9834357 | Number of duplications: 2\n",
            "Phone number: 8495786 | Number of duplications: 2\n",
            "Phone number: 9938837 | Number of duplications: 2\n",
            "Phone number: 8709192 | Number of duplications: 2\n",
            "Phone number: 9477756 | Number of duplications: 2\n",
            "Phone number: 9644447 | Number of duplications: 2\n",
            "Phone number: 7263294 | Number of duplications: 2\n",
            "Phone number: 1827225 | Number of duplications: 2\n",
            "Phone number: 9184249 | Number of duplications: 2\n",
            "Phone number: 3806118 | Number of duplications: 2\n",
            "Phone number: 2269678 | Number of duplications: 2\n",
            "Phone number: 3638916 | Number of duplications: 2\n",
            "Phone number: 4586790 | Number of duplications: 2\n",
            "Phone number: 9888954 | Number of duplications: 2\n",
            "Phone number: 4137535 | Number of duplications: 2\n",
            "Phone number: 5553080 | Number of duplications: 2\n",
            "Phone number: 9265789 | Number of duplications: 2\n",
            "Phone number: 2747976 | Number of duplications: 2\n",
            "Phone number: 5409460 | Number of duplications: 2\n",
            "Phone number: 4059392 | Number of duplications: 2\n",
            "Phone number: 9700858 | Number of duplications: 2\n",
            "Phone number: 5195132 | Number of duplications: 2\n",
            "Phone number: 1681077 | Number of duplications: 2\n",
            "Phone number: 9174966 | Number of duplications: 2\n",
            "Phone number: 1805448 | Number of duplications: 2\n",
            "Phone number: 7328926 | Number of duplications: 2\n",
            "Phone number: 1362984 | Number of duplications: 2\n",
            "Phone number: 6699263 | Number of duplications: 2\n",
            "Phone number: 7238890 | Number of duplications: 2\n",
            "Phone number: 3853391 | Number of duplications: 2\n",
            "Phone number: 9072088 | Number of duplications: 2\n",
            "Phone number: 4944237 | Number of duplications: 2\n",
            "Phone number: 2704972 | Number of duplications: 2\n",
            "Phone number: 3192447 | Number of duplications: 2\n",
            "Phone number: 9757717 | Number of duplications: 2\n",
            "Phone number: 6054411 | Number of duplications: 2\n",
            "Phone number: 1132223 | Number of duplications: 2\n",
            "Phone number: 4998990 | Number of duplications: 2\n",
            "Phone number: 7023152 | Number of duplications: 2\n",
            "Phone number: 8350387 | Number of duplications: 2\n",
            "Phone number: 9538185 | Number of duplications: 2\n",
            "Phone number: 1144229 | Number of duplications: 2\n",
            "Phone number: 9397879 | Number of duplications: 2\n",
            "Phone number: 8557363 | Number of duplications: 2\n",
            "Phone number: 1074984 | Number of duplications: 2\n",
            "Phone number: 3727837 | Number of duplications: 2\n",
            "Phone number: 5110486 | Number of duplications: 2\n",
            "Phone number: 2343608 | Number of duplications: 2\n",
            "Phone number: 5282189 | Number of duplications: 2\n",
            "Phone number: 7819506 | Number of duplications: 2\n",
            "Phone number: 2409601 | Number of duplications: 2\n",
            "Phone number: 9015739 | Number of duplications: 2\n",
            "Phone number: 9798984 | Number of duplications: 2\n",
            "Phone number: 1060218 | Number of duplications: 2\n",
            "Phone number: 9879198 | Number of duplications: 2\n",
            "Phone number: 2505221 | Number of duplications: 2\n",
            "Phone number: 8125900 | Number of duplications: 2\n",
            "Phone number: 4292338 | Number of duplications: 2\n",
            "Phone number: 4807502 | Number of duplications: 2\n",
            "Phone number: 2138451 | Number of duplications: 2\n",
            "Phone number: 1515772 | Number of duplications: 2\n",
            "Phone number: 2552503 | Number of duplications: 2\n",
            "Phone number: 9231495 | Number of duplications: 2\n",
            "Phone number: 9168741 | Number of duplications: 2\n",
            "Phone number: 8314525 | Number of duplications: 2\n",
            "Phone number: 9831957 | Number of duplications: 2\n",
            "Phone number: 8287615 | Number of duplications: 2\n",
            "Phone number: 5900507 | Number of duplications: 2\n",
            "Phone number: 6030162 | Number of duplications: 2\n",
            "Phone number: 5703767 | Number of duplications: 2\n",
            "Phone number: 5385726 | Number of duplications: 2\n",
            "Phone number: 2033408 | Number of duplications: 2\n",
            "Phone number: 9433753 | Number of duplications: 2\n",
            "Phone number: 9105513 | Number of duplications: 2\n",
            "Phone number: 4832017 | Number of duplications: 2\n",
            "Phone number: 6871534 | Number of duplications: 2\n",
            "Phone number: 7047336 | Number of duplications: 2\n",
            "Phone number: 8082483 | Number of duplications: 2\n",
            "Phone number: 7053454 | Number of duplications: 2\n",
            "Phone number: 9325876 | Number of duplications: 2\n",
            "Phone number: 8711134 | Number of duplications: 2\n",
            "Phone number: 1109690 | Number of duplications: 2\n",
            "Phone number: 8891961 | Number of duplications: 2\n",
            "Phone number: 4745381 | Number of duplications: 2\n",
            "Phone number: 3568691 | Number of duplications: 2\n",
            "Phone number: 5001630 | Number of duplications: 2\n",
            "Phone number: 9381241 | Number of duplications: 2\n",
            "Phone number: 9947581 | Number of duplications: 2\n",
            "Phone number: 4734192 | Number of duplications: 2\n",
            "Phone number: 9386117 | Number of duplications: 2\n",
            "Phone number: 3849830 | Number of duplications: 2\n",
            "Phone number: 7669213 | Number of duplications: 2\n",
            "Phone number: 9493820 | Number of duplications: 2\n",
            "Phone number: 9287569 | Number of duplications: 2\n",
            "Phone number: 6899085 | Number of duplications: 2\n",
            "Phone number: 5980241 | Number of duplications: 2\n",
            "Phone number: 9720831 | Number of duplications: 2\n",
            "Phone number: 3980286 | Number of duplications: 2\n",
            "Phone number: 5334154 | Number of duplications: 2\n",
            "Phone number: 1332281 | Number of duplications: 2\n",
            "Phone number: 8067731 | Number of duplications: 2\n",
            "Phone number: 5422203 | Number of duplications: 2\n",
            "Phone number: 9139576 | Number of duplications: 2\n",
            "Phone number: 8236664 | Number of duplications: 2\n",
            "Phone number: 3640512 | Number of duplications: 2\n",
            "Phone number: 7462207 | Number of duplications: 2\n",
            "Phone number: 1294661 | Number of duplications: 2\n",
            "Phone number: 9980984 | Number of duplications: 2\n",
            "Phone number: 5995022 | Number of duplications: 2\n",
            "Phone number: 6363502 | Number of duplications: 2\n",
            "Phone number: 7606287 | Number of duplications: 2\n",
            "Phone number: 1044573 | Number of duplications: 2\n",
            "Phone number: 9519472 | Number of duplications: 2\n",
            "Phone number: 9536497 | Number of duplications: 2\n",
            "Phone number: 9809426 | Number of duplications: 2\n",
            "Phone number: 4462209 | Number of duplications: 2\n",
            "Phone number: 9927591 | Number of duplications: 2\n",
            "Phone number: 7036252 | Number of duplications: 2\n",
            "Phone number: 3183895 | Number of duplications: 2\n",
            "Phone number: 7048296 | Number of duplications: 2\n",
            "Phone number: 4701470 | Number of duplications: 2\n",
            "Phone number: 9677811 | Number of duplications: 2\n",
            "Phone number: 3454556 | Number of duplications: 2\n",
            "Phone number: 7027156 | Number of duplications: 2\n",
            "Phone number: 9110390 | Number of duplications: 2\n",
            "Phone number: 2302801 | Number of duplications: 2\n",
            "Phone number: 5121430 | Number of duplications: 2\n",
            "Phone number: 9750456 | Number of duplications: 2\n",
            "Phone number: 3833357 | Number of duplications: 2\n",
            "Phone number: 9860674 | Number of duplications: 2\n",
            "[5878766, 1644266, 9037623, 3568617, 4062627, 9417989, 4456136, 5814436, 2322726, 9811781, 6403818, 9461357, 3729289, 2920034, 2452315, 1237628, 7650252, 9544497, 1136866, 8117156, 1645235, 5627415, 5675894, 7131854, 7188884, 9325099, 1691021, 9765922, 9638256, 8904249, 4098292, 1235849, 3802839, 9801861, 7205932, 1798922, 1443360, 6470760, 9483944, 9357110, 9759417, 3955357, 4610299, 9124310, 5193262, 9592331, 1852447, 4514453, 2103822, 9913434, 9452384, 6622764, 2391826, 9345063, 2204751, 5923796, 3800739, 9237997, 8221641, 5422466, 5878097, 8992419, 3088143, 7096599, 4719438, 3571845, 2578838, 9999356, 9066886, 9753275, 7034306, 9497128, 4859742, 2945358, 9121954, 9150870, 7885940, 2377984, 6217890, 9744001, 6650835, 9927125, 7826692, 2631575, 8231339, 9324130, 3525320, 9111296, 9298307, 7226924, 3767718, 6445325, 9305739, 2386482, 9695400, 1979121, 4541507, 1310409, 9579426, 5291218, 4395579, 5053278, 9924227, 8008898, 9047348, 3940620, 9971715, 6574422, 9382027, 7905030, 5076611, 9576444, 5775820, 5824798, 8226098, 3921210, 5200177, 3339994, 5747795, 8553510, 6657317, 5515660, 9797636, 9212708, 2598909, 6320144, 9417773, 9048555, 9952665, 9895899, 9943353, 9059781, 7855682, 3981507, 4143807, 3809807, 3261540, 8203676, 6392473, 7356957, 4693673, 9506756, 1789196, 6382894, 2493135, 8422655, 5252085, 2320773, 2996969, 9086103, 1086223, 7772980, 8742769, 7453023, 3392090, 9899462, 4877604, 6210745, 8159228, 6369839, 2628904, 9166185, 1882304, 9379772, 9168767, 2553199, 1109026, 1209472, 9461841, 9257914, 2748842, 7942209, 9543514, 4718754, 6959182, 5117543, 1046762, 5577482, 3870173, 5795626, 3145977, 9974773, 9200041, 9274342, 2035310, 1804549, 8865727, 8511462, 2987734, 9177670, 9566070, 5506564, 9200124, 3848625, 7733968, 5872079, 1973257, 9633387, 2511962, 1619040, 4697567, 4732301, 8512856, 5037889, 9339419, 5206486, 4081943, 4103140, 8031140, 1504810, 4209934, 9797974, 1337863, 4698182, 8194261, 9235252, 9514809, 4277323, 9290698, 5795318, 4896339, 7399570, 2413229, 6980757, 9339582, 9710068, 9693437, 3451774, 5624914, 9968771, 3387236, 6352561, 9984689, 1968515, 7889855, 2409794, 6005403, 9395027, 3815480, 6351461, 5986563, 1550967, 8862269, 9320782, 4872029, 7018217, 3401869, 9122991, 4057151, 3175789, 6663406, 9400329, 1865488, 9708902, 5982256, 6818397, 2429527, 1853820, 9701844, 7010378, 9882794, 7844743, 4262777, 9048219, 9021154, 9907715, 9562191, 7845476, 7885626, 7471357, 7555906, 6493594, 2609431, 4438703, 4114700, 6443565, 4804222, 1804717, 9491193, 3871651, 2749160, 6730746, 3263770, 8522767, 2549425, 9971642, 3198774, 9711012, 9994557, 7768638, 6939759, 4434915, 6503601, 7285449, 7454671, 8718060, 9427409, 3954819, 2227643, 1275744, 1679202, 7122898, 3774260, 2078343, 6995997, 8484707, 2931837, 8903550, 1701149, 1598086, 9750219, 3531749, 9248807, 1636325, 5602555, 5862198, 9271249, 4691786, 9576234, 9393936, 9754990, 4818345, 9873190, 8950855, 1889235, 9105254, 4665324, 8096773, 6676802, 9194765, 1163025, 4908865, 9857004, 5983040, 6957192, 7430806, 9571606, 9646540, 8999377, 2834708, 4106546, 9365944, 2621879, 8339005, 9571582, 9034961, 9796926, 6677008, 9401992, 1362853, 9257420, 7438904, 5570845, 9838239, 6826281, 9495670, 9124091, 5083926, 9323648, 9492801, 5144527, 5227000, 9658474, 7918253, 9249728, 9193297, 1250780, 9141860, 1111269, 9057860, 8459276, 7202288, 9074917, 5854058, 6767705, 9024214, 9883471, 8445697, 5931061, 3297818, 6346206, 9997623, 2897597, 6852870, 9926956, 9623369, 9640778, 1870339, 1952221, 7161748, 1477133, 1052239, 6153583, 2927833, 5461910, 9898176, 5794437, 8923882, 4455703, 2335840, 9292786, 3325274, 2601785, 5970829, 8891929, 9990104, 1819863, 9862126, 9588738, 9054448, 9753494, 4353024, 9397539, 6605144, 9441293, 1757627, 9400992, 9173403, 9862313, 1336260, 1987053, 8904593, 3849098, 4949010, 9874530, 6668488, 7310451, 3265698, 2544556, 1503069, 9342755, 8801242, 7948360, 9129415, 9655407, 1285398, 4267198, 1117747, 1710325, 8947948, 6345995, 3926154, 3042453, 7487931, 5124486, 1861489, 9686518, 5692522, 7926258, 9605433, 9955259, 3209528, 9932420, 3529605, 9998063, 9191858, 7046599, 2044545, 9904087, 7124887, 7085911, 9831902, 8804394, 9433415, 1641105, 4591122, 7797966, 4830818, 9776243, 7303932, 9459822, 2120280, 2027043, 9664635, 7155006, 9315136, 5428631, 9803866, 9874771, 4838792, 5495799, 9815362, 6229534, 3023511, 2926007, 9608467, 9034079, 9950704, 1751594, 1937925, 8677694, 7712785, 9176602, 9937563, 3914487, 5783060, 9992845, 1391228, 2799387, 9604403, 1734496, 9277457, 9836821, 7247709, 6436491, 9711421, 1008771, 7608425, 5083527, 7060774, 9749341, 8592047, 6304440, 3227671, 7165713, 1809396, 7880786, 6390603, 2744097, 5373206, 6275756, 9642889, 7676192, 4644791, 9062323, 2942251, 8491091, 9581537, 7898271, 6160232, 5236548, 8539498, 9412599, 9455417, 8770153, 9348479, 1761104, 1889007, 3003103, 6627398, 6865032, 6213733, 9040158, 4244485, 3747984, 9369457, 5542358, 9518698, 9674595, 9128464, 7613412, 5712357, 9975225, 9353891, 4022539, 4402196, 9406891, 9977050, 3810461, 1665326, 8311907, 8944194, 9849913, 9850263, 7846070, 9548100, 3864988, 4485462, 5829261, 9027467, 3615506, 9752600, 2913194, 9159472, 8488084, 4136986, 1042721, 4081668, 5820261, 9978409, 9106297, 5227124, 5741609, 9066756, 4931438, 1351748, 9785600, 5504822, 9674679, 5781576, 8608732, 9553681, 9627361, 9869883, 9516202, 9969963, 1513240, 9005465, 3318219, 9710917, 4646269, 9231716, 9230605, 9373828, 9658000, 9101354, 9239829, 1327588, 2982359, 4444449, 9803875, 8433322, 6970944, 7466412, 4868403, 3051109, 9514467, 7465445, 4219352, 5159477, 1434577, 5846576, 9535873, 9735308, 3618196, 4193055, 9212092, 3121694, 4955000, 9445412, 7601121, 9771489, 8024287, 5865446, 7241995, 5524042, 4758229, 9260787, 6497059, 5913429, 4999499, 8224947, 9555508, 5627887, 9925291, 9579537, 5321273, 4300061, 9532190, 6873688, 6218266, 9592907, 9043895, 8899968, 2461224, 9793478, 9704435, 4878697, 3398460, 8428884, 5286871, 6913135, 9107607, 7322978, 6638057, 4976640, 1089841, 9067590, 3857422, 9205084, 9945392, 9948895, 6650270, 9668951, 5132963, 9783288, 9283691, 2041113, 9992257, 8055155, 3879499, 9332370, 8768980, 9333629, 4591774, 9239244, 9763217, 7844903, 1079748, 9101409, 8054357, 1976859, 7229533, 5605782, 9253478, 1829335, 9590334, 8231917, 8785660, 5768087, 9398037, 7868560, 2614442, 3702747, 2822981, 4806480, 4398317, 9029078, 9518492, 1225858, 9803185, 9078312, 3318159, 4352888, 9206314, 6724915, 6369448, 8442162, 6978060, 1660756, 9974917, 2658178, 3773482, 6773364, 9307666, 9274096, 8181015, 1044564, 8187197, 1617478, 2981496, 4924014, 9234623, 2551464, 9181969, 2546762, 1911751, 4902082, 9419312, 9026907, 5750089, 9791953, 3228136, 5569903, 1181301, 9687274, 4444835, 9234248, 9983701, 4945684, 2870512, 9259690, 9862224, 6180971, 4867621, 5302802, 8397633, 6547653, 5701078, 9028117, 4751541, 3937629, 5728093, 9706598, 8063936, 5382312, 1143291, 2625783, 7729696, 9165968, 8892522, 4883609, 8752193, 3467919, 9418532, 1582388, 5057998, 9720884, 7252199, 8768261, 1966359, 9822156, 2127289, 7070686, 9610738, 6710198, 8126493, 6385858, 9830298, 9490236, 6378051, 3928430, 3198225, 7193027, 7354770, 4663159, 1350015, 9429626, 1866646, 5735047, 6945249, 3413816, 9640407, 9691658, 9749597, 6813088, 9750234, 8123738, 9928222, 6357506, 3669002, 7397281, 9064095, 1249611, 5078375, 9582921, 9747992, 6161151, 6435521, 9766646, 4674030, 4921048, 9678508, 7823658, 9547552, 9300460, 2224854, 4449079, 6332349, 7864242, 8616000, 7075718, 8576609, 1878474, 4832389, 8320658, 5064054, 7021458, 4943149, 6141524, 9985199, 5602872, 5030094, 4583423, 9441873, 9952206, 9847204, 2081035, 5872495, 9808141, 9936364, 7183687, 1593709, 8240454, 2864931, 3262505, 8256194, 9099222, 7748410, 3410398, 5713495, 5582370, 6486034, 5597411, 5501211, 9558620, 1324234, 9047874, 9834357, 8495786, 9938837, 8709192, 9477756, 9644447, 7263294, 1827225, 9184249, 3806118, 2269678, 3638916, 4586790, 9888954, 4137535, 5553080, 9265789, 2747976, 5409460, 4059392, 9700858, 5195132, 1681077, 9174966, 1805448, 7328926, 1362984, 6699263, 7238890, 3853391, 9072088, 4944237, 2704972, 3192447, 9757717, 6054411, 1132223, 4998990, 7023152, 8350387, 9538185, 1144229, 9397879, 8557363, 1074984, 3727837, 5110486, 2343608, 5282189, 7819506, 2409601, 9015739, 9798984, 1060218, 9879198, 2505221, 8125900, 4292338, 4807502, 2138451, 1515772, 2552503, 9231495, 9168741, 8314525, 9831957, 8287615, 5900507, 6030162, 5703767, 5385726, 2033408, 9433753, 9105513, 4832017, 6871534, 7047336, 8082483, 7053454, 9325876, 8711134, 1109690, 8891961, 4745381, 3568691, 5001630, 9381241, 9947581, 4734192, 9386117, 3849830, 7669213, 9493820, 9287569, 6899085, 5980241, 9720831, 3980286, 5334154, 1332281, 8067731, 5422203, 9139576, 8236664, 3640512, 7462207, 1294661, 9980984, 5995022, 6363502, 7606287, 1044573, 9519472, 9536497, 9809426, 4462209, 9927591, 7036252, 3183895, 7048296, 4701470, 9677811, 3454556, 7027156, 9110390, 2302801, 5121430, 9750456, 3833357, 9860674]\n",
            "986\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valid_[valid_['PHONE_NUMBER'] == 1644266]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 852
        },
        "id": "r8tMcloz7tu9",
        "outputId": "a3d51a7e-3c7b-433f-ce51-da38701e57a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "96576   196576  2023-02-16 03:00:00  2023-02-16 03:00:45  79515827.0   \n",
              "97195   197195  2023-02-16 03:00:00  2023-02-16 03:00:45  71786357.0   \n",
              "97330   197330  2023-02-16 03:00:00  2023-02-16 03:00:45  60718603.0   \n",
              "97819   197819  2023-02-16 03:00:00  2023-02-16 03:00:45  72365338.0   \n",
              "98067   198067  2023-02-16 03:00:00  2023-02-16 03:00:45  40481726.0   \n",
              "...        ...                  ...                  ...         ...   \n",
              "138303  238303  2023-03-08 03:00:00  2023-03-08 03:00:45  62258830.0   \n",
              "138314  238314  2023-03-08 03:00:00  2023-03-08 03:00:45  62242799.0   \n",
              "138626  238626  2023-03-08 03:00:00  2023-03-08 03:00:45  40287173.0   \n",
              "138658  238658  2023-03-08 03:00:00  2023-03-08 03:00:45  73355120.0   \n",
              "139408  239408  2023-03-08 03:00:00  2023-03-08 03:00:45  40708671.0   \n",
              "\n",
              "        PARTNER_P8N  BIRTH_DATE FIRST_NAME  LAST_NAME  \\\n",
              "96576    53765711.0  1993-03-17      Alexa   Erakovic   \n",
              "97195    53765711.0  1975-08-22      Gavin   Thompson   \n",
              "97330    53765711.0  1977-11-12      Royan  Alexander   \n",
              "97819    53765711.0  1985-03-11     WESLEY     Barber   \n",
              "98067    53765711.0  1991-10-07       RYAN      Kumar   \n",
              "...             ...         ...        ...        ...   \n",
              "138303   53765711.0  1979-12-29      sarah    Douglas   \n",
              "138314   53765711.0  1993-06-06   Jennifer     Galang   \n",
              "138626   53765711.0  1992-09-28  Mackenzie      Sidhu   \n",
              "138658   53765711.0  1996-05-24    matthew  McConnell   \n",
              "139408   53765711.0  1986-07-29    karmvir     Holmes   \n",
              "\n",
              "                           STREET_NAME   MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "96576                169 Lawson Stream              AURORA      L4G7T9   \n",
              "97195                    641 Mason Way         ELPHINSTONE      R0J0N0   \n",
              "97330        7191 Teresa Fort Suite 44  CANTON DES BASQUES      E1X3J6   \n",
              "97819   6213 Emily Trafficway Apt. 295    SAULT STE. MARIE      P6B5W5   \n",
              "98067     298 Samantha Fords Suite 773             WINDSOR      J1S2J9   \n",
              "...                                ...                 ...         ...   \n",
              "138303              289 Matthew Lights              DIEPPE      E1A0S7   \n",
              "138314        85 Brown Manors Apt. 497        SAINT-JEROME      J7Y4R2   \n",
              "138626               615 Mcdaniel Mews              SURREY      V3W3T3   \n",
              "138658         859 Lynn Field Apt. 159             CALGARY      T2K5S9   \n",
              "139408             96911 Mark Overpass            COALDALE      T1M1H8   \n",
              "\n",
              "        PROVINCE__ID                         EMAIL  HOME_AREA_CODE  \\\n",
              "96576            6.0      a.erakovic98@outlook.com           226.0   \n",
              "97195            7.0       gavinthompson@gmail.com           226.0   \n",
              "97330            3.0       r_alexander57@gmail.com           226.0   \n",
              "97819            6.0   wesley.barber63@outlook.com           226.0   \n",
              "98067            5.0           r_kumar82@gmail.com           226.0   \n",
              "...              ...                           ...             ...   \n",
              "138303           3.0      douglas42sarah@gmail.com           226.0   \n",
              "138314           5.0           jgalang48@gmail.com           226.0   \n",
              "138626          10.0    sidhumackenzie37@gmail.com           226.0   \n",
              "138658           9.0  mcconnell70matthew@gmail.com           226.0   \n",
              "139408           9.0     holmes.karmvir7@gmail.com           226.0   \n",
              "\n",
              "        PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "96576      1644266.0                 E        125  \n",
              "97195      1644266.0                 E        125  \n",
              "97330      1644266.0                 E        125  \n",
              "97819      1644266.0                UE        400  \n",
              "98067      1644266.0                 E        750  \n",
              "...              ...               ...        ...  \n",
              "138303     1644266.0                 E          0  \n",
              "138314     1644266.0                UE          0  \n",
              "138626     1644266.0                 E          0  \n",
              "138658     1644266.0                 E          0  \n",
              "139408     1644266.0                 E          0  \n",
              "\n",
              "[66 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-15b3ad44-eb91-479d-b31c-3a137f29b886\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>96576</th>\n",
              "      <td>196576</td>\n",
              "      <td>2023-02-16 03:00:00</td>\n",
              "      <td>2023-02-16 03:00:45</td>\n",
              "      <td>79515827.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1993-03-17</td>\n",
              "      <td>Alexa</td>\n",
              "      <td>Erakovic</td>\n",
              "      <td>169 Lawson Stream</td>\n",
              "      <td>AURORA</td>\n",
              "      <td>L4G7T9</td>\n",
              "      <td>6.0</td>\n",
              "      <td>a.erakovic98@outlook.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97195</th>\n",
              "      <td>197195</td>\n",
              "      <td>2023-02-16 03:00:00</td>\n",
              "      <td>2023-02-16 03:00:45</td>\n",
              "      <td>71786357.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1975-08-22</td>\n",
              "      <td>Gavin</td>\n",
              "      <td>Thompson</td>\n",
              "      <td>641 Mason Way</td>\n",
              "      <td>ELPHINSTONE</td>\n",
              "      <td>R0J0N0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>gavinthompson@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97330</th>\n",
              "      <td>197330</td>\n",
              "      <td>2023-02-16 03:00:00</td>\n",
              "      <td>2023-02-16 03:00:45</td>\n",
              "      <td>60718603.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1977-11-12</td>\n",
              "      <td>Royan</td>\n",
              "      <td>Alexander</td>\n",
              "      <td>7191 Teresa Fort Suite 44</td>\n",
              "      <td>CANTON DES BASQUES</td>\n",
              "      <td>E1X3J6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>r_alexander57@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97819</th>\n",
              "      <td>197819</td>\n",
              "      <td>2023-02-16 03:00:00</td>\n",
              "      <td>2023-02-16 03:00:45</td>\n",
              "      <td>72365338.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1985-03-11</td>\n",
              "      <td>WESLEY</td>\n",
              "      <td>Barber</td>\n",
              "      <td>6213 Emily Trafficway Apt. 295</td>\n",
              "      <td>SAULT STE. MARIE</td>\n",
              "      <td>P6B5W5</td>\n",
              "      <td>6.0</td>\n",
              "      <td>wesley.barber63@outlook.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98067</th>\n",
              "      <td>198067</td>\n",
              "      <td>2023-02-16 03:00:00</td>\n",
              "      <td>2023-02-16 03:00:45</td>\n",
              "      <td>40481726.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1991-10-07</td>\n",
              "      <td>RYAN</td>\n",
              "      <td>Kumar</td>\n",
              "      <td>298 Samantha Fords Suite 773</td>\n",
              "      <td>WINDSOR</td>\n",
              "      <td>J1S2J9</td>\n",
              "      <td>5.0</td>\n",
              "      <td>r_kumar82@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138303</th>\n",
              "      <td>238303</td>\n",
              "      <td>2023-03-08 03:00:00</td>\n",
              "      <td>2023-03-08 03:00:45</td>\n",
              "      <td>62258830.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1979-12-29</td>\n",
              "      <td>sarah</td>\n",
              "      <td>Douglas</td>\n",
              "      <td>289 Matthew Lights</td>\n",
              "      <td>DIEPPE</td>\n",
              "      <td>E1A0S7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>douglas42sarah@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138314</th>\n",
              "      <td>238314</td>\n",
              "      <td>2023-03-08 03:00:00</td>\n",
              "      <td>2023-03-08 03:00:45</td>\n",
              "      <td>62242799.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1993-06-06</td>\n",
              "      <td>Jennifer</td>\n",
              "      <td>Galang</td>\n",
              "      <td>85 Brown Manors Apt. 497</td>\n",
              "      <td>SAINT-JEROME</td>\n",
              "      <td>J7Y4R2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>jgalang48@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138626</th>\n",
              "      <td>238626</td>\n",
              "      <td>2023-03-08 03:00:00</td>\n",
              "      <td>2023-03-08 03:00:45</td>\n",
              "      <td>40287173.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1992-09-28</td>\n",
              "      <td>Mackenzie</td>\n",
              "      <td>Sidhu</td>\n",
              "      <td>615 Mcdaniel Mews</td>\n",
              "      <td>SURREY</td>\n",
              "      <td>V3W3T3</td>\n",
              "      <td>10.0</td>\n",
              "      <td>sidhumackenzie37@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138658</th>\n",
              "      <td>238658</td>\n",
              "      <td>2023-03-08 03:00:00</td>\n",
              "      <td>2023-03-08 03:00:45</td>\n",
              "      <td>73355120.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1996-05-24</td>\n",
              "      <td>matthew</td>\n",
              "      <td>McConnell</td>\n",
              "      <td>859 Lynn Field Apt. 159</td>\n",
              "      <td>CALGARY</td>\n",
              "      <td>T2K5S9</td>\n",
              "      <td>9.0</td>\n",
              "      <td>mcconnell70matthew@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139408</th>\n",
              "      <td>239408</td>\n",
              "      <td>2023-03-08 03:00:00</td>\n",
              "      <td>2023-03-08 03:00:45</td>\n",
              "      <td>40708671.0</td>\n",
              "      <td>53765711.0</td>\n",
              "      <td>1986-07-29</td>\n",
              "      <td>karmvir</td>\n",
              "      <td>Holmes</td>\n",
              "      <td>96911 Mark Overpass</td>\n",
              "      <td>COALDALE</td>\n",
              "      <td>T1M1H8</td>\n",
              "      <td>9.0</td>\n",
              "      <td>holmes.karmvir7@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1644266.0</td>\n",
              "      <td>E</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>66 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15b3ad44-eb91-479d-b31c-3a137f29b886')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-15b3ad44-eb91-479d-b31c-3a137f29b886 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-15b3ad44-eb91-479d-b31c-3a137f29b886');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 277
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Get a series of phone numbers and their counts, excluding 0\n",
        "phone_counts_no0 = valid_[valid_['PHONE_NUMBER'] != 0]['PHONE_NUMBER'].astype(int).value_counts()\n",
        "\n",
        "# Filter the series to include only phone numbers that appear more than three times\n",
        "duplicate_phone_numbers = phone_counts_no0[phone_counts_no0 > 3]\n",
        "\n",
        "# Create a bar chart of the duplicate phone numbers\n",
        "plt.bar(duplicate_phone_numbers.index.astype(str), duplicate_phone_numbers.values)\n",
        "\n",
        "# Set the chart title and labels\n",
        "plt.title(\"Phone Numbers with High Duplications\")\n",
        "plt.xlabel(\"Phone Numbers\")\n",
        "plt.ylabel(\"Number of Duplications\")\n",
        "\n",
        "# Show the chart\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "OLAQImBTD0I3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 533
        },
        "outputId": "becde0dd-4b59-4538-9b70-5ed5bac578cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 842.4x595.44 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a series of phone numbers and their counts\n",
        "p8n_counts = valid_['P8N'].value_counts()\n",
        "\n",
        "# Filter the series to include only phone numbers that appear more than once\n",
        "duplicate_p8n = p8n_counts[p8n_counts > 1]\n",
        "\n",
        "# Print the phone numbers and their counts\n",
        "p8ncount = 0\n",
        "for p8n, count in duplicate_p8n.items():\n",
        "    print(\"P8N:\", p8n, \"| Number of duplications:\", count)\n",
        "    p8ncount+=1\n",
        "\n",
        "print(p8ncount)\n",
        "\n",
        "valid_[valid_['P8N']== 75598754.0]"
      ],
      "metadata": {
        "id": "rEVLnwQgD0NJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "8b4a4c83-61b0-4b06-ac84-2da0ecbe3918"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "P8N: 75598754.0 | Number of duplications: 17\n",
            "P8N: 21748462.0 | Number of duplications: 15\n",
            "P8N: 81789457.0 | Number of duplications: 15\n",
            "P8N: 67457451.0 | Number of duplications: 15\n",
            "P8N: 12054210.0 | Number of duplications: 15\n",
            "P8N: 30174831.0 | Number of duplications: 14\n",
            "P8N: 77967218.0 | Number of duplications: 14\n",
            "P8N: 53424135.0 | Number of duplications: 14\n",
            "P8N: 61055348.0 | Number of duplications: 14\n",
            "P8N: 47569169.0 | Number of duplications: 14\n",
            "P8N: 26755034.0 | Number of duplications: 13\n",
            "P8N: 12217666.0 | Number of duplications: 13\n",
            "P8N: 71731973.0 | Number of duplications: 13\n",
            "P8N: 72107069.0 | Number of duplications: 13\n",
            "P8N: 27421756.0 | Number of duplications: 13\n",
            "P8N: 23099853.0 | Number of duplications: 13\n",
            "P8N: 66118455.0 | Number of duplications: 13\n",
            "P8N: 80651833.0 | Number of duplications: 12\n",
            "P8N: 48115349.0 | Number of duplications: 12\n",
            "P8N: 63059655.0 | Number of duplications: 12\n",
            "P8N: 52503277.0 | Number of duplications: 12\n",
            "P8N: 79503629.0 | Number of duplications: 12\n",
            "P8N: 85000547.0 | Number of duplications: 12\n",
            "P8N: 11327010.0 | Number of duplications: 11\n",
            "P8N: 87246277.0 | Number of duplications: 11\n",
            "P8N: 27795529.0 | Number of duplications: 11\n",
            "P8N: 55407247.0 | Number of duplications: 11\n",
            "P8N: 32307116.0 | Number of duplications: 11\n",
            "P8N: 65668609.0 | Number of duplications: 11\n",
            "P8N: 16273315.0 | Number of duplications: 11\n",
            "P8N: 50201134.0 | Number of duplications: 11\n",
            "P8N: 55772855.0 | Number of duplications: 11\n",
            "P8N: 76063280.0 | Number of duplications: 11\n",
            "P8N: 30039117.0 | Number of duplications: 11\n",
            "P8N: 47643609.0 | Number of duplications: 11\n",
            "P8N: 11515982.0 | Number of duplications: 11\n",
            "P8N: 34583763.0 | Number of duplications: 11\n",
            "P8N: 49962695.0 | Number of duplications: 11\n",
            "P8N: 30846737.0 | Number of duplications: 11\n",
            "P8N: 63675983.0 | Number of duplications: 11\n",
            "P8N: 50358847.0 | Number of duplications: 10\n",
            "P8N: 84548882.0 | Number of duplications: 10\n",
            "P8N: 77506544.0 | Number of duplications: 10\n",
            "P8N: 29393822.0 | Number of duplications: 10\n",
            "P8N: 49273178.0 | Number of duplications: 10\n",
            "P8N: 15008145.0 | Number of duplications: 10\n",
            "P8N: 33544013.0 | Number of duplications: 10\n",
            "P8N: 74189197.0 | Number of duplications: 10\n",
            "P8N: 53398868.0 | Number of duplications: 9\n",
            "P8N: 52847133.0 | Number of duplications: 9\n",
            "P8N: 37985735.0 | Number of duplications: 9\n",
            "P8N: 88217220.0 | Number of duplications: 9\n",
            "P8N: 88544763.0 | Number of duplications: 9\n",
            "P8N: 43950310.0 | Number of duplications: 9\n",
            "P8N: 55902051.0 | Number of duplications: 9\n",
            "P8N: 55986964.0 | Number of duplications: 9\n",
            "P8N: 63303966.0 | Number of duplications: 9\n",
            "P8N: 26132977.0 | Number of duplications: 9\n",
            "P8N: 33603592.0 | Number of duplications: 9\n",
            "P8N: 12840755.0 | Number of duplications: 9\n",
            "P8N: 61948890.0 | Number of duplications: 8\n",
            "P8N: 47861366.0 | Number of duplications: 8\n",
            "P8N: 45675213.0 | Number of duplications: 8\n",
            "P8N: 11980329.0 | Number of duplications: 8\n",
            "P8N: 37111201.0 | Number of duplications: 8\n",
            "P8N: 61184024.0 | Number of duplications: 8\n",
            "P8N: 86759568.0 | Number of duplications: 8\n",
            "P8N: 51085637.0 | Number of duplications: 8\n",
            "P8N: 70102901.0 | Number of duplications: 8\n",
            "P8N: 40277577.0 | Number of duplications: 8\n",
            "P8N: 44999308.0 | Number of duplications: 8\n",
            "P8N: 29912548.0 | Number of duplications: 8\n",
            "P8N: 30682697.0 | Number of duplications: 8\n",
            "P8N: 28596991.0 | Number of duplications: 8\n",
            "P8N: 66329883.0 | Number of duplications: 8\n",
            "P8N: 81076222.0 | Number of duplications: 8\n",
            "P8N: 87719902.0 | Number of duplications: 7\n",
            "P8N: 39947270.0 | Number of duplications: 7\n",
            "P8N: 46112778.0 | Number of duplications: 7\n",
            "P8N: 81275037.0 | Number of duplications: 7\n",
            "P8N: 28544535.0 | Number of duplications: 7\n",
            "P8N: 12880506.0 | Number of duplications: 7\n",
            "P8N: 13365829.0 | Number of duplications: 7\n",
            "P8N: 26345917.0 | Number of duplications: 7\n",
            "P8N: 16538389.0 | Number of duplications: 7\n",
            "P8N: 37767091.0 | Number of duplications: 7\n",
            "P8N: 34869687.0 | Number of duplications: 7\n",
            "P8N: 20141438.0 | Number of duplications: 7\n",
            "P8N: 10546467.0 | Number of duplications: 7\n",
            "P8N: 16153288.0 | Number of duplications: 7\n",
            "P8N: 89691912.0 | Number of duplications: 7\n",
            "P8N: 79845776.0 | Number of duplications: 6\n",
            "P8N: 53121757.0 | Number of duplications: 6\n",
            "P8N: 77297138.0 | Number of duplications: 6\n",
            "P8N: 32150716.0 | Number of duplications: 6\n",
            "P8N: 24645025.0 | Number of duplications: 5\n",
            "P8N: 64910451.0 | Number of duplications: 5\n",
            "P8N: 85480601.0 | Number of duplications: 5\n",
            "P8N: 30036579.0 | Number of duplications: 4\n",
            "P8N: 32824243.0 | Number of duplications: 4\n",
            "P8N: 89895802.0 | Number of duplications: 2\n",
            "P8N: 27922144.0 | Number of duplications: 2\n",
            "P8N: 27188210.0 | Number of duplications: 2\n",
            "P8N: 82445923.0 | Number of duplications: 2\n",
            "P8N: 35181853.0 | Number of duplications: 2\n",
            "P8N: 37294646.0 | Number of duplications: 2\n",
            "P8N: 17933234.0 | Number of duplications: 2\n",
            "P8N: 65078090.0 | Number of duplications: 2\n",
            "P8N: 86360924.0 | Number of duplications: 2\n",
            "P8N: 88011051.0 | Number of duplications: 2\n",
            "P8N: 10228336.0 | Number of duplications: 2\n",
            "P8N: 17972992.0 | Number of duplications: 2\n",
            "P8N: 81930211.0 | Number of duplications: 2\n",
            "P8N: 31995139.0 | Number of duplications: 2\n",
            "P8N: 58282388.0 | Number of duplications: 2\n",
            "P8N: 18922415.0 | Number of duplications: 2\n",
            "P8N: 27651506.0 | Number of duplications: 2\n",
            "P8N: 11521860.0 | Number of duplications: 2\n",
            "P8N: 19580545.0 | Number of duplications: 2\n",
            "P8N: 27399501.0 | Number of duplications: 2\n",
            "P8N: 69215348.0 | Number of duplications: 2\n",
            "P8N: 27039551.0 | Number of duplications: 2\n",
            "P8N: 33905194.0 | Number of duplications: 2\n",
            "P8N: 33082485.0 | Number of duplications: 2\n",
            "P8N: 28816091.0 | Number of duplications: 2\n",
            "P8N: 73305688.0 | Number of duplications: 2\n",
            "P8N: 25638087.0 | Number of duplications: 2\n",
            "P8N: 70963338.0 | Number of duplications: 2\n",
            "P8N: 12499824.0 | Number of duplications: 2\n",
            "P8N: 20927365.0 | Number of duplications: 2\n",
            "P8N: 89637018.0 | Number of duplications: 2\n",
            "P8N: 34570705.0 | Number of duplications: 2\n",
            "P8N: 16668064.0 | Number of duplications: 2\n",
            "P8N: 58004033.0 | Number of duplications: 2\n",
            "P8N: 10272308.0 | Number of duplications: 2\n",
            "P8N: 24380460.0 | Number of duplications: 2\n",
            "P8N: 80723311.0 | Number of duplications: 2\n",
            "P8N: 13112355.0 | Number of duplications: 2\n",
            "P8N: 30392862.0 | Number of duplications: 2\n",
            "P8N: 28146156.0 | Number of duplications: 2\n",
            "P8N: 19168335.0 | Number of duplications: 2\n",
            "P8N: 15367344.0 | Number of duplications: 2\n",
            "P8N: 10288733.0 | Number of duplications: 2\n",
            "P8N: 75014353.0 | Number of duplications: 2\n",
            "P8N: 70716039.0 | Number of duplications: 2\n",
            "P8N: 88827839.0 | Number of duplications: 2\n",
            "P8N: 81723336.0 | Number of duplications: 2\n",
            "P8N: 39973306.0 | Number of duplications: 2\n",
            "P8N: 22255211.0 | Number of duplications: 2\n",
            "P8N: 60620530.0 | Number of duplications: 2\n",
            "P8N: 49646437.0 | Number of duplications: 2\n",
            "P8N: 83375689.0 | Number of duplications: 2\n",
            "P8N: 41623196.0 | Number of duplications: 2\n",
            "P8N: 43564712.0 | Number of duplications: 2\n",
            "P8N: 82813318.0 | Number of duplications: 2\n",
            "P8N: 59044553.0 | Number of duplications: 2\n",
            "P8N: 61334302.0 | Number of duplications: 2\n",
            "P8N: 68387458.0 | Number of duplications: 2\n",
            "P8N: 28195985.0 | Number of duplications: 2\n",
            "P8N: 73765039.0 | Number of duplications: 2\n",
            "P8N: 30280879.0 | Number of duplications: 2\n",
            "P8N: 46500532.0 | Number of duplications: 2\n",
            "P8N: 87773292.0 | Number of duplications: 2\n",
            "P8N: 82818308.0 | Number of duplications: 2\n",
            "P8N: 29218620.0 | Number of duplications: 2\n",
            "P8N: 16808341.0 | Number of duplications: 2\n",
            "P8N: 56898087.0 | Number of duplications: 2\n",
            "P8N: 33548362.0 | Number of duplications: 2\n",
            "P8N: 89627868.0 | Number of duplications: 2\n",
            "P8N: 87691999.0 | Number of duplications: 2\n",
            "P8N: 37097196.0 | Number of duplications: 2\n",
            "P8N: 23811830.0 | Number of duplications: 2\n",
            "P8N: 70879203.0 | Number of duplications: 2\n",
            "P8N: 34324098.0 | Number of duplications: 2\n",
            "P8N: 44201363.0 | Number of duplications: 2\n",
            "P8N: 51404598.0 | Number of duplications: 2\n",
            "P8N: 48039600.0 | Number of duplications: 2\n",
            "P8N: 22952109.0 | Number of duplications: 2\n",
            "P8N: 72273197.0 | Number of duplications: 2\n",
            "P8N: 80086827.0 | Number of duplications: 2\n",
            "P8N: 22010645.0 | Number of duplications: 2\n",
            "P8N: 77218325.0 | Number of duplications: 2\n",
            "P8N: 28036314.0 | Number of duplications: 2\n",
            "P8N: 48719381.0 | Number of duplications: 2\n",
            "P8N: 72614989.0 | Number of duplications: 2\n",
            "P8N: 58278291.0 | Number of duplications: 2\n",
            "P8N: 19424248.0 | Number of duplications: 2\n",
            "P8N: 28640691.0 | Number of duplications: 2\n",
            "P8N: 26479558.0 | Number of duplications: 2\n",
            "P8N: 35222050.0 | Number of duplications: 2\n",
            "P8N: 55461705.0 | Number of duplications: 2\n",
            "P8N: 37566269.0 | Number of duplications: 2\n",
            "P8N: 39394955.0 | Number of duplications: 2\n",
            "P8N: 58978726.0 | Number of duplications: 2\n",
            "P8N: 66601667.0 | Number of duplications: 2\n",
            "P8N: 80685608.0 | Number of duplications: 2\n",
            "P8N: 85813018.0 | Number of duplications: 2\n",
            "P8N: 12619697.0 | Number of duplications: 2\n",
            "P8N: 21497327.0 | Number of duplications: 2\n",
            "P8N: 64428509.0 | Number of duplications: 2\n",
            "P8N: 29625904.0 | Number of duplications: 2\n",
            "P8N: 82874833.0 | Number of duplications: 2\n",
            "P8N: 34323279.0 | Number of duplications: 2\n",
            "P8N: 50496888.0 | Number of duplications: 2\n",
            "P8N: 24561310.0 | Number of duplications: 2\n",
            "P8N: 30153672.0 | Number of duplications: 2\n",
            "P8N: 53484621.0 | Number of duplications: 2\n",
            "P8N: 85117742.0 | Number of duplications: 2\n",
            "P8N: 57203832.0 | Number of duplications: 2\n",
            "P8N: 29995797.0 | Number of duplications: 2\n",
            "P8N: 10931275.0 | Number of duplications: 2\n",
            "P8N: 38832570.0 | Number of duplications: 2\n",
            "P8N: 64716743.0 | Number of duplications: 2\n",
            "P8N: 64968380.0 | Number of duplications: 2\n",
            "P8N: 25485553.0 | Number of duplications: 2\n",
            "P8N: 35889845.0 | Number of duplications: 2\n",
            "P8N: 59832216.0 | Number of duplications: 2\n",
            "P8N: 10984817.0 | Number of duplications: 2\n",
            "218\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "697    100697  2023-01-01:10:11:53  2023-01-02:10:29:36  75598754.0   \n",
              "7211   107211  2023-01-04:17:02:09  2023-01-04:17:20:40  75598754.0   \n",
              "9206   109206  2023-01-05:11:02:01  2023-01-05:11:24:55  75598754.0   \n",
              "11595  111595  2023-01-05:21:30:39  2023-01-05:21:50:11  75598754.0   \n",
              "14757  114757  2023-01-08:15:41:13  2023-01-08:15:59:27  75598754.0   \n",
              "20413  120413  2023-01-11:12:05:38  2023-01-11:12:25:43  75598754.0   \n",
              "20623  120623  2023-01-11:12:50:18  2023-01-11:13:12:25  75598754.0   \n",
              "22243  122243  2023-01-11:19:03:45  2023-01-11:19:24:10  75598754.0   \n",
              "27840  127840  2023-01-13:16:11:36  2023-01-13:16:34:53  75598754.0   \n",
              "28189  128189  2023-01-13:18:42:32  2023-01-13:19:06:21  75598754.0   \n",
              "30444  130444  2023-01-16:17:22:04  2023-01-16:17:41:59  75598754.0   \n",
              "31857  131857  2023-01-17:12:22:50  2023-01-17:12:39:36  75598754.0   \n",
              "33146  133146  2023-01-17:19:12:29  2023-01-17:19:31:30  75598754.0   \n",
              "36991  136991  2023-01-18:21:53:06  2023-01-18:22:12:06  75598754.0   \n",
              "38249  138249  2023-01-19:11:10:19  2023-01-19:11:27:39  75598754.0   \n",
              "38654  138654  2023-01-19:12:48:36  2023-01-19:13:09:50  75598754.0   \n",
              "45442  145442  2023-01-24:05:20:52  2023-01-24:05:40:40  75598754.0   \n",
              "\n",
              "       PARTNER_P8N  BIRTH_DATE FIRST_NAME   LAST_NAME  \\\n",
              "697     74629621.0  2000-08-06      Angel      French   \n",
              "7211           NaN  1994-12-19       Jake     Aussant   \n",
              "9206    32824243.0  1984-03-09     Phoebe      Gagnon   \n",
              "11595   32824243.0  1987-01-12  Christina       Ennis   \n",
              "14757   37767091.0  1982-08-13     Laurie  Montgomery   \n",
              "20413          NaN  1992-06-11    Donovan      Thomas   \n",
              "20623   12840755.0  1987-03-02      Sarah   Galbraith   \n",
              "22243   63675983.0  1994-05-21      Shari    Trottier   \n",
              "27840   11980329.0  2001-07-23      Norma        Leon   \n",
              "28189   12217666.0  2000-06-20      Tanya     Nielsen   \n",
              "30444          NaN  1992-03-20    Kristen     Mugford   \n",
              "31857   84548882.0  1982-09-13   Michelle      Mangat   \n",
              "33146   10546467.0  1996-04-27     Donald   D'Onofrio   \n",
              "36991   32150716.0  1989-09-16    Kristen       Nwosu   \n",
              "38249   67457451.0  1990-08-07   Terrence        CHEN   \n",
              "38654   16153288.0  1994-04-02   Michelle       Maski   \n",
              "45442          NaN  1988-01-30    Kaitlin    Anderson   \n",
              "\n",
              "                          STREET_NAME MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "697                 PO BOX 2564 STN A          BROSSARD      J4Z3M5   \n",
              "7211   3224 Christine Plaza Suite 468     SAINT-LEONARD      H1S0A1   \n",
              "9206    87688 Tonya Village Suite 581      PORT ALBERNI      V9Y2C8   \n",
              "11595    64417 Tanner Court Suite 587          WINNIPEG      R2M4C5   \n",
              "14757          72 Spears Way Apt. 312           CHATHAM      N7L2H7   \n",
              "20413              133 Stephens Point          GATINEAU      J8L3Z3   \n",
              "20623        21 Duarte Ways Suite 940          COALDALE      T1M1C3   \n",
              "22243             92219 Jason Gardens         SASKATOON      S7T0X5   \n",
              "27840      8631 Tracy Field Suite 689   NEW WESTMINSTER      V3M3P8   \n",
              "28189   85667 Hoffman Tunnel Apt. 698      L'ASSOMPTION      J5W1Y6   \n",
              "30444      11915 Ross Lights Apt. 498    TROIS-RIVIERES      G9A6P3   \n",
              "31857       92833 Frye Wall Suite 713        SLAVE LAKE      T0G2A4   \n",
              "33146                   11 Rivers Way         VAL CARON      P3N1C7   \n",
              "36991       1577 Rogers Mews Apt. 961              AJAX      L1S2Z9   \n",
              "38249         4931 Beth Fort Apt. 463          WATERLOO      N2J1Z2   \n",
              "38654               3625 Wallace Fork            VERNON      V1T9J1   \n",
              "45442               9138 Powell Green     DRUMMONDVILLE      J2B5K5   \n",
              "\n",
              "       PROVINCE__ID                           EMAIL  HOME_AREA_CODE  \\\n",
              "697             5.0             Fre441@concierge.fr           438.0   \n",
              "7211            5.0        jake_aussant@outlook.com             NaN   \n",
              "9206           10.0       phoebe.gagnon63@gmail.com             NaN   \n",
              "11595           7.0     ennis.christina87@gmail.com           204.0   \n",
              "14757           6.0   lauriehmontgomery@outlook.com             NaN   \n",
              "20413           5.0            d.thomas15@gmail.com             NaN   \n",
              "20623           9.0         s.galbraith29@gmail.com           403.0   \n",
              "22243           8.0        sharivtrottier@gmail.com           306.0   \n",
              "27840          10.0          norma_leon67@gmail.com           604.0   \n",
              "28189           5.0         tanyawnielsen@gmail.com             NaN   \n",
              "30444           5.0        kristenmugford@gmail.com             NaN   \n",
              "31857           9.0             mmangat12@gmail.com           250.0   \n",
              "33146           6.0      donofrio18donald@gmail.com           705.0   \n",
              "36991           6.0          kristennwosu@gmail.com           905.0   \n",
              "38249           6.0          terrencechen@gmail.com           226.0   \n",
              "38654          10.0     maskimichelle76@outlook.com           778.0   \n",
              "45442           5.0  kaitlin.anderson63@outlook.com           819.0   \n",
              "\n",
              "       PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "697       9633495.0                UE        800  \n",
              "7211            0.0                 E        500  \n",
              "9206            0.0                UE        800  \n",
              "11595     1463277.0               ESE        800  \n",
              "14757           0.0               ESE        250  \n",
              "20413           0.0                 E        250  \n",
              "20623     9445386.0                SE        250  \n",
              "22243     5341842.0                 E        250  \n",
              "27840     9916647.0                 E        800  \n",
              "28189           0.0                 E        500  \n",
              "30444           0.0                 E        500  \n",
              "31857     7947414.0                 E        800  \n",
              "33146     2266861.0                SE        250  \n",
              "36991     8844461.0                UE        800  \n",
              "38249     5800014.0               ESE        250  \n",
              "38654     9018504.0                 E        250  \n",
              "45442     2152511.0                SE        500  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21e8613d-8d60-443d-a827-43b3e0dd0605\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>697</th>\n",
              "      <td>100697</td>\n",
              "      <td>2023-01-01:10:11:53</td>\n",
              "      <td>2023-01-02:10:29:36</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>74629621.0</td>\n",
              "      <td>2000-08-06</td>\n",
              "      <td>Angel</td>\n",
              "      <td>French</td>\n",
              "      <td>PO BOX 2564 STN A</td>\n",
              "      <td>BROSSARD</td>\n",
              "      <td>J4Z3M5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Fre441@concierge.fr</td>\n",
              "      <td>438.0</td>\n",
              "      <td>9633495.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7211</th>\n",
              "      <td>107211</td>\n",
              "      <td>2023-01-04:17:02:09</td>\n",
              "      <td>2023-01-04:17:20:40</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1994-12-19</td>\n",
              "      <td>Jake</td>\n",
              "      <td>Aussant</td>\n",
              "      <td>3224 Christine Plaza Suite 468</td>\n",
              "      <td>SAINT-LEONARD</td>\n",
              "      <td>H1S0A1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>jake_aussant@outlook.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9206</th>\n",
              "      <td>109206</td>\n",
              "      <td>2023-01-05:11:02:01</td>\n",
              "      <td>2023-01-05:11:24:55</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>32824243.0</td>\n",
              "      <td>1984-03-09</td>\n",
              "      <td>Phoebe</td>\n",
              "      <td>Gagnon</td>\n",
              "      <td>87688 Tonya Village Suite 581</td>\n",
              "      <td>PORT ALBERNI</td>\n",
              "      <td>V9Y2C8</td>\n",
              "      <td>10.0</td>\n",
              "      <td>phoebe.gagnon63@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11595</th>\n",
              "      <td>111595</td>\n",
              "      <td>2023-01-05:21:30:39</td>\n",
              "      <td>2023-01-05:21:50:11</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>32824243.0</td>\n",
              "      <td>1987-01-12</td>\n",
              "      <td>Christina</td>\n",
              "      <td>Ennis</td>\n",
              "      <td>64417 Tanner Court Suite 587</td>\n",
              "      <td>WINNIPEG</td>\n",
              "      <td>R2M4C5</td>\n",
              "      <td>7.0</td>\n",
              "      <td>ennis.christina87@gmail.com</td>\n",
              "      <td>204.0</td>\n",
              "      <td>1463277.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14757</th>\n",
              "      <td>114757</td>\n",
              "      <td>2023-01-08:15:41:13</td>\n",
              "      <td>2023-01-08:15:59:27</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>37767091.0</td>\n",
              "      <td>1982-08-13</td>\n",
              "      <td>Laurie</td>\n",
              "      <td>Montgomery</td>\n",
              "      <td>72 Spears Way Apt. 312</td>\n",
              "      <td>CHATHAM</td>\n",
              "      <td>N7L2H7</td>\n",
              "      <td>6.0</td>\n",
              "      <td>lauriehmontgomery@outlook.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20413</th>\n",
              "      <td>120413</td>\n",
              "      <td>2023-01-11:12:05:38</td>\n",
              "      <td>2023-01-11:12:25:43</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1992-06-11</td>\n",
              "      <td>Donovan</td>\n",
              "      <td>Thomas</td>\n",
              "      <td>133 Stephens Point</td>\n",
              "      <td>GATINEAU</td>\n",
              "      <td>J8L3Z3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>d.thomas15@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20623</th>\n",
              "      <td>120623</td>\n",
              "      <td>2023-01-11:12:50:18</td>\n",
              "      <td>2023-01-11:13:12:25</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>12840755.0</td>\n",
              "      <td>1987-03-02</td>\n",
              "      <td>Sarah</td>\n",
              "      <td>Galbraith</td>\n",
              "      <td>21 Duarte Ways Suite 940</td>\n",
              "      <td>COALDALE</td>\n",
              "      <td>T1M1C3</td>\n",
              "      <td>9.0</td>\n",
              "      <td>s.galbraith29@gmail.com</td>\n",
              "      <td>403.0</td>\n",
              "      <td>9445386.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22243</th>\n",
              "      <td>122243</td>\n",
              "      <td>2023-01-11:19:03:45</td>\n",
              "      <td>2023-01-11:19:24:10</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>63675983.0</td>\n",
              "      <td>1994-05-21</td>\n",
              "      <td>Shari</td>\n",
              "      <td>Trottier</td>\n",
              "      <td>92219 Jason Gardens</td>\n",
              "      <td>SASKATOON</td>\n",
              "      <td>S7T0X5</td>\n",
              "      <td>8.0</td>\n",
              "      <td>sharivtrottier@gmail.com</td>\n",
              "      <td>306.0</td>\n",
              "      <td>5341842.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27840</th>\n",
              "      <td>127840</td>\n",
              "      <td>2023-01-13:16:11:36</td>\n",
              "      <td>2023-01-13:16:34:53</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>11980329.0</td>\n",
              "      <td>2001-07-23</td>\n",
              "      <td>Norma</td>\n",
              "      <td>Leon</td>\n",
              "      <td>8631 Tracy Field Suite 689</td>\n",
              "      <td>NEW WESTMINSTER</td>\n",
              "      <td>V3M3P8</td>\n",
              "      <td>10.0</td>\n",
              "      <td>norma_leon67@gmail.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>9916647.0</td>\n",
              "      <td>E</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28189</th>\n",
              "      <td>128189</td>\n",
              "      <td>2023-01-13:18:42:32</td>\n",
              "      <td>2023-01-13:19:06:21</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>12217666.0</td>\n",
              "      <td>2000-06-20</td>\n",
              "      <td>Tanya</td>\n",
              "      <td>Nielsen</td>\n",
              "      <td>85667 Hoffman Tunnel Apt. 698</td>\n",
              "      <td>L'ASSOMPTION</td>\n",
              "      <td>J5W1Y6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>tanyawnielsen@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30444</th>\n",
              "      <td>130444</td>\n",
              "      <td>2023-01-16:17:22:04</td>\n",
              "      <td>2023-01-16:17:41:59</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1992-03-20</td>\n",
              "      <td>Kristen</td>\n",
              "      <td>Mugford</td>\n",
              "      <td>11915 Ross Lights Apt. 498</td>\n",
              "      <td>TROIS-RIVIERES</td>\n",
              "      <td>G9A6P3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>kristenmugford@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31857</th>\n",
              "      <td>131857</td>\n",
              "      <td>2023-01-17:12:22:50</td>\n",
              "      <td>2023-01-17:12:39:36</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>84548882.0</td>\n",
              "      <td>1982-09-13</td>\n",
              "      <td>Michelle</td>\n",
              "      <td>Mangat</td>\n",
              "      <td>92833 Frye Wall Suite 713</td>\n",
              "      <td>SLAVE LAKE</td>\n",
              "      <td>T0G2A4</td>\n",
              "      <td>9.0</td>\n",
              "      <td>mmangat12@gmail.com</td>\n",
              "      <td>250.0</td>\n",
              "      <td>7947414.0</td>\n",
              "      <td>E</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33146</th>\n",
              "      <td>133146</td>\n",
              "      <td>2023-01-17:19:12:29</td>\n",
              "      <td>2023-01-17:19:31:30</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>10546467.0</td>\n",
              "      <td>1996-04-27</td>\n",
              "      <td>Donald</td>\n",
              "      <td>D'Onofrio</td>\n",
              "      <td>11 Rivers Way</td>\n",
              "      <td>VAL CARON</td>\n",
              "      <td>P3N1C7</td>\n",
              "      <td>6.0</td>\n",
              "      <td>donofrio18donald@gmail.com</td>\n",
              "      <td>705.0</td>\n",
              "      <td>2266861.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36991</th>\n",
              "      <td>136991</td>\n",
              "      <td>2023-01-18:21:53:06</td>\n",
              "      <td>2023-01-18:22:12:06</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>32150716.0</td>\n",
              "      <td>1989-09-16</td>\n",
              "      <td>Kristen</td>\n",
              "      <td>Nwosu</td>\n",
              "      <td>1577 Rogers Mews Apt. 961</td>\n",
              "      <td>AJAX</td>\n",
              "      <td>L1S2Z9</td>\n",
              "      <td>6.0</td>\n",
              "      <td>kristennwosu@gmail.com</td>\n",
              "      <td>905.0</td>\n",
              "      <td>8844461.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38249</th>\n",
              "      <td>138249</td>\n",
              "      <td>2023-01-19:11:10:19</td>\n",
              "      <td>2023-01-19:11:27:39</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>67457451.0</td>\n",
              "      <td>1990-08-07</td>\n",
              "      <td>Terrence</td>\n",
              "      <td>CHEN</td>\n",
              "      <td>4931 Beth Fort Apt. 463</td>\n",
              "      <td>WATERLOO</td>\n",
              "      <td>N2J1Z2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>terrencechen@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>5800014.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38654</th>\n",
              "      <td>138654</td>\n",
              "      <td>2023-01-19:12:48:36</td>\n",
              "      <td>2023-01-19:13:09:50</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>16153288.0</td>\n",
              "      <td>1994-04-02</td>\n",
              "      <td>Michelle</td>\n",
              "      <td>Maski</td>\n",
              "      <td>3625 Wallace Fork</td>\n",
              "      <td>VERNON</td>\n",
              "      <td>V1T9J1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>maskimichelle76@outlook.com</td>\n",
              "      <td>778.0</td>\n",
              "      <td>9018504.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45442</th>\n",
              "      <td>145442</td>\n",
              "      <td>2023-01-24:05:20:52</td>\n",
              "      <td>2023-01-24:05:40:40</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1988-01-30</td>\n",
              "      <td>Kaitlin</td>\n",
              "      <td>Anderson</td>\n",
              "      <td>9138 Powell Green</td>\n",
              "      <td>DRUMMONDVILLE</td>\n",
              "      <td>J2B5K5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>kaitlin.anderson63@outlook.com</td>\n",
              "      <td>819.0</td>\n",
              "      <td>2152511.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21e8613d-8d60-443d-a827-43b3e0dd0605')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-21e8613d-8d60-443d-a827-43b3e0dd0605 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-21e8613d-8d60-443d-a827-43b3e0dd0605');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 279
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valid_[valid_['P8N'] == 75598754.0]"
      ],
      "metadata": {
        "id": "812FRwhpD9PY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c9013aa3-1eef-41cc-a5c4-9febe7ff8119"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "697    100697  2023-01-01:10:11:53  2023-01-02:10:29:36  75598754.0   \n",
              "7211   107211  2023-01-04:17:02:09  2023-01-04:17:20:40  75598754.0   \n",
              "9206   109206  2023-01-05:11:02:01  2023-01-05:11:24:55  75598754.0   \n",
              "11595  111595  2023-01-05:21:30:39  2023-01-05:21:50:11  75598754.0   \n",
              "14757  114757  2023-01-08:15:41:13  2023-01-08:15:59:27  75598754.0   \n",
              "20413  120413  2023-01-11:12:05:38  2023-01-11:12:25:43  75598754.0   \n",
              "20623  120623  2023-01-11:12:50:18  2023-01-11:13:12:25  75598754.0   \n",
              "22243  122243  2023-01-11:19:03:45  2023-01-11:19:24:10  75598754.0   \n",
              "27840  127840  2023-01-13:16:11:36  2023-01-13:16:34:53  75598754.0   \n",
              "28189  128189  2023-01-13:18:42:32  2023-01-13:19:06:21  75598754.0   \n",
              "30444  130444  2023-01-16:17:22:04  2023-01-16:17:41:59  75598754.0   \n",
              "31857  131857  2023-01-17:12:22:50  2023-01-17:12:39:36  75598754.0   \n",
              "33146  133146  2023-01-17:19:12:29  2023-01-17:19:31:30  75598754.0   \n",
              "36991  136991  2023-01-18:21:53:06  2023-01-18:22:12:06  75598754.0   \n",
              "38249  138249  2023-01-19:11:10:19  2023-01-19:11:27:39  75598754.0   \n",
              "38654  138654  2023-01-19:12:48:36  2023-01-19:13:09:50  75598754.0   \n",
              "45442  145442  2023-01-24:05:20:52  2023-01-24:05:40:40  75598754.0   \n",
              "\n",
              "       PARTNER_P8N  BIRTH_DATE FIRST_NAME   LAST_NAME  \\\n",
              "697     74629621.0  2000-08-06      Angel      French   \n",
              "7211           NaN  1994-12-19       Jake     Aussant   \n",
              "9206    32824243.0  1984-03-09     Phoebe      Gagnon   \n",
              "11595   32824243.0  1987-01-12  Christina       Ennis   \n",
              "14757   37767091.0  1982-08-13     Laurie  Montgomery   \n",
              "20413          NaN  1992-06-11    Donovan      Thomas   \n",
              "20623   12840755.0  1987-03-02      Sarah   Galbraith   \n",
              "22243   63675983.0  1994-05-21      Shari    Trottier   \n",
              "27840   11980329.0  2001-07-23      Norma        Leon   \n",
              "28189   12217666.0  2000-06-20      Tanya     Nielsen   \n",
              "30444          NaN  1992-03-20    Kristen     Mugford   \n",
              "31857   84548882.0  1982-09-13   Michelle      Mangat   \n",
              "33146   10546467.0  1996-04-27     Donald   D'Onofrio   \n",
              "36991   32150716.0  1989-09-16    Kristen       Nwosu   \n",
              "38249   67457451.0  1990-08-07   Terrence        CHEN   \n",
              "38654   16153288.0  1994-04-02   Michelle       Maski   \n",
              "45442          NaN  1988-01-30    Kaitlin    Anderson   \n",
              "\n",
              "                          STREET_NAME MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "697                 PO BOX 2564 STN A          BROSSARD      J4Z3M5   \n",
              "7211   3224 Christine Plaza Suite 468     SAINT-LEONARD      H1S0A1   \n",
              "9206    87688 Tonya Village Suite 581      PORT ALBERNI      V9Y2C8   \n",
              "11595    64417 Tanner Court Suite 587          WINNIPEG      R2M4C5   \n",
              "14757          72 Spears Way Apt. 312           CHATHAM      N7L2H7   \n",
              "20413              133 Stephens Point          GATINEAU      J8L3Z3   \n",
              "20623        21 Duarte Ways Suite 940          COALDALE      T1M1C3   \n",
              "22243             92219 Jason Gardens         SASKATOON      S7T0X5   \n",
              "27840      8631 Tracy Field Suite 689   NEW WESTMINSTER      V3M3P8   \n",
              "28189   85667 Hoffman Tunnel Apt. 698      L'ASSOMPTION      J5W1Y6   \n",
              "30444      11915 Ross Lights Apt. 498    TROIS-RIVIERES      G9A6P3   \n",
              "31857       92833 Frye Wall Suite 713        SLAVE LAKE      T0G2A4   \n",
              "33146                   11 Rivers Way         VAL CARON      P3N1C7   \n",
              "36991       1577 Rogers Mews Apt. 961              AJAX      L1S2Z9   \n",
              "38249         4931 Beth Fort Apt. 463          WATERLOO      N2J1Z2   \n",
              "38654               3625 Wallace Fork            VERNON      V1T9J1   \n",
              "45442               9138 Powell Green     DRUMMONDVILLE      J2B5K5   \n",
              "\n",
              "       PROVINCE__ID                           EMAIL  HOME_AREA_CODE  \\\n",
              "697             5.0             Fre441@concierge.fr           438.0   \n",
              "7211            5.0        jake_aussant@outlook.com             NaN   \n",
              "9206           10.0       phoebe.gagnon63@gmail.com             NaN   \n",
              "11595           7.0     ennis.christina87@gmail.com           204.0   \n",
              "14757           6.0   lauriehmontgomery@outlook.com             NaN   \n",
              "20413           5.0            d.thomas15@gmail.com             NaN   \n",
              "20623           9.0         s.galbraith29@gmail.com           403.0   \n",
              "22243           8.0        sharivtrottier@gmail.com           306.0   \n",
              "27840          10.0          norma_leon67@gmail.com           604.0   \n",
              "28189           5.0         tanyawnielsen@gmail.com             NaN   \n",
              "30444           5.0        kristenmugford@gmail.com             NaN   \n",
              "31857           9.0             mmangat12@gmail.com           250.0   \n",
              "33146           6.0      donofrio18donald@gmail.com           705.0   \n",
              "36991           6.0          kristennwosu@gmail.com           905.0   \n",
              "38249           6.0          terrencechen@gmail.com           226.0   \n",
              "38654          10.0     maskimichelle76@outlook.com           778.0   \n",
              "45442           5.0  kaitlin.anderson63@outlook.com           819.0   \n",
              "\n",
              "       PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "697       9633495.0                UE        800  \n",
              "7211            0.0                 E        500  \n",
              "9206            0.0                UE        800  \n",
              "11595     1463277.0               ESE        800  \n",
              "14757           0.0               ESE        250  \n",
              "20413           0.0                 E        250  \n",
              "20623     9445386.0                SE        250  \n",
              "22243     5341842.0                 E        250  \n",
              "27840     9916647.0                 E        800  \n",
              "28189           0.0                 E        500  \n",
              "30444           0.0                 E        500  \n",
              "31857     7947414.0                 E        800  \n",
              "33146     2266861.0                SE        250  \n",
              "36991     8844461.0                UE        800  \n",
              "38249     5800014.0               ESE        250  \n",
              "38654     9018504.0                 E        250  \n",
              "45442     2152511.0                SE        500  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-80acdda2-05f0-4f1c-9ca2-df1f8d0298dd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>697</th>\n",
              "      <td>100697</td>\n",
              "      <td>2023-01-01:10:11:53</td>\n",
              "      <td>2023-01-02:10:29:36</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>74629621.0</td>\n",
              "      <td>2000-08-06</td>\n",
              "      <td>Angel</td>\n",
              "      <td>French</td>\n",
              "      <td>PO BOX 2564 STN A</td>\n",
              "      <td>BROSSARD</td>\n",
              "      <td>J4Z3M5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Fre441@concierge.fr</td>\n",
              "      <td>438.0</td>\n",
              "      <td>9633495.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7211</th>\n",
              "      <td>107211</td>\n",
              "      <td>2023-01-04:17:02:09</td>\n",
              "      <td>2023-01-04:17:20:40</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1994-12-19</td>\n",
              "      <td>Jake</td>\n",
              "      <td>Aussant</td>\n",
              "      <td>3224 Christine Plaza Suite 468</td>\n",
              "      <td>SAINT-LEONARD</td>\n",
              "      <td>H1S0A1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>jake_aussant@outlook.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9206</th>\n",
              "      <td>109206</td>\n",
              "      <td>2023-01-05:11:02:01</td>\n",
              "      <td>2023-01-05:11:24:55</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>32824243.0</td>\n",
              "      <td>1984-03-09</td>\n",
              "      <td>Phoebe</td>\n",
              "      <td>Gagnon</td>\n",
              "      <td>87688 Tonya Village Suite 581</td>\n",
              "      <td>PORT ALBERNI</td>\n",
              "      <td>V9Y2C8</td>\n",
              "      <td>10.0</td>\n",
              "      <td>phoebe.gagnon63@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11595</th>\n",
              "      <td>111595</td>\n",
              "      <td>2023-01-05:21:30:39</td>\n",
              "      <td>2023-01-05:21:50:11</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>32824243.0</td>\n",
              "      <td>1987-01-12</td>\n",
              "      <td>Christina</td>\n",
              "      <td>Ennis</td>\n",
              "      <td>64417 Tanner Court Suite 587</td>\n",
              "      <td>WINNIPEG</td>\n",
              "      <td>R2M4C5</td>\n",
              "      <td>7.0</td>\n",
              "      <td>ennis.christina87@gmail.com</td>\n",
              "      <td>204.0</td>\n",
              "      <td>1463277.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14757</th>\n",
              "      <td>114757</td>\n",
              "      <td>2023-01-08:15:41:13</td>\n",
              "      <td>2023-01-08:15:59:27</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>37767091.0</td>\n",
              "      <td>1982-08-13</td>\n",
              "      <td>Laurie</td>\n",
              "      <td>Montgomery</td>\n",
              "      <td>72 Spears Way Apt. 312</td>\n",
              "      <td>CHATHAM</td>\n",
              "      <td>N7L2H7</td>\n",
              "      <td>6.0</td>\n",
              "      <td>lauriehmontgomery@outlook.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20413</th>\n",
              "      <td>120413</td>\n",
              "      <td>2023-01-11:12:05:38</td>\n",
              "      <td>2023-01-11:12:25:43</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1992-06-11</td>\n",
              "      <td>Donovan</td>\n",
              "      <td>Thomas</td>\n",
              "      <td>133 Stephens Point</td>\n",
              "      <td>GATINEAU</td>\n",
              "      <td>J8L3Z3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>d.thomas15@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20623</th>\n",
              "      <td>120623</td>\n",
              "      <td>2023-01-11:12:50:18</td>\n",
              "      <td>2023-01-11:13:12:25</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>12840755.0</td>\n",
              "      <td>1987-03-02</td>\n",
              "      <td>Sarah</td>\n",
              "      <td>Galbraith</td>\n",
              "      <td>21 Duarte Ways Suite 940</td>\n",
              "      <td>COALDALE</td>\n",
              "      <td>T1M1C3</td>\n",
              "      <td>9.0</td>\n",
              "      <td>s.galbraith29@gmail.com</td>\n",
              "      <td>403.0</td>\n",
              "      <td>9445386.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22243</th>\n",
              "      <td>122243</td>\n",
              "      <td>2023-01-11:19:03:45</td>\n",
              "      <td>2023-01-11:19:24:10</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>63675983.0</td>\n",
              "      <td>1994-05-21</td>\n",
              "      <td>Shari</td>\n",
              "      <td>Trottier</td>\n",
              "      <td>92219 Jason Gardens</td>\n",
              "      <td>SASKATOON</td>\n",
              "      <td>S7T0X5</td>\n",
              "      <td>8.0</td>\n",
              "      <td>sharivtrottier@gmail.com</td>\n",
              "      <td>306.0</td>\n",
              "      <td>5341842.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27840</th>\n",
              "      <td>127840</td>\n",
              "      <td>2023-01-13:16:11:36</td>\n",
              "      <td>2023-01-13:16:34:53</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>11980329.0</td>\n",
              "      <td>2001-07-23</td>\n",
              "      <td>Norma</td>\n",
              "      <td>Leon</td>\n",
              "      <td>8631 Tracy Field Suite 689</td>\n",
              "      <td>NEW WESTMINSTER</td>\n",
              "      <td>V3M3P8</td>\n",
              "      <td>10.0</td>\n",
              "      <td>norma_leon67@gmail.com</td>\n",
              "      <td>604.0</td>\n",
              "      <td>9916647.0</td>\n",
              "      <td>E</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28189</th>\n",
              "      <td>128189</td>\n",
              "      <td>2023-01-13:18:42:32</td>\n",
              "      <td>2023-01-13:19:06:21</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>12217666.0</td>\n",
              "      <td>2000-06-20</td>\n",
              "      <td>Tanya</td>\n",
              "      <td>Nielsen</td>\n",
              "      <td>85667 Hoffman Tunnel Apt. 698</td>\n",
              "      <td>L'ASSOMPTION</td>\n",
              "      <td>J5W1Y6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>tanyawnielsen@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30444</th>\n",
              "      <td>130444</td>\n",
              "      <td>2023-01-16:17:22:04</td>\n",
              "      <td>2023-01-16:17:41:59</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1992-03-20</td>\n",
              "      <td>Kristen</td>\n",
              "      <td>Mugford</td>\n",
              "      <td>11915 Ross Lights Apt. 498</td>\n",
              "      <td>TROIS-RIVIERES</td>\n",
              "      <td>G9A6P3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>kristenmugford@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31857</th>\n",
              "      <td>131857</td>\n",
              "      <td>2023-01-17:12:22:50</td>\n",
              "      <td>2023-01-17:12:39:36</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>84548882.0</td>\n",
              "      <td>1982-09-13</td>\n",
              "      <td>Michelle</td>\n",
              "      <td>Mangat</td>\n",
              "      <td>92833 Frye Wall Suite 713</td>\n",
              "      <td>SLAVE LAKE</td>\n",
              "      <td>T0G2A4</td>\n",
              "      <td>9.0</td>\n",
              "      <td>mmangat12@gmail.com</td>\n",
              "      <td>250.0</td>\n",
              "      <td>7947414.0</td>\n",
              "      <td>E</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33146</th>\n",
              "      <td>133146</td>\n",
              "      <td>2023-01-17:19:12:29</td>\n",
              "      <td>2023-01-17:19:31:30</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>10546467.0</td>\n",
              "      <td>1996-04-27</td>\n",
              "      <td>Donald</td>\n",
              "      <td>D'Onofrio</td>\n",
              "      <td>11 Rivers Way</td>\n",
              "      <td>VAL CARON</td>\n",
              "      <td>P3N1C7</td>\n",
              "      <td>6.0</td>\n",
              "      <td>donofrio18donald@gmail.com</td>\n",
              "      <td>705.0</td>\n",
              "      <td>2266861.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36991</th>\n",
              "      <td>136991</td>\n",
              "      <td>2023-01-18:21:53:06</td>\n",
              "      <td>2023-01-18:22:12:06</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>32150716.0</td>\n",
              "      <td>1989-09-16</td>\n",
              "      <td>Kristen</td>\n",
              "      <td>Nwosu</td>\n",
              "      <td>1577 Rogers Mews Apt. 961</td>\n",
              "      <td>AJAX</td>\n",
              "      <td>L1S2Z9</td>\n",
              "      <td>6.0</td>\n",
              "      <td>kristennwosu@gmail.com</td>\n",
              "      <td>905.0</td>\n",
              "      <td>8844461.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38249</th>\n",
              "      <td>138249</td>\n",
              "      <td>2023-01-19:11:10:19</td>\n",
              "      <td>2023-01-19:11:27:39</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>67457451.0</td>\n",
              "      <td>1990-08-07</td>\n",
              "      <td>Terrence</td>\n",
              "      <td>CHEN</td>\n",
              "      <td>4931 Beth Fort Apt. 463</td>\n",
              "      <td>WATERLOO</td>\n",
              "      <td>N2J1Z2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>terrencechen@gmail.com</td>\n",
              "      <td>226.0</td>\n",
              "      <td>5800014.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38654</th>\n",
              "      <td>138654</td>\n",
              "      <td>2023-01-19:12:48:36</td>\n",
              "      <td>2023-01-19:13:09:50</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>16153288.0</td>\n",
              "      <td>1994-04-02</td>\n",
              "      <td>Michelle</td>\n",
              "      <td>Maski</td>\n",
              "      <td>3625 Wallace Fork</td>\n",
              "      <td>VERNON</td>\n",
              "      <td>V1T9J1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>maskimichelle76@outlook.com</td>\n",
              "      <td>778.0</td>\n",
              "      <td>9018504.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45442</th>\n",
              "      <td>145442</td>\n",
              "      <td>2023-01-24:05:20:52</td>\n",
              "      <td>2023-01-24:05:40:40</td>\n",
              "      <td>75598754.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1988-01-30</td>\n",
              "      <td>Kaitlin</td>\n",
              "      <td>Anderson</td>\n",
              "      <td>9138 Powell Green</td>\n",
              "      <td>DRUMMONDVILLE</td>\n",
              "      <td>J2B5K5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>kaitlin.anderson63@outlook.com</td>\n",
              "      <td>819.0</td>\n",
              "      <td>2152511.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80acdda2-05f0-4f1c-9ca2-df1f8d0298dd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-80acdda2-05f0-4f1c-9ca2-df1f8d0298dd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-80acdda2-05f0-4f1c-9ca2-df1f8d0298dd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 280
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find all the unique P8N values that appear in the PARTNER_P8N column\n",
        "partner_p8n_values = valid_['PARTNER_P8N'].unique()\n",
        "\n",
        "\n",
        "# Filter the dataframe to include only rows where the P8N value is found in the partner_p8n_values array\n",
        "p8ndup = valid_[valid_['P8N'].isin(partner_p8n_values)]\n",
        "p8ndup"
      ],
      "metadata": {
        "id": "bJtTe-aOEEbv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        },
        "outputId": "abef3780-6a98-4cd3-aefa-99726661a42e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       APP_ID           START_TIME             END_TIME         P8N  \\\n",
              "1      100001  2023-01-01:00:54:22  2023-01-01:01:19:03  28596991.0   \n",
              "12     100012  2023-01-01:05:33:30  2023-01-01:05:55:01  34583763.0   \n",
              "15     100015  2023-01-01:06:05:39  2023-01-01:06:22:36  53424135.0   \n",
              "22     100022  2023-01-01:06:50:44  2023-01-01:07:07:41  77203423.0   \n",
              "23     100023  2023-01-01:07:00:40  2023-01-01:07:20:47  30846737.0   \n",
              "...       ...                  ...                  ...         ...   \n",
              "46309  146309  2023-01-24:12:00:46  2023-01-24:12:20:33  16877631.0   \n",
              "46614  146614  2023-01-24:13:30:50  2023-01-24:13:51:57  77080602.0   \n",
              "46721  146721  2023-01-24:13:56:05  2023-01-24:14:16:10  34583763.0   \n",
              "46733  146733  2023-01-24:13:59:12  2023-01-24:14:20:00  61184024.0   \n",
              "46735  146735  2023-01-24:13:59:29  2023-01-24:14:18:42  12900387.0   \n",
              "\n",
              "       PARTNER_P8N  BIRTH_DATE FIRST_NAME        LAST_NAME  \\\n",
              "1       25829667.0  1985-10-01     Vanesa           Whitty   \n",
              "12      76063280.0  1987-08-25      Tammy        Sanderson   \n",
              "15      67414299.0  1988-10-22   Michelle             Yost   \n",
              "22      20134300.0  1981-12-14   Brigitte          Charlie   \n",
              "23      33544013.0  1995-11-02     Trevor            Woehl   \n",
              "...            ...         ...        ...              ...   \n",
              "46309   45678182.0  1998-01-10   MARGARET  gomes goncalves   \n",
              "46614   20110209.0         NaN        NaN              NaN   \n",
              "46721          NaN  1995-06-25      yodit           Rennie   \n",
              "46733   77967218.0  1991-04-28      Susan          Felsman   \n",
              "46735   75260385.0  1983-07-27     Arthur           Tanner   \n",
              "\n",
              "                        STREET_NAME MUNICIPALITY_NAME POSTAL_CODE  \\\n",
              "1      4163 Werner Meadow Suite 321            SURREY      V3W9W5   \n",
              "12                  264 Kelly Cliff       BLACK CREEK      V9J1J9   \n",
              "15                PO BOX 3001 STN B           NAPANEE      K7R3P3   \n",
              "22       5118 Johnson Ford Apt. 587       SCARBOROUGH      M1G3K8   \n",
              "23                940 Salazar Views     SAINT-RAYMOND      G3L3N3   \n",
              "...                             ...               ...         ...   \n",
              "46309     742 Hensley Lake Apt. 643         CALEDONIA      N3W1G2   \n",
              "46614            9335 Dylan Village            MATANE      G4W2E4   \n",
              "46721   2295 Jimenez Forge Apt. 290           CORBEIL      P0H1K0   \n",
              "46733         49161 Armstrong Knoll           MARKHAM      L3S4T8   \n",
              "46735      937 Holmes Dale Apt. 181         MIRAMICHI      E1N3G3   \n",
              "\n",
              "       PROVINCE__ID                          EMAIL  HOME_AREA_CODE  \\\n",
              "1              10.0          vanesaxwhitty@live.ca           604.0   \n",
              "12             10.0       tammysanderson@gmail.com           250.0   \n",
              "15              6.0             Yos593@duamail.com           613.0   \n",
              "22              6.0  charlie77brigitte@outlook.com           416.0   \n",
              "23              5.0        trevorwoehl68@gmail.com           418.0   \n",
              "...             ...                            ...             ...   \n",
              "46309           6.0  margaretgomesgoncalves55@.edu             NaN   \n",
              "46614           5.0                            NaN           418.0   \n",
              "46721           6.0        rennie84yodit@gmail.com           705.0   \n",
              "46733           6.0        felsman.susan89@live.ca             NaN   \n",
              "46735           3.0       tannerarthur50@gmail.com             NaN   \n",
              "\n",
              "       PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
              "1         5132538.0                UE       1500  \n",
              "12        4640720.0                 E        500  \n",
              "15        4338096.0                UE        800  \n",
              "22        1350722.0                UE        800  \n",
              "23        1655277.0               ESE        250  \n",
              "...             ...               ...        ...  \n",
              "46309           0.0                UE        250  \n",
              "46614     6554474.0                SE        250  \n",
              "46721     8468034.0                UE        500  \n",
              "46733           0.0                 E        250  \n",
              "46735           0.0                SE        250  \n",
              "\n",
              "[1279 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d607e5e6-4c1d-4fee-bc43-7bdf6241d408\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>APP_ID</th>\n",
              "      <th>START_TIME</th>\n",
              "      <th>END_TIME</th>\n",
              "      <th>P8N</th>\n",
              "      <th>PARTNER_P8N</th>\n",
              "      <th>BIRTH_DATE</th>\n",
              "      <th>FIRST_NAME</th>\n",
              "      <th>LAST_NAME</th>\n",
              "      <th>STREET_NAME</th>\n",
              "      <th>MUNICIPALITY_NAME</th>\n",
              "      <th>POSTAL_CODE</th>\n",
              "      <th>PROVINCE__ID</th>\n",
              "      <th>EMAIL</th>\n",
              "      <th>HOME_AREA_CODE</th>\n",
              "      <th>PHONE_NUMBER</th>\n",
              "      <th>EMPLOYMENT_STATUS</th>\n",
              "      <th>CUMUL_PAY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100001</td>\n",
              "      <td>2023-01-01:00:54:22</td>\n",
              "      <td>2023-01-01:01:19:03</td>\n",
              "      <td>28596991.0</td>\n",
              "      <td>25829667.0</td>\n",
              "      <td>1985-10-01</td>\n",
              "      <td>Vanesa</td>\n",
              "      <td>Whitty</td>\n",
              "      <td>4163 Werner Meadow Suite 321</td>\n",
              "      <td>SURREY</td>\n",
              "      <td>V3W9W5</td>\n",
              "      <td>10.0</td>\n",
              "      <td>vanesaxwhitty@live.ca</td>\n",
              "      <td>604.0</td>\n",
              "      <td>5132538.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>1500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>100012</td>\n",
              "      <td>2023-01-01:05:33:30</td>\n",
              "      <td>2023-01-01:05:55:01</td>\n",
              "      <td>34583763.0</td>\n",
              "      <td>76063280.0</td>\n",
              "      <td>1987-08-25</td>\n",
              "      <td>Tammy</td>\n",
              "      <td>Sanderson</td>\n",
              "      <td>264 Kelly Cliff</td>\n",
              "      <td>BLACK CREEK</td>\n",
              "      <td>V9J1J9</td>\n",
              "      <td>10.0</td>\n",
              "      <td>tammysanderson@gmail.com</td>\n",
              "      <td>250.0</td>\n",
              "      <td>4640720.0</td>\n",
              "      <td>E</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>100015</td>\n",
              "      <td>2023-01-01:06:05:39</td>\n",
              "      <td>2023-01-01:06:22:36</td>\n",
              "      <td>53424135.0</td>\n",
              "      <td>67414299.0</td>\n",
              "      <td>1988-10-22</td>\n",
              "      <td>Michelle</td>\n",
              "      <td>Yost</td>\n",
              "      <td>PO BOX 3001 STN B</td>\n",
              "      <td>NAPANEE</td>\n",
              "      <td>K7R3P3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Yos593@duamail.com</td>\n",
              "      <td>613.0</td>\n",
              "      <td>4338096.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>100022</td>\n",
              "      <td>2023-01-01:06:50:44</td>\n",
              "      <td>2023-01-01:07:07:41</td>\n",
              "      <td>77203423.0</td>\n",
              "      <td>20134300.0</td>\n",
              "      <td>1981-12-14</td>\n",
              "      <td>Brigitte</td>\n",
              "      <td>Charlie</td>\n",
              "      <td>5118 Johnson Ford Apt. 587</td>\n",
              "      <td>SCARBOROUGH</td>\n",
              "      <td>M1G3K8</td>\n",
              "      <td>6.0</td>\n",
              "      <td>charlie77brigitte@outlook.com</td>\n",
              "      <td>416.0</td>\n",
              "      <td>1350722.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>100023</td>\n",
              "      <td>2023-01-01:07:00:40</td>\n",
              "      <td>2023-01-01:07:20:47</td>\n",
              "      <td>30846737.0</td>\n",
              "      <td>33544013.0</td>\n",
              "      <td>1995-11-02</td>\n",
              "      <td>Trevor</td>\n",
              "      <td>Woehl</td>\n",
              "      <td>940 Salazar Views</td>\n",
              "      <td>SAINT-RAYMOND</td>\n",
              "      <td>G3L3N3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>trevorwoehl68@gmail.com</td>\n",
              "      <td>418.0</td>\n",
              "      <td>1655277.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46309</th>\n",
              "      <td>146309</td>\n",
              "      <td>2023-01-24:12:00:46</td>\n",
              "      <td>2023-01-24:12:20:33</td>\n",
              "      <td>16877631.0</td>\n",
              "      <td>45678182.0</td>\n",
              "      <td>1998-01-10</td>\n",
              "      <td>MARGARET</td>\n",
              "      <td>gomes goncalves</td>\n",
              "      <td>742 Hensley Lake Apt. 643</td>\n",
              "      <td>CALEDONIA</td>\n",
              "      <td>N3W1G2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>margaretgomesgoncalves55@.edu</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46614</th>\n",
              "      <td>146614</td>\n",
              "      <td>2023-01-24:13:30:50</td>\n",
              "      <td>2023-01-24:13:51:57</td>\n",
              "      <td>77080602.0</td>\n",
              "      <td>20110209.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9335 Dylan Village</td>\n",
              "      <td>MATANE</td>\n",
              "      <td>G4W2E4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>418.0</td>\n",
              "      <td>6554474.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46721</th>\n",
              "      <td>146721</td>\n",
              "      <td>2023-01-24:13:56:05</td>\n",
              "      <td>2023-01-24:14:16:10</td>\n",
              "      <td>34583763.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1995-06-25</td>\n",
              "      <td>yodit</td>\n",
              "      <td>Rennie</td>\n",
              "      <td>2295 Jimenez Forge Apt. 290</td>\n",
              "      <td>CORBEIL</td>\n",
              "      <td>P0H1K0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>rennie84yodit@gmail.com</td>\n",
              "      <td>705.0</td>\n",
              "      <td>8468034.0</td>\n",
              "      <td>UE</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46733</th>\n",
              "      <td>146733</td>\n",
              "      <td>2023-01-24:13:59:12</td>\n",
              "      <td>2023-01-24:14:20:00</td>\n",
              "      <td>61184024.0</td>\n",
              "      <td>77967218.0</td>\n",
              "      <td>1991-04-28</td>\n",
              "      <td>Susan</td>\n",
              "      <td>Felsman</td>\n",
              "      <td>49161 Armstrong Knoll</td>\n",
              "      <td>MARKHAM</td>\n",
              "      <td>L3S4T8</td>\n",
              "      <td>6.0</td>\n",
              "      <td>felsman.susan89@live.ca</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>E</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46735</th>\n",
              "      <td>146735</td>\n",
              "      <td>2023-01-24:13:59:29</td>\n",
              "      <td>2023-01-24:14:18:42</td>\n",
              "      <td>12900387.0</td>\n",
              "      <td>75260385.0</td>\n",
              "      <td>1983-07-27</td>\n",
              "      <td>Arthur</td>\n",
              "      <td>Tanner</td>\n",
              "      <td>937 Holmes Dale Apt. 181</td>\n",
              "      <td>MIRAMICHI</td>\n",
              "      <td>E1N3G3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>tannerarthur50@gmail.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>250</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1279 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d607e5e6-4c1d-4fee-bc43-7bdf6241d408')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d607e5e6-4c1d-4fee-bc43-7bdf6241d408 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d607e5e6-4c1d-4fee-bc43-7bdf6241d408');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 281
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "invalid_F = []\n",
        "# Loop through the APP_ID column and add unique values to the list\n",
        "for app_id in invalid_paid['APP_ID']:\n",
        "    if app_id not in invalid_F:\n",
        "        invalid_F.append(app_id)\n",
        "print(len(invalid_F))"
      ],
      "metadata": {
        "id": "5XaSwcl0WORa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c080e63-188a-4817-b212-69f93be9eb4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "13612\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valid_F = []\n",
        "# Loop through the dataframe and add unique APP_ID values to the list if the corresponding PHONE_NUMBER value is in the dup_phone list\n",
        "for index, row in valid_.iterrows():\n",
        "    if row['APP_ID'] not in valid_F and row['PHONE_NUMBER'] in dup_phone:\n",
        "        valid_F.append(row['APP_ID'])\n",
        "print(len(valid_F))\n",
        "\n",
        "#Loop through the dataframe and add unique APP_ID values to the list \n",
        "#if not already in the list\n",
        "for app_id in p8ndup['APP_ID']:\n",
        "    if app_id not in valid_F:\n",
        "        valid_F.append(app_id)\n",
        "print(len(valid_F))\n",
        "\n",
        "for app_id in wrong_duration:\n",
        "  if app_id not in valid_F:\n",
        "    valid_F.append(app_id)\n",
        "print(len(valid_F))"
      ],
      "metadata": {
        "id": "_iAdlDsbWObA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "653c1ae6-60f0-4a8d-d764-f6eca9d32b2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2228\n",
            "3496\n",
            "4044\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in valid_F:\n",
        "  if i not in invalid_F:\n",
        "    invalid_F.append(i)\n",
        "print(len(invalid_F))\n",
        "\n",
        "final_result = applicant.copy()\n",
        "final_result['true_if_error'] = final_result['APP_ID'].isin(invalid_F)\n",
        "final_result = final_result.loc[:, ['APP_ID', 'true_if_error']]\n",
        "final_result = final_result.reset_index(drop=True)\n",
        "final_result\n",
        "final_result.to_csv('solution.csv', index=False)"
      ],
      "metadata": {
        "id": "4Od8tdaJXTmE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d05e08c9-8d45-4887-9cf7-ab9be9328279"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17656\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "high = [5878766,1644266,9037623,3568617]\n",
        "filtered_df = applicant[applicant['PHONE_NUMBER'].isin(high)]\n",
        "print(filtered_df)\n",
        "color_counts = server['uip_address'].value_counts()\n",
        "\n",
        "# generate a list of ids for colors that occur more than 2 times\n",
        "ids = server[server['uip_address'].isin(color_counts[color_counts >= 2].index)]['APP_ID'].tolist()\n",
        "\n",
        "common_elements = set(filtered_df['APP_ID']).intersection(set(ids))\n",
        "count = len(common_elements)\n",
        "print(count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KKtFUb34Pv7c",
        "outputId": "8e70065e-3182-4fbc-d570-d61673a92c48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        APP_ID           START_TIME             END_TIME         P8N  \\\n",
            "47191   147191  2023-01-24 03:00:00  2023-01-24 03:00:45  14961124.0   \n",
            "47487   147487  2023-01-24 03:00:00  2023-01-24 03:00:45  15977970.0   \n",
            "47844   147844  2023-01-24 03:00:00  2023-01-24 03:00:45  12130236.0   \n",
            "47859   147859  2023-01-24 03:00:00  2023-01-24 03:00:45  44813315.0   \n",
            "51495   151495  2023-01-25 03:00:00  2023-01-25 03:00:45  23387043.0   \n",
            "...        ...                  ...                  ...         ...   \n",
            "184003  284003  2023-03-30 03:00:00  2023-03-30 03:00:45  43821336.0   \n",
            "184558  284558  2023-03-30 03:00:00  2023-03-30 03:00:45  29367258.0   \n",
            "184971  284971  2023-03-30 03:00:00  2023-03-30 03:00:45  64575007.0   \n",
            "186013  286013  2023-03-30 03:00:00  2023-03-30 03:00:45  46985832.0   \n",
            "186066  286066  2023-03-30 03:00:00  2023-03-30 03:00:45  75539680.0   \n",
            "\n",
            "        PARTNER_P8N  BIRTH_DATE    FIRST_NAME       LAST_NAME  \\\n",
            "47191    64196712.0  1985-10-05        Dmytro       Metherell   \n",
            "47487    64196712.0  1999-04-03         Susan          Stoner   \n",
            "47844    64196712.0  1990-12-25      Emmanuel           Kokot   \n",
            "47859    64196712.0  1993-08-09        Keegan  Aguilera Perez   \n",
            "51495    64196712.0  1974-03-19          Paul           Fuqua   \n",
            "...             ...         ...           ...             ...   \n",
            "184003   14269858.0  1993-10-19      NIBEDITA          matouk   \n",
            "184558   14269858.0  1982-10-24         Maria            Hill   \n",
            "184971   14269858.0  1988-10-23        Sessil           Banga   \n",
            "186013   14269858.0  1991-09-03  KULWANT KAUR       Delaurier   \n",
            "186066   14269858.0  1980-05-15     Charlotte       Davarzani   \n",
            "\n",
            "                            STREET_NAME MUNICIPALITY_NAME POSTAL_CODE  \\\n",
            "47191       688 Brady Springs Suite 995    SAINTE-MELANIE      J0K3A0   \n",
            "47487    832 Christine Rapids Suite 193         BRANTFORD      N3R2K1   \n",
            "47844                     47 Silva Pike        BURLINGTON      L7M3N2   \n",
            "47859   9443 Cunningham Union Suite 440            BARRIE      L4N2T2   \n",
            "51495          6 Trujillo Rest Apt. 118            SARNIA      N7V2B2   \n",
            "...                                 ...               ...         ...   \n",
            "184003     29 Mcclain Estates Suite 176            REGINA      S4R4W7   \n",
            "184558        9387 Clark Fall Suite 170           AIRDRIE      T4B2V3   \n",
            "184971       910 Dale Mountain Apt. 461     CENTRAL BUTTE      S0H0T0   \n",
            "186013                 963 Hannah Parks           BURNABY      V5B2N7   \n",
            "186066       539 Jackson Plain Apt. 114             LEDUC      T9E8R4   \n",
            "\n",
            "        PROVINCE__ID                            EMAIL  HOME_AREA_CODE  \\\n",
            "47191            5.0      metherell73dmytro@gmail.com           581.0   \n",
            "47487            6.0         susan_stoner89@gmail.com           581.0   \n",
            "47844            6.0       emmanuel.kokot64@gmail.com           581.0   \n",
            "47859            6.0     kaguileraperez64@outlook.com           581.0   \n",
            "51495            6.0            fuqua58paul@gmail.com           581.0   \n",
            "...              ...                              ...             ...   \n",
            "184003           8.0     matouk92nibedita@outlook.com           604.0   \n",
            "184558           9.0            hill89maria@gmail.com           604.0   \n",
            "184971           8.0           banga2sessil@gmail.com           604.0   \n",
            "186013          10.0         kk_delaurier91@gmail.com           604.0   \n",
            "186066           9.0  charlotte.davarzani@outlook.com           604.0   \n",
            "\n",
            "        PHONE_NUMBER EMPLOYMENT_STATUS  CUMUL_PAY  \n",
            "47191      3568617.0                UE       1500  \n",
            "47487      3568617.0                UE        800  \n",
            "47844      3568617.0                 E        800  \n",
            "47859      3568617.0                 E        500  \n",
            "51495      3568617.0                 E       1500  \n",
            "...              ...               ...        ...  \n",
            "184003     5878766.0                UE          0  \n",
            "184558     5878766.0                 E          0  \n",
            "184971     5878766.0                 E          0  \n",
            "186013     5878766.0                 E          0  \n",
            "186066     5878766.0                 E          0  \n",
            "\n",
            "[257 rows x 17 columns]\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cCatbfsod00c",
        "outputId": "15c6bb1f-aeca-4df6-d281-1631bcfa7d8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5878766    66\n",
            "1644266    66\n",
            "9037623    53\n",
            "3568617    47\n",
            "2322726     3\n",
            "           ..\n",
            "5580723     1\n",
            "5113877     1\n",
            "2816183     1\n",
            "6675992     1\n",
            "2864275     1\n",
            "Name: PHONE_NUMBER, Length: 123334, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "venn2([set(filtered_df['APP_ID']), set(ids)], set_labels=('Duplicated Phone Numbers', 'Duplicated IP Address'))\n",
        "plt.title('Venn Diagram of Duplication in IPs and Phone Numbers')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "S6t8TH9Ace4s",
        "outputId": "afe8ae59-cdc8-4e71-bc61-3caf0bee3c6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 842.4x595.44 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}